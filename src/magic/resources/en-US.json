[
  {
    "_idx": 58,
    "type": "directive",
    "selector": "nz-row",
    "types": {},
    "properties": [
      {
        "name": "nzAlign",
        "inputType": 0,
        "description": "the vertical alignment of the flex layout",
        "type": "Enum",
        "typeRaw": "`'top'｜'middle'｜'bottom'`",
        "default": "`'top'`",
        "typeDefinition": [
          "top",
          "middle",
          "bottom"
        ],
        "pureDefault": "top"
      },
      {
        "name": "nzGutter",
        "inputType": 0,
        "description": "spacing between grids, could be a number or a object like `{ xs: 8, sm: 16, md: 24, lg: 32, xl: 32, xxl: 32 }`",
        "type": "Enum",
        "typeRaw": "`number｜object`",
        "default": "`0`",
        "pureDefault": "0",
        "typeDefinition": [
          "0",
          "8",
          "16",
          "24",
          "32",
          "40",
          "48",
          "56",
          "64"
        ]
      },
      {
        "name": "nzJustify",
        "inputType": 0,
        "description": "horizontal arrangement of the flex layout",
        "type": "Enum",
        "typeRaw": "`'start'｜'end'｜'center'｜'space-around'｜'space-between'`",
        "default": "`'start'`",
        "typeDefinition": [
          "start",
          "end",
          "center",
          "space-around",
          "space-between"
        ],
        "pureDefault": "start"
      },
      {
        "name": "nzType",
        "inputType": 0,
        "description": "layout mode, optional `flex`, [browser support](http://caniuse.com/#search=flex)",
        "type": "Enum",
        "typeRaw": "`'flex'`",
        "default": "",
        "typeDefinition": [
          "flex"
        ]
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Grid",
    "description": "24 Grids System。",
    "whenToUse": "",
    "doc": "/components/grid/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/grid"
  },
  {
    "_idx": 137,
    "type": "directive",
    "selector": "nz-col",
    "types": {},
    "properties": [
      {
        "name": "nzOffset",
        "inputType": 0,
        "description": "the number of cells to offset Col from the left",
        "type": "Enum",
        "typeRaw": "`number`",
        "default": "`0`",
        "pureDefault": "0",
        "typeDefinition": [
          "0",
          "8",
          "16",
          "24",
          "32",
          "40",
          "48",
          "56",
          "64"
        ]
      },
      {
        "name": "nzOrder",
        "inputType": 0,
        "description": "raster order, used in `flex` layout mode",
        "type": "Enum",
        "typeRaw": "`number`",
        "default": "`0`",
        "pureDefault": "0",
        "typeDefinition": [
          "0",
          "8",
          "16",
          "24",
          "32",
          "40",
          "48",
          "56",
          "64"
        ]
      },
      {
        "name": "nzPull",
        "inputType": 0,
        "description": "the number of cells that raster is moved to the left",
        "type": "Enum",
        "typeRaw": "`number`",
        "default": "`0`",
        "pureDefault": "0",
        "typeDefinition": [
          "0",
          "8",
          "16",
          "24",
          "32",
          "40",
          "48",
          "56",
          "64"
        ]
      },
      {
        "name": "nzPush",
        "inputType": 0,
        "description": "the number of cells that raster is moved to the right",
        "type": "Enum",
        "typeRaw": "`number`",
        "default": "`0`",
        "pureDefault": "0",
        "typeDefinition": [
          "0",
          "8",
          "16",
          "24",
          "32",
          "40",
          "48",
          "56",
          "64"
        ]
      },
      {
        "name": "nzSpan",
        "inputType": 0,
        "description": "raster number of cells to occupy, 0 corresponds to `display: none`",
        "type": "Enum",
        "typeRaw": "`number`",
        "default": "",
        "typeDefinition": [
          "0",
          "8",
          "16",
          "24",
          "32",
          "40",
          "48",
          "56",
          "64"
        ]
      },
      {
        "name": "nzXs",
        "inputType": 0,
        "description": "`<576px` and also default setting, could be a `span` value or an object containing above props",
        "type": "Enum",
        "typeRaw": "`number｜object`",
        "default": "",
        "typeDefinition": [
          "0",
          "8",
          "16",
          "24",
          "32",
          "40",
          "48",
          "56",
          "64"
        ]
      },
      {
        "name": "nzSm",
        "inputType": 0,
        "description": "`≥576px`, could be a `span` value or an object containing above props",
        "type": "Enum",
        "typeRaw": "`number｜object`",
        "default": "",
        "typeDefinition": [
          "0",
          "8",
          "16",
          "24",
          "32",
          "40",
          "48",
          "56",
          "64"
        ]
      },
      {
        "name": "nzMd",
        "inputType": 0,
        "description": "`≥768px`, could be a `span` value or an object containing above props",
        "type": "Enum",
        "typeRaw": "`number｜object`",
        "default": "",
        "typeDefinition": [
          "0",
          "8",
          "16",
          "24",
          "32",
          "40",
          "48",
          "56",
          "64"
        ]
      },
      {
        "name": "nzLg",
        "inputType": 0,
        "description": "`≥992px`, could be a `span` value or an object containing above props",
        "type": "Enum",
        "typeRaw": "`number｜object`",
        "default": "",
        "typeDefinition": [
          "0",
          "8",
          "16",
          "24",
          "32",
          "40",
          "48",
          "56",
          "64"
        ]
      },
      {
        "name": "nzXl",
        "inputType": 0,
        "description": "`≥1200px`, could be a `span` value or an object containing above props",
        "type": "Enum",
        "typeRaw": "`number｜object`",
        "default": "",
        "typeDefinition": [
          "0",
          "8",
          "16",
          "24",
          "32",
          "40",
          "48",
          "56",
          "64"
        ]
      },
      {
        "name": "nzXXl",
        "inputType": 0,
        "description": "`≥1600px`, could be a `span` value or an object containing above props",
        "type": "Enum",
        "typeRaw": "`number｜object`",
        "default": "",
        "typeDefinition": [
          "0",
          "8",
          "16",
          "24",
          "32",
          "40",
          "48",
          "56",
          "64"
        ]
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Grid",
    "description": "24 Grids System。",
    "whenToUse": "",
    "doc": "/components/grid/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/grid"
  },
  {
    "_idx": 21,
    "type": "component",
    "selector": "nz-tooltip",
    "types": {},
    "properties": [
      {
        "name": "nzMouseEnterDelay",
        "inputType": 0,
        "description": "Delay in seconds, before tooltip is shown on mouse enter",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`0.15`",
        "pureDefault": "0.15",
        "_common": true
      },
      {
        "name": "nzMouseLeaveDelay",
        "inputType": 0,
        "description": "Delay in seconds, before tooltip is hidden on mouse leave",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`0.1`",
        "pureDefault": "0.1",
        "_common": true
      },
      {
        "name": "nzOverlayClassName",
        "inputType": 0,
        "description": "Class name of the tooltip card",
        "type": "string",
        "typeRaw": "`string`",
        "default": "",
        "_common": true
      },
      {
        "name": "nzOverlayStyle",
        "inputType": 0,
        "description": "Style of the tooltip card",
        "type": "object",
        "typeRaw": "`object`",
        "default": "",
        "_common": true,
        "forceInputType": 0
      },
      {
        "name": "nzPlacement",
        "inputType": 0,
        "description": "The position of the tooltip relative to the target",
        "type": "Enum",
        "typeRaw": "`'top'｜'left'｜'right'｜'bottom'｜'topLeft'｜'topRight'｜'bottomLeft'｜'bottomRight'｜'leftTop'｜'leftBottom'｜'rightTop'｜'rightBottom'`",
        "default": "`'top'`",
        "typeDefinition": [
          "top",
          "left",
          "right",
          "bottom",
          "topLeft",
          "topRight",
          "bottomLeft",
          "bottomRight",
          "leftTop",
          "leftBottom",
          "rightTop",
          "rightBottom"
        ],
        "pureDefault": "top",
        "_common": true
      },
      {
        "name": "nzTrigger",
        "inputType": 0,
        "description": "Tooltip trigger mode",
        "type": "Enum",
        "typeRaw": "`'click'｜'focus'｜'hover'`",
        "default": "`'hover'`",
        "typeDefinition": [
          "click",
          "focus",
          "hover"
        ],
        "pureDefault": "hover",
        "_common": true
      },
      {
        "name": "nzVisible",
        "inputType": 0,
        "description": "Whether the floating tooltip card is visible or not",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "_common": true
      },
      {
        "name": "nzVisibleChange",
        "inputType": 1,
        "description": "Callback executed when visibility of the tooltip card is changed",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<boolean>`",
        "default": "",
        "_common": true
      },
      {
        "name": "nzTitle",
        "inputType": 0,
        "description": "The text shown in the tooltip",
        "type": "string",
        "typeRaw": "`string｜TemplateRef<void>`",
        "default": ""
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Tooltip",
    "description": "A simple text popup tip.",
    "whenToUse": "- The tip is shown on mouse enter, and is hidden on mouse leave. The Tooltip doesn't support complex text or operations.\n- To provide an explanation of a `button/text/operation`. It's often used instead of the html `title` attribute.",
    "doc": "/components/tooltip/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/tooltip",
    "snippet": "<span __$1>$2</span>"
  },
  {
    "_idx": 11,
    "type": "component",
    "selector": "sg-container",
    "types": {},
    "properties": [
      {
        "name": "gutter",
        "inputType": 0,
        "description": "specify the distance between two items, unit is `px`, only `nzLayout:horizontal`",
        "type": "Enum",
        "typeRaw": "`number`",
        "default": "`32`",
        "pureDefault": "32",
        "typeDefinition": [
          "0",
          "8",
          "16",
          "24",
          "32",
          "40",
          "48",
          "56",
          "64"
        ]
      },
      {
        "name": "sg-container",
        "inputType": 0,
        "description": "specify the maximum number of columns to display, the final columns number is determined by col setting combined with [Responsive Rules](/theme/responsive)",
        "type": "Enum",
        "typeRaw": "`'1','2','3','4','5','6'`",
        "default": "",
        "typeDefinition": [
          "1",
          "2",
          "3",
          "4",
          "5",
          "6"
        ]
      },
      {
        "name": "col",
        "inputType": 0,
        "description": "specify the maximum number of columns to display, the final columns number is determined by col setting combined with [Responsive Rules](/theme/responsive)",
        "type": "Enum",
        "typeRaw": "`'1','2','3','4','5','6'`",
        "default": "",
        "typeDefinition": [
          "1",
          "2",
          "3",
          "4",
          "5",
          "6"
        ]
      }
    ],
    "lib": "@delon/abc",
    "title": "Simple Grid",
    "description": "A higher-order components of grid systems, that consists of `sg-container` (directive) and `sg` components:",
    "whenToUse": "",
    "doc": "https://ng-alain.com/components/grid/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/abc/grid"
  },
  {
    "_idx": 11,
    "type": "directive",
    "selector": "sg-container",
    "types": {},
    "properties": [
      {
        "name": "gutter",
        "inputType": 0,
        "description": "specify the distance between two items, unit is `px`, only `nzLayout:horizontal`",
        "type": "Enum",
        "typeRaw": "`number`",
        "default": "`32`",
        "pureDefault": "32",
        "typeDefinition": [
          "0",
          "8",
          "16",
          "24",
          "32",
          "40",
          "48",
          "56",
          "64"
        ]
      },
      {
        "name": "sg-container",
        "inputType": 0,
        "description": "specify the maximum number of columns to display, the final columns number is determined by col setting combined with [Responsive Rules](/theme/responsive)",
        "type": "Enum",
        "typeRaw": "`'1','2','3','4','5','6'`",
        "default": "",
        "typeDefinition": [
          "1",
          "2",
          "3",
          "4",
          "5",
          "6"
        ]
      },
      {
        "name": "col",
        "inputType": 0,
        "description": "specify the maximum number of columns to display, the final columns number is determined by col setting combined with [Responsive Rules](/theme/responsive)",
        "type": "Enum",
        "typeRaw": "`'1','2','3','4','5','6'`",
        "default": "",
        "typeDefinition": [
          "1",
          "2",
          "3",
          "4",
          "5",
          "6"
        ]
      }
    ],
    "lib": "@delon/abc",
    "title": "Simple Grid",
    "description": "A higher-order components of grid systems, that consists of `sg-container` (directive) and `sg` components:",
    "whenToUse": "",
    "doc": "https://ng-alain.com/components/grid/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/abc/grid"
  },
  {
    "_idx": 76,
    "type": "component",
    "selector": "sg",
    "types": {},
    "properties": [
      {
        "name": "col",
        "inputType": 0,
        "description": "specify the maximum number of columns to display, the final columns number is determined by col setting combined with [Responsive Rules](/theme/responsive)",
        "type": "Enum",
        "typeRaw": "`'1','2','3','4','5','6'`",
        "default": "",
        "typeDefinition": [
          "1",
          "2",
          "3",
          "4",
          "5",
          "6"
        ]
      }
    ],
    "lib": "@delon/abc",
    "title": "Simple Grid",
    "description": "A higher-order components of grid systems, that consists of `sg-container` (directive) and `sg` components:",
    "whenToUse": "",
    "doc": "https://ng-alain.com/components/grid/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/abc/grid"
  },
  {
    "_idx": 22,
    "type": "component",
    "selector": "nz-timeline",
    "types": {},
    "properties": [
      {
        "name": "nzPending",
        "inputType": 0,
        "description": "Set the last ghost node's existence or its content",
        "type": "string",
        "typeRaw": "`string｜boolean｜TemplateRef<void>`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzPendingDot",
        "inputType": 0,
        "description": "Set the dot of the last ghost node when pending is true",
        "type": "string",
        "typeRaw": "`string｜TemplateRef<void>`",
        "default": "`<i nz-icon type=\"loading\"></i>`",
        "pureDefault": "<i nz-icon type=\"loading\"></i>"
      },
      {
        "name": "nzReverse",
        "inputType": 0,
        "description": "Reverse nodes or not",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzMode",
        "inputType": 0,
        "description": "By sending `alternate` the timeline will distribute the nodes to the left and right",
        "type": "Enum",
        "typeRaw": "`'left'｜'alternate'｜'right'`",
        "default": "",
        "typeDefinition": [
          "left",
          "alternate",
          "right"
        ]
      }
    ],
    "description": "Timeline",
    "lib": "ng-zorro-antd",
    "title": "Timeline",
    "whenToUse": "- When a series of information needs to be ordered by time (ascend or descend).\n- When you need a timeline to make a visual connection.",
    "doc": "/components/timeline/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/timeline"
  },
  {
    "_idx": 104,
    "type": "component",
    "selector": "nz-timeline-item",
    "types": {},
    "properties": [
      {
        "name": "nzColor",
        "inputType": 0,
        "description": "Set the circle's color to `blue`, `red`, `green` or other custom colors (css color)",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`blue`",
        "pureDefault": "blue"
      },
      {
        "name": "nzDot",
        "inputType": 0,
        "description": "Customize timeline dot",
        "type": "string",
        "typeRaw": "`string｜TemplateRef<void>`",
        "default": ""
      }
    ],
    "description": "Node of timeline",
    "lib": "ng-zorro-antd",
    "title": "Timeline",
    "whenToUse": "- When a series of information needs to be ordered by time (ascend or descend).\n- When you need a timeline to make a visual connection.",
    "doc": "/components/timeline/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/timeline"
  },
  {
    "_idx": 6,
    "type": "component",
    "selector": "nz-avatar",
    "types": {},
    "properties": [
      {
        "name": "nzIcon",
        "inputType": 0,
        "description": "the `Icon` type for an icon avatar, see `Icon`",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "nzShape",
        "inputType": 0,
        "description": "the shape of avatar",
        "type": "Enum",
        "typeRaw": "`'circle'｜'square'`",
        "default": "`'circle'`",
        "typeDefinition": [
          "circle",
          "square"
        ],
        "pureDefault": "circle"
      },
      {
        "name": "nzSize",
        "inputType": 0,
        "description": "the size of the avatar",
        "type": "Enum",
        "typeRaw": "`'large'｜'small'｜'default'｜number`",
        "default": "`'default'`",
        "typeDefinition": [
          "large",
          "small",
          "default",
          "number"
        ],
        "pureDefault": "default"
      },
      {
        "name": "nzSrc",
        "inputType": 0,
        "description": "the address of the image for an image avatar",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "nzText",
        "inputType": 0,
        "description": "letter type avatar",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Avatar",
    "description": "Avatars can be used to represent people or objects. It supports images, `Icon`s, or letters.",
    "whenToUse": "",
    "doc": "/components/avatar/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/avatar"
  },
  {
    "_idx": 21,
    "type": "component",
    "selector": "nz-back-top",
    "types": {},
    "properties": [
      {
        "name": "nzTemplate",
        "inputType": 0,
        "description": "custom content",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzVisibilityHeight",
        "inputType": 0,
        "description": "the `nz-back-top` button will not show until the scroll height reaches this value",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`400`",
        "pureDefault": "400"
      },
      {
        "name": "nzTarget",
        "inputType": 0,
        "description": "specifies the scrollable area dom node",
        "type": "string",
        "typeRaw": "`string｜Element`",
        "default": "`window`",
        "pureDefault": "window"
      },
      {
        "name": "nzClick",
        "inputType": 1,
        "description": "a callback function, which can be executed when you click the button",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<boolean>`",
        "default": ""
      }
    ],
    "description": "The distance to the bottom is set to `50px` by default, which is overridable.\nIf you decide to use custom styles, please note the size limit: no more than `40px * 40px`.",
    "lib": "ng-zorro-antd",
    "title": "BackTop",
    "whenToUse": "- When the page content is very long.\n- When you need to go back to the top very frequently in order to view the contents.",
    "doc": "/components/back-top/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/back-top"
  },
  {
    "_idx": 14,
    "type": "component",
    "selector": "nz-badge",
    "types": {},
    "properties": [
      {
        "name": "nzCount",
        "inputType": 0,
        "description": "Number to show in badge",
        "type": "number",
        "typeRaw": "`number`",
        "default": ""
      },
      {
        "name": "nzDot",
        "inputType": 0,
        "description": "Whether to display a red dot instead of `count`",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzShowDot",
        "inputType": 0,
        "description": "Whether to display the red dot",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "nzOverflowCount",
        "inputType": 0,
        "description": "Max count to show",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`99`",
        "pureDefault": "99"
      },
      {
        "name": "nzShowZero",
        "inputType": 0,
        "description": "Whether to show badge when `count` is zero",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzStatus",
        "inputType": 0,
        "description": "Set `nz-badge` as a status dot",
        "type": "Enum",
        "typeRaw": "`'success'｜'processing'｜'default'｜'error'｜'warning'`",
        "default": "",
        "typeDefinition": [
          "success",
          "processing",
          "default",
          "error",
          "warning"
        ]
      },
      {
        "name": "nzText",
        "inputType": 0,
        "description": "If `nzStatus` is set, `text` sets the display text of the status `dot`",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Badge",
    "description": "Small numerical value or status descriptor for UI elements.",
    "whenToUse": "Badge normally appears in proximity to notifications or user avatars with eye-catching appeal, typically displaying unread messages count.",
    "doc": "/components/badge/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/badge"
  },
  {
    "_idx": 31,
    "type": "component",
    "selector": "nz-breadcrumb",
    "types": {},
    "properties": [
      {
        "name": "nzSeparator",
        "inputType": 0,
        "description": "Custom separator",
        "type": "string",
        "typeRaw": "`string｜TemplateRef<void>`",
        "default": "`'/'`",
        "pureDefault": "/"
      },
      {
        "name": "nzAutoGenerate",
        "inputType": 0,
        "description": "Auto generate breadcrumb",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Breadcrumb",
    "description": "A breadcrumb displays the current location within a hierarchy. It allows going back to states higher up in the hierarchy.",
    "whenToUse": "- When the system has more than two layers in a hierarchy.\n- When you need to inform the user of where they are.\n- When the user may need to navigate back to a higher level.\n- When the application has multi-layer architecture.",
    "doc": "/components/breadcrumb/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/breadcrumb"
  },
  {
    "_idx": 12,
    "type": "directive",
    "selector": "nz-button",
    "types": {},
    "properties": [
      {
        "name": "nzGhost",
        "inputType": 0,
        "description": "make background transparent and invert text and border colors",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzLoading",
        "inputType": 0,
        "description": "set the loading status of button",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "forceInputType": 0
      },
      {
        "name": "nzShape",
        "inputType": 0,
        "description": "can be set to `circle` or omitted",
        "type": "Enum",
        "typeRaw": "`'circle'`",
        "default": "",
        "typeDefinition": [
          "circle"
        ]
      },
      {
        "name": "nzSize",
        "inputType": 0,
        "description": "can be set to `small` `large` or omitted",
        "type": "Enum",
        "typeRaw": "`'large'｜'small'｜'default'`",
        "default": "`'default'`",
        "typeDefinition": [
          "large",
          "small",
          "default"
        ],
        "pureDefault": "default"
      },
      {
        "name": "nzType",
        "inputType": 0,
        "description": "can be set to `primary` `ghost` `dashed` `danger` or omitted (meaning `default`)",
        "type": "Enum",
        "typeRaw": "`'primary'｜'ghost'｜'dashed'｜'danger'｜'default'`",
        "default": "`'default'`",
        "typeDefinition": [
          "primary",
          "ghost",
          "dashed",
          "danger",
          "default"
        ],
        "pureDefault": "default"
      },
      {
        "name": "nzBlock",
        "inputType": 0,
        "description": "option to fit button width to its parent width",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "click",
        "inputType": 1,
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter`"
      },
      {
        "name": "disabled",
        "inputType": 0,
        "type": "boolean",
        "typeRaw": "`boolean`",
        "forceInputType": 0
      }
    ],
    "description": "To get a customized button, just set `nzType`/`nzShape`/`nzSize`/`nzLoading`/`disabled`.",
    "lib": "ng-zorro-antd",
    "title": "Button",
    "whenToUse": "A button means an operation (or a series of operations). Clicking a button will trigger corresponding business logic.",
    "doc": "/components/button/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/button",
    "snippet": "<button __$1>${2|Save,Submit,Cancel,Create,Delete,Search|}</button>"
  },
  {
    "_idx": 20,
    "type": "component",
    "selector": "nz-calendar",
    "types": {},
    "properties": [
      {
        "name": "ngModel",
        "inputType": 2,
        "description": "(Two-way bindable) The current selected date",
        "type": "object",
        "typeRaw": "`Date`",
        "default": "current date",
        "pureDefault": "current date"
      },
      {
        "name": "nzMode",
        "inputType": 2,
        "description": "The display mode of the calendar (two-way bindable)",
        "type": "Enum",
        "typeRaw": "`'month'｜'year'`",
        "default": "`'month'`",
        "typeDefinition": [
          "month",
          "year"
        ],
        "pureDefault": "month"
      },
      {
        "name": "nzFullscreen",
        "inputType": 0,
        "description": "Whether to display in full-screen",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true",
        "forceInputType": 0
      },
      {
        "name": "nzCard",
        "inputType": 0,
        "description": "Whether to not display in full-screen",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzDateCell",
        "inputType": 0,
        "description": "(Contentable) Customize the display of the date cell, the template content will be appended to the cell",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef<Date>`",
        "default": ""
      },
      {
        "name": "nzDateFullCell",
        "inputType": 0,
        "description": "(Contentable) Customize the display of the date cell, the template content will override the cell",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef<Date>`",
        "default": ""
      },
      {
        "name": "nzMonthCell",
        "inputType": 0,
        "description": "(Contentable) Customize the display of the month cell, the template content will be appended to the cell",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef<Date>`",
        "default": ""
      },
      {
        "name": "nzMonthFullCell",
        "inputType": 0,
        "description": "(Contentable) Customize the display of the month cell, the template content will override the cell",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef<Date>`",
        "default": ""
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Calendar",
    "description": "Container for displaying data in calendar form.",
    "whenToUse": "When data is in the form of dates, such as schedules, timetables, prices calendar, lunar calendar. This component also supports Year/Month switch.",
    "doc": "/components/calendar/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/calendar"
  },
  {
    "_idx": 13,
    "type": "component",
    "selector": "nz-card",
    "types": {},
    "properties": [
      {
        "name": "nzActions",
        "inputType": 0,
        "description": "The action list, shows at the bottom of the Card.",
        "type": "Array",
        "typeRaw": "`Array<TemplateRef<void>>`",
        "default": ""
      },
      {
        "name": "nzBodyStyle",
        "inputType": 0,
        "description": "Inline style to apply to the card content",
        "type": "object",
        "typeRaw": "`{ [key: string]: string }`",
        "default": ""
      },
      {
        "name": "nzBordered",
        "inputType": 0,
        "description": "Toggles rendering of the border around the card",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "nzCover",
        "inputType": 0,
        "description": "Card cover",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzExtra",
        "inputType": 0,
        "description": "Content to render in the top-right corner of the card",
        "type": "string",
        "typeRaw": "`string｜TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzHoverable",
        "inputType": 0,
        "description": "Lift up when hovering card",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzLoading",
        "inputType": 0,
        "description": "Shows a loading indicator while the contents of the card are being fetched",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "forceInputType": 0
      },
      {
        "name": "nzTitle",
        "inputType": 0,
        "description": "Card title",
        "type": "string",
        "typeRaw": "`string｜TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzType",
        "inputType": 0,
        "description": "Card style type, can be set to `inner` or not set",
        "type": "Enum",
        "typeRaw": "`'inner'`",
        "default": "",
        "typeDefinition": [
          "inner"
        ]
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Card",
    "description": "Simple rectangular container.",
    "whenToUse": "A card can be used to display content related to a single subject. The content can consist of multiple elements of varying types and sizes.",
    "doc": "/components/card/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/card"
  },
  {
    "_idx": 162,
    "type": "component",
    "selector": "nz-card-meta",
    "types": {},
    "properties": [
      {
        "name": "nzAvatar",
        "inputType": 0,
        "description": "avatar or icon",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzDescription",
        "inputType": 0,
        "description": "description content",
        "type": "string",
        "typeRaw": "`string｜TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzTitle",
        "inputType": 0,
        "description": "title content",
        "type": "string",
        "typeRaw": "`string｜TemplateRef<void>`",
        "default": ""
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Card",
    "description": "Simple rectangular container.",
    "whenToUse": "A card can be used to display content related to a single subject. The content can consist of multiple elements of varying types and sizes.",
    "doc": "/components/card/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/card"
  },
  {
    "_idx": 227,
    "type": "directive",
    "selector": "nz-card-grid",
    "types": {},
    "properties": [],
    "description": "Area for grid style card",
    "lib": "ng-zorro-antd",
    "title": "Card",
    "whenToUse": "A card can be used to display content related to a single subject. The content can consist of multiple elements of varying types and sizes.",
    "doc": "/components/card/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/card"
  },
  {
    "_idx": 233,
    "type": "component",
    "selector": "nz-card-tab",
    "types": {},
    "properties": [],
    "description": "Area for tab card",
    "lib": "ng-zorro-antd",
    "title": "Card",
    "whenToUse": "A card can be used to display content related to a single subject. The content can consist of multiple elements of varying types and sizes.",
    "doc": "/components/card/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/card"
  },
  {
    "_idx": 26,
    "type": "component",
    "selector": "nz-carousel",
    "types": {},
    "properties": [
      {
        "name": "nzAutoPlay",
        "inputType": 0,
        "description": "Whether to scroll automatically",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzAutoPlaySpeed",
        "inputType": 0,
        "description": "Duration (milliseconds), does not scroll when set to 0",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`3000`",
        "pureDefault": "3000"
      },
      {
        "name": "nzDots",
        "inputType": 0,
        "description": "Whether to show the dots at the bottom of the gallery",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "nzDotRender",
        "inputType": 0,
        "description": "Dot render template",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef<{ $implicit: number }>`",
        "default": ""
      },
      {
        "name": "nzEffect",
        "inputType": 0,
        "description": "Transition effect",
        "type": "Enum",
        "typeRaw": "`'scrollx'｜'fade'`",
        "default": "`'scrollx'`",
        "typeDefinition": [
          "scrollx",
          "fade"
        ],
        "pureDefault": "scrollx"
      },
      {
        "name": "nzVertical",
        "inputType": 0,
        "description": "Whether to use a vertical display",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzAfterChange",
        "inputType": 1,
        "description": "Callback function called after the current index changes",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<number>`",
        "default": ""
      },
      {
        "name": "nzBeforeChange",
        "inputType": 1,
        "description": "Callback function called before the current index changes",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter{ from: number; to: number }>`",
        "default": ""
      },
      {
        "name": "nzEnableSwipe",
        "inputType": 0,
        "description": "Whether to support swipe gesture (would work if only you import hammer.js in your project)",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Carousel",
    "description": "A carousel component. Scales with its container.",
    "whenToUse": "- When there is a group of content on the same level.\n- When there is insufficient content space, it can be used to save space in the form of a revolving door.\n- Commonly used for a group of pictures/cards.",
    "doc": "/components/carousel/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/carousel"
  },
  {
    "_idx": 27,
    "type": "component",
    "selector": "nz-cascader",
    "types": {},
    "properties": [
      {
        "name": "ngModel",
        "inputType": 2,
        "description": "selected value",
        "type": "object",
        "typeRaw": "`any[]`",
        "default": ""
      },
      {
        "name": "nzAllowClear",
        "inputType": 0,
        "description": "whether allow clear",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "nzAutoFocus",
        "inputType": 0,
        "description": "whether auto focus the input box",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzChangeOn",
        "inputType": 0,
        "description": "change value on each selection if this function return `true`",
        "type": "function",
        "typeRaw": "`function(option: any, index: number) => boolean`",
        "default": ""
      },
      {
        "name": "nzChangeOnSelect",
        "inputType": 0,
        "description": "change value on each selection if set to true, see above demo for details",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzColumnClassName",
        "inputType": 0,
        "description": "additional className of column in the popup overlay",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "nzDisabled",
        "inputType": 0,
        "description": "whether disabled select",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "forceInputType": 0
      },
      {
        "name": "nzExpandTrigger",
        "inputType": 0,
        "description": "expand current item when click or hover, one of 'click' 'hover'",
        "type": "Enum",
        "typeRaw": "`'click'｜'hover'`",
        "default": "`'click'`",
        "typeDefinition": [
          "click",
          "hover"
        ],
        "pureDefault": "click"
      },
      {
        "name": "nzMenuClassName",
        "inputType": 0,
        "description": "additional className of popup overlay",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "nzMenuStyle",
        "inputType": 0,
        "description": "additional css style of popup overlay",
        "type": "object",
        "typeRaw": "`object`",
        "default": ""
      },
      {
        "name": "nzNotFoundContent",
        "inputType": 0,
        "description": "Specify content to show when no result matches.",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "nzLabelProperty",
        "inputType": 0,
        "description": "the label property name of options",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`'label'`",
        "pureDefault": "label"
      },
      {
        "name": "nzLabelRender",
        "inputType": 0,
        "description": "render template of displaying selected options",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef<any>`",
        "default": ""
      },
      {
        "name": "nzLoadData",
        "inputType": 0,
        "description": "To load option lazily. If setting `ngModel` with an array value and `nzOptions` is not setting, lazy load will be call immediately",
        "type": "function",
        "typeRaw": "`(option: any, index?: index) => PromiseLike<any>`",
        "default": ""
      },
      {
        "name": "nzOptions",
        "inputType": 0,
        "description": "data options of cascade",
        "type": "object",
        "typeRaw": "`object[]`",
        "default": ""
      },
      {
        "name": "nzPlaceHolder",
        "inputType": 0,
        "description": "input placeholder",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`'Please select'`",
        "pureDefault": "Please select"
      },
      {
        "name": "nzShowArrow",
        "inputType": 0,
        "description": "Whether show arrow",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "nzShowInput",
        "inputType": 0,
        "description": "Whether show input",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "nzShowSearch",
        "inputType": 0,
        "description": "Whether support search. Cannot be used with `[nzLoadData]` at the same time",
        "type": "boolean",
        "typeRaw": "`boolean｜NzShowSearchOptions`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzSize",
        "inputType": 0,
        "description": "input size, one of `large` `default` `small`",
        "type": "Enum",
        "typeRaw": "`'large'｜'small'｜'default'`",
        "default": "`'default'`",
        "typeDefinition": [
          "large",
          "small",
          "default"
        ],
        "pureDefault": "default"
      },
      {
        "name": "nzValueProperty",
        "inputType": 0,
        "description": "the value property name of options",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`'value'`",
        "pureDefault": "value"
      },
      {
        "name": "ngModelChange",
        "inputType": 1,
        "description": "Emit on values change",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<any[]>`",
        "default": ""
      },
      {
        "name": "nzClear",
        "inputType": 1,
        "description": "Emit on clear values",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<void>`",
        "default": ""
      },
      {
        "name": "nzVisibleChange",
        "inputType": 1,
        "description": "Emit on popup menu visible or hide",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<boolean>`",
        "default": ""
      },
      {
        "name": "nzSelect",
        "inputType": 1,
        "description": "Emit on select",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<{option: any, index: number}>`",
        "default": ""
      },
      {
        "name": "nzSelectionChange",
        "inputType": 1,
        "description": "Emit on selection change",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<any[]>`",
        "default": ""
      },
      {
        "name": "formControlName",
        "inputType": 0,
        "type": "string",
        "typeRaw": "`string`"
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Cascader",
    "description": "Cascade selection box.",
    "whenToUse": "- When you need to select from a set of associated data set. Such as province/city/district, company level, things classification.\n- When selecting from a large data set, with multi-stage classification separated for easy selection.\n- Chooses cascade items in one float layer for better user experience.",
    "doc": "/components/cascader/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/cascader"
  },
  {
    "_idx": 21,
    "type": "directive",
    "selector": "nz-checkbox",
    "types": {},
    "properties": [
      {
        "name": "nzAutoFocus",
        "inputType": 0,
        "description": "get focus when component mounted",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzDisabled",
        "inputType": 0,
        "description": "Disable checkbox",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "forceInputType": 0
      },
      {
        "name": "ngModel",
        "inputType": 2,
        "description": "Specifies whether the checkbox is selected, double binding",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzIndeterminate",
        "inputType": 0,
        "description": "set the status of indeterminate，only affect the style",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "forceInputType": 0
      },
      {
        "name": "nzValue",
        "inputType": 0,
        "description": "use for the callback of `nz-checkbox-wrapper`",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "ngModelChange",
        "inputType": 1,
        "description": "The callback function that is triggered when the state changes.",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<boolean>`",
        "default": ""
      },
      {
        "name": "formControlName",
        "inputType": 0,
        "type": "string",
        "typeRaw": "`string`"
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Checkbox",
    "description": "Checkbox.",
    "whenToUse": "- Used for selecting multiple values from several options.\n- If you use only one checkbox, it is the same as using Switch to toggle between two states. The difference is that Switch will trigger the state change directly, but Checkbox just marks the state as changed and this needs to be submitted.",
    "doc": "/components/checkbox/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/checkbox",
    "snippet": "<label __$1>$2</label>"
  },
  {
    "_idx": 128,
    "type": "component",
    "selector": "nz-checkbox-group",
    "types": {},
    "properties": [
      {
        "name": "ngModel",
        "inputType": 2,
        "description": "Specifies options, double binding",
        "type": "Array",
        "typeRaw": "`Array<{ label: string; value: string; checked?: boolean; }>`",
        "default": "`[]`",
        "pureDefault": "[]"
      },
      {
        "name": "nzDisabled",
        "inputType": 0,
        "description": "Disable all checkboxes",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "forceInputType": 0
      },
      {
        "name": "ngModelChange",
        "inputType": 1,
        "description": "The callback function that is triggered when the state changes.",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<Array<{ label: string; value: string; checked?: boolean; }>>`",
        "default": ""
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Checkbox",
    "description": "Checkbox.",
    "whenToUse": "- Used for selecting multiple values from several options.\n- If you use only one checkbox, it is the same as using Switch to toggle between two states. The difference is that Switch will trigger the state change directly, but Checkbox just marks the state as changed and this needs to be submitted.",
    "doc": "/components/checkbox/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/checkbox"
  },
  {
    "_idx": 193,
    "type": "component",
    "selector": "nz-checkbox-wrapper",
    "types": {},
    "properties": [
      {
        "name": "nzOnChange",
        "inputType": 1,
        "description": "The callback function that is triggered when the state changes.",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<string[]>`",
        "default": ""
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Checkbox",
    "description": "Checkbox.",
    "whenToUse": "- Used for selecting multiple values from several options.\n- If you use only one checkbox, it is the same as using Switch to toggle between two states. The difference is that Switch will trigger the state change directly, but Checkbox just marks the state as changed and this needs to be submitted.",
    "doc": "/components/checkbox/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/checkbox"
  },
  {
    "_idx": 21,
    "type": "component",
    "selector": "nz-collapse",
    "types": {},
    "properties": [
      {
        "name": "nzAccordion",
        "inputType": 0,
        "description": "Accordion mode",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzBordered",
        "inputType": 0,
        "description": "Set border style",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Collapse",
    "description": "A content area which can be collapsed and expanded.",
    "whenToUse": "- Can be used to group or hide complex regions to keep the page clean.\n- `Accordion` is a special kind of `Collapse`, which allows only one panel to be expanded at a time.",
    "doc": "/components/collapse/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/collapse"
  },
  {
    "_idx": 72,
    "type": "component",
    "selector": "nz-collapse-panel",
    "types": {},
    "properties": [
      {
        "name": "nzDisabled",
        "inputType": 0,
        "description": "If `true`, panel cannot be opened or closed",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "forceInputType": 0
      },
      {
        "name": "nzHeader",
        "inputType": 0,
        "description": "Title of the panel",
        "type": "string",
        "typeRaw": "`string｜TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzShowArrow",
        "inputType": 0,
        "description": "Display arrow or not",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "nzActive",
        "inputType": 2,
        "description": "Active status of panel, double binding",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": ""
      },
      {
        "name": "nzActiveChange",
        "inputType": 1,
        "description": "Callback function of the active status",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<boolean>`",
        "default": ""
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Collapse",
    "description": "A content area which can be collapsed and expanded.",
    "whenToUse": "- Can be used to group or hide complex regions to keep the page clean.\n- `Accordion` is a special kind of `Collapse`, which allows only one panel to be expanded at a time.",
    "doc": "/components/collapse/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/collapse"
  },
  {
    "_idx": 255,
    "type": "component",
    "selector": "nz-date-picker",
    "types": {},
    "properties": [
      {
        "name": "nzAllowClear",
        "inputType": 0,
        "description": "Whether to show clear button",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true",
        "_common": true
      },
      {
        "name": "nzAutoFocus",
        "inputType": 0,
        "description": "get focus when component mounted",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "_common": true
      },
      {
        "name": "nzClassName",
        "inputType": 0,
        "description": "picker className",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`''`",
        "pureDefault": "",
        "_common": true
      },
      {
        "name": "nzDateRender",
        "inputType": 0,
        "description": "custom rendering function for date cells (Not support by month-picker/year-picker)",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef<Date>｜string｜((d: Date) => TemplateRef<Date>｜string)`",
        "default": "",
        "_common": true
      },
      {
        "name": "nzDisabled",
        "inputType": 0,
        "description": "determine whether the nz-date-picker is disabled",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "_common": true,
        "forceInputType": 0
      },
      {
        "name": "nzDisabledDate",
        "inputType": 0,
        "description": "specify the date that cannot be selected (Not support by year-picker)",
        "type": "function",
        "typeRaw": "`(current: Date) => boolean`",
        "default": "",
        "_common": true
      },
      {
        "name": "nzLocale",
        "inputType": 0,
        "description": "localization configuration",
        "type": "object",
        "typeRaw": "`object`",
        "default": "[default](https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json)",
        "pureDefault": "[default](https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json)",
        "_common": true
      },
      {
        "name": "nzOpen",
        "inputType": 0,
        "description": "open state of picker",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "",
        "_common": true
      },
      {
        "name": "nzPopupStyle",
        "inputType": 0,
        "description": "to customize the style of the popup calendar",
        "type": "object",
        "typeRaw": "`object`",
        "default": "`{}`",
        "pureDefault": "{}",
        "_common": true
      },
      {
        "name": "nzDropdownClassName",
        "inputType": 0,
        "description": "to customize the className of the popup calendar",
        "type": "string",
        "typeRaw": "`string`",
        "default": "",
        "_common": true
      },
      {
        "name": "nzSize",
        "inputType": 0,
        "description": "determine the size of the input box, the height of `large` and `small`, are 40px and 24px respectively, while default size is 32px",
        "type": "Enum",
        "typeRaw": "`'large'｜'small'`",
        "default": "",
        "typeDefinition": [
          "large",
          "small"
        ],
        "_common": true
      },
      {
        "name": "nzStyle",
        "inputType": 0,
        "description": "to customize the style of the input box",
        "type": "object",
        "typeRaw": "`object`",
        "default": "`{}`",
        "pureDefault": "{}",
        "_common": true
      },
      {
        "name": "nzOnOpenChange",
        "inputType": 1,
        "description": "a callback emitter, can be executed whether the popup calendar is popped up or closed",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<boolean>`",
        "default": "",
        "_common": true
      },
      {
        "name": "ngModel",
        "inputType": 2,
        "description": "Date",
        "type": "object",
        "typeRaw": "`Date`",
        "default": ""
      },
      {
        "name": "nzDisabledTime",
        "inputType": 0,
        "description": "to specify the time that cannot be selected",
        "type": "function",
        "typeRaw": "`(current: Date) => { nzDisabledHours, nzDisabledMinutes, nzDisabledSeconds }`",
        "default": ""
      },
      {
        "name": "nzFormat",
        "inputType": 0,
        "description": "to set the date format, refer to [DatePipe](https://angular.io/api/common/DatePipe)",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`\"yyyy-MM-dd\"`",
        "pureDefault": "yyyy-MM-dd"
      },
      {
        "name": "nzRenderExtraFooter",
        "inputType": 0,
        "description": "render extra footer in panel",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef｜string｜(() => TemplateRef｜string)`",
        "default": ""
      },
      {
        "name": "nzShowTime",
        "inputType": 0,
        "description": "to provide an additional time selection",
        "type": "object",
        "typeRaw": "`object｜boolean`",
        "default": "[TimePicker Options](/components/time-picker/en#api)",
        "pureDefault": "[TimePicker Options](/components/time-picker/en#api)"
      },
      {
        "name": "nzShowToday",
        "inputType": 0,
        "description": "whether to show \"Today\" button",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "nzPlaceHolder",
        "inputType": 0,
        "description": "placeholder of date input",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "nzOnOk",
        "inputType": 1,
        "description": "callback when click ok button",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<Date>`",
        "default": ""
      },
      {
        "name": "ngModelChange",
        "inputType": 1,
        "description": "Date change callback",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<Date>`",
        "default": ""
      },
      {
        "name": "formControlName",
        "inputType": 0,
        "type": "string",
        "typeRaw": "`string`"
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "DatePicker",
    "description": "To select or input a date.",
    "whenToUse": "By clicking the input box, you can select a date from a popup calendar.",
    "doc": "/components/date-picker/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/date-picker"
  },
  {
    "_idx": 404,
    "type": "component",
    "selector": "nz-year-picker",
    "types": {},
    "properties": [
      {
        "name": "nzAllowClear",
        "inputType": 0,
        "description": "Whether to show clear button",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true",
        "_common": true
      },
      {
        "name": "nzAutoFocus",
        "inputType": 0,
        "description": "get focus when component mounted",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "_common": true
      },
      {
        "name": "nzClassName",
        "inputType": 0,
        "description": "picker className",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`''`",
        "pureDefault": "",
        "_common": true
      },
      {
        "name": "nzDateRender",
        "inputType": 0,
        "description": "custom rendering function for date cells (Not support by month-picker/year-picker)",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef<Date>｜string｜((d: Date) => TemplateRef<Date>｜string)`",
        "default": "",
        "_common": true
      },
      {
        "name": "nzDisabled",
        "inputType": 0,
        "description": "determine whether the nz-date-picker is disabled",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "_common": true,
        "forceInputType": 0
      },
      {
        "name": "nzDisabledDate",
        "inputType": 0,
        "description": "specify the date that cannot be selected (Not support by year-picker)",
        "type": "function",
        "typeRaw": "`(current: Date) => boolean`",
        "default": "",
        "_common": true
      },
      {
        "name": "nzLocale",
        "inputType": 0,
        "description": "localization configuration",
        "type": "object",
        "typeRaw": "`object`",
        "default": "[default](https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json)",
        "pureDefault": "[default](https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json)",
        "_common": true
      },
      {
        "name": "nzOpen",
        "inputType": 0,
        "description": "open state of picker",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "",
        "_common": true
      },
      {
        "name": "nzPopupStyle",
        "inputType": 0,
        "description": "to customize the style of the popup calendar",
        "type": "object",
        "typeRaw": "`object`",
        "default": "`{}`",
        "pureDefault": "{}",
        "_common": true
      },
      {
        "name": "nzDropdownClassName",
        "inputType": 0,
        "description": "to customize the className of the popup calendar",
        "type": "string",
        "typeRaw": "`string`",
        "default": "",
        "_common": true
      },
      {
        "name": "nzSize",
        "inputType": 0,
        "description": "determine the size of the input box, the height of `large` and `small`, are 40px and 24px respectively, while default size is 32px",
        "type": "Enum",
        "typeRaw": "`'large'｜'small'`",
        "default": "",
        "typeDefinition": [
          "large",
          "small"
        ],
        "_common": true
      },
      {
        "name": "nzStyle",
        "inputType": 0,
        "description": "to customize the style of the input box",
        "type": "object",
        "typeRaw": "`object`",
        "default": "`{}`",
        "pureDefault": "{}",
        "_common": true
      },
      {
        "name": "nzOnOpenChange",
        "inputType": 1,
        "description": "a callback emitter, can be executed whether the popup calendar is popped up or closed",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<boolean>`",
        "default": "",
        "_common": true
      },
      {
        "name": "ngModel",
        "inputType": 2,
        "description": "Date",
        "type": "object",
        "typeRaw": "`Date`",
        "default": ""
      },
      {
        "name": "nzFormat",
        "inputType": 0,
        "description": "to set the date format, refer to [DatePipe](https://angular.io/api/common/DatePipe)",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`\"yyyy\"`",
        "pureDefault": "yyyy"
      },
      {
        "name": "nzRenderExtraFooter",
        "inputType": 0,
        "description": "render extra footer in panel",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef｜string｜(() => TemplateRef｜string)`",
        "default": ""
      },
      {
        "name": "nzPlaceHolder",
        "inputType": 0,
        "description": "placeholder of date input",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "ngModelChange",
        "inputType": 1,
        "description": "Date change callback",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<Date>`",
        "default": ""
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "DatePicker",
    "description": "To select or input a date.",
    "whenToUse": "By clicking the input box, you can select a date from a popup calendar.",
    "doc": "/components/date-picker/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/date-picker"
  },
  {
    "_idx": 497,
    "type": "component",
    "selector": "nz-month-picker",
    "types": {},
    "properties": [
      {
        "name": "nzAllowClear",
        "inputType": 0,
        "description": "Whether to show clear button",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true",
        "_common": true
      },
      {
        "name": "nzAutoFocus",
        "inputType": 0,
        "description": "get focus when component mounted",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "_common": true
      },
      {
        "name": "nzClassName",
        "inputType": 0,
        "description": "picker className",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`''`",
        "pureDefault": "",
        "_common": true
      },
      {
        "name": "nzDateRender",
        "inputType": 0,
        "description": "custom rendering function for date cells (Not support by month-picker/year-picker)",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef<Date>｜string｜((d: Date) => TemplateRef<Date>｜string)`",
        "default": "",
        "_common": true
      },
      {
        "name": "nzDisabled",
        "inputType": 0,
        "description": "determine whether the nz-date-picker is disabled",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "_common": true,
        "forceInputType": 0
      },
      {
        "name": "nzDisabledDate",
        "inputType": 0,
        "description": "specify the date that cannot be selected (Not support by year-picker)",
        "type": "function",
        "typeRaw": "`(current: Date) => boolean`",
        "default": "",
        "_common": true
      },
      {
        "name": "nzLocale",
        "inputType": 0,
        "description": "localization configuration",
        "type": "object",
        "typeRaw": "`object`",
        "default": "[default](https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json)",
        "pureDefault": "[default](https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json)",
        "_common": true
      },
      {
        "name": "nzOpen",
        "inputType": 0,
        "description": "open state of picker",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "",
        "_common": true
      },
      {
        "name": "nzPopupStyle",
        "inputType": 0,
        "description": "to customize the style of the popup calendar",
        "type": "object",
        "typeRaw": "`object`",
        "default": "`{}`",
        "pureDefault": "{}",
        "_common": true
      },
      {
        "name": "nzDropdownClassName",
        "inputType": 0,
        "description": "to customize the className of the popup calendar",
        "type": "string",
        "typeRaw": "`string`",
        "default": "",
        "_common": true
      },
      {
        "name": "nzSize",
        "inputType": 0,
        "description": "determine the size of the input box, the height of `large` and `small`, are 40px and 24px respectively, while default size is 32px",
        "type": "Enum",
        "typeRaw": "`'large'｜'small'`",
        "default": "",
        "typeDefinition": [
          "large",
          "small"
        ],
        "_common": true
      },
      {
        "name": "nzStyle",
        "inputType": 0,
        "description": "to customize the style of the input box",
        "type": "object",
        "typeRaw": "`object`",
        "default": "`{}`",
        "pureDefault": "{}",
        "_common": true
      },
      {
        "name": "nzOnOpenChange",
        "inputType": 1,
        "description": "a callback emitter, can be executed whether the popup calendar is popped up or closed",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<boolean>`",
        "default": "",
        "_common": true
      },
      {
        "name": "ngModel",
        "inputType": 2,
        "description": "Date",
        "type": "object",
        "typeRaw": "`Date`",
        "default": ""
      },
      {
        "name": "nzFormat",
        "inputType": 0,
        "description": "to set the date format, refer to [DatePipe](https://angular.io/api/common/DatePipe)",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`\"yyyy-MM\"`",
        "pureDefault": "yyyy-MM"
      },
      {
        "name": "nzRenderExtraFooter",
        "inputType": 0,
        "description": "render extra footer in panel",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef｜string｜(() => TemplateRef｜string)`",
        "default": ""
      },
      {
        "name": "nzPlaceHolder",
        "inputType": 0,
        "description": "placeholder of date input",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "ngModelChange",
        "inputType": 1,
        "description": "Date change callback",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<Date>`",
        "default": ""
      },
      {
        "name": "formControlName",
        "inputType": 0,
        "type": "string",
        "typeRaw": "`string`"
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "DatePicker",
    "description": "To select or input a date.",
    "whenToUse": "By clicking the input box, you can select a date from a popup calendar.",
    "doc": "/components/date-picker/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/date-picker"
  },
  {
    "_idx": 590,
    "type": "component",
    "selector": "nz-week-picker",
    "types": {},
    "properties": [
      {
        "name": "nzAllowClear",
        "inputType": 0,
        "description": "Whether to show clear button",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true",
        "_common": true
      },
      {
        "name": "nzAutoFocus",
        "inputType": 0,
        "description": "get focus when component mounted",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "_common": true
      },
      {
        "name": "nzClassName",
        "inputType": 0,
        "description": "picker className",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`''`",
        "pureDefault": "",
        "_common": true
      },
      {
        "name": "nzDateRender",
        "inputType": 0,
        "description": "custom rendering function for date cells (Not support by month-picker/year-picker)",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef<Date>｜string｜((d: Date) => TemplateRef<Date>｜string)`",
        "default": "",
        "_common": true
      },
      {
        "name": "nzDisabled",
        "inputType": 0,
        "description": "determine whether the nz-date-picker is disabled",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "_common": true,
        "forceInputType": 0
      },
      {
        "name": "nzDisabledDate",
        "inputType": 0,
        "description": "specify the date that cannot be selected (Not support by year-picker)",
        "type": "function",
        "typeRaw": "`(current: Date) => boolean`",
        "default": "",
        "_common": true
      },
      {
        "name": "nzLocale",
        "inputType": 0,
        "description": "localization configuration",
        "type": "object",
        "typeRaw": "`object`",
        "default": "[default](https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json)",
        "pureDefault": "[default](https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json)",
        "_common": true
      },
      {
        "name": "nzOpen",
        "inputType": 0,
        "description": "open state of picker",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "",
        "_common": true
      },
      {
        "name": "nzPopupStyle",
        "inputType": 0,
        "description": "to customize the style of the popup calendar",
        "type": "object",
        "typeRaw": "`object`",
        "default": "`{}`",
        "pureDefault": "{}",
        "_common": true
      },
      {
        "name": "nzDropdownClassName",
        "inputType": 0,
        "description": "to customize the className of the popup calendar",
        "type": "string",
        "typeRaw": "`string`",
        "default": "",
        "_common": true
      },
      {
        "name": "nzSize",
        "inputType": 0,
        "description": "determine the size of the input box, the height of `large` and `small`, are 40px and 24px respectively, while default size is 32px",
        "type": "Enum",
        "typeRaw": "`'large'｜'small'`",
        "default": "",
        "typeDefinition": [
          "large",
          "small"
        ],
        "_common": true
      },
      {
        "name": "nzStyle",
        "inputType": 0,
        "description": "to customize the style of the input box",
        "type": "object",
        "typeRaw": "`object`",
        "default": "`{}`",
        "pureDefault": "{}",
        "_common": true
      },
      {
        "name": "nzOnOpenChange",
        "inputType": 1,
        "description": "a callback emitter, can be executed whether the popup calendar is popped up or closed",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<boolean>`",
        "default": "",
        "_common": true
      },
      {
        "name": "ngModel",
        "inputType": 2,
        "description": "Date",
        "type": "object",
        "typeRaw": "`Date`",
        "default": ""
      },
      {
        "name": "nzFormat",
        "inputType": 0,
        "description": "to set the date format, refer to [DatePipe](https://angular.io/api/common/DatePipe)",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`\"yyyy-ww\"`",
        "pureDefault": "yyyy-ww"
      },
      {
        "name": "nzPlaceHolder",
        "inputType": 0,
        "description": "placeholder of date input",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "ngModelChange",
        "inputType": 1,
        "description": "Date change callback",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<Date>`",
        "default": ""
      },
      {
        "name": "formControlName",
        "inputType": 0,
        "type": "string",
        "typeRaw": "`string`"
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "DatePicker",
    "description": "To select or input a date.",
    "whenToUse": "By clicking the input box, you can select a date from a popup calendar.",
    "doc": "/components/date-picker/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/date-picker"
  },
  {
    "_idx": 669,
    "type": "component",
    "selector": "nz-range-picker",
    "types": {},
    "properties": [
      {
        "name": "nzAllowClear",
        "inputType": 0,
        "description": "Whether to show clear button",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true",
        "_common": true
      },
      {
        "name": "nzAutoFocus",
        "inputType": 0,
        "description": "get focus when component mounted",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "_common": true
      },
      {
        "name": "nzClassName",
        "inputType": 0,
        "description": "picker className",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`''`",
        "pureDefault": "",
        "_common": true
      },
      {
        "name": "nzDateRender",
        "inputType": 0,
        "description": "custom rendering function for date cells (Not support by month-picker/year-picker)",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef<Date>｜string｜((d: Date) => TemplateRef<Date>｜string)`",
        "default": "",
        "_common": true
      },
      {
        "name": "nzDisabled",
        "inputType": 0,
        "description": "determine whether the nz-date-picker is disabled",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "_common": true,
        "forceInputType": 0
      },
      {
        "name": "nzDisabledDate",
        "inputType": 0,
        "description": "specify the date that cannot be selected (Not support by year-picker)",
        "type": "function",
        "typeRaw": "`(current: Date) => boolean`",
        "default": "",
        "_common": true
      },
      {
        "name": "nzLocale",
        "inputType": 0,
        "description": "localization configuration",
        "type": "object",
        "typeRaw": "`object`",
        "default": "[default](https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json)",
        "pureDefault": "[default](https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json)",
        "_common": true
      },
      {
        "name": "nzOpen",
        "inputType": 0,
        "description": "open state of picker",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "",
        "_common": true
      },
      {
        "name": "nzPopupStyle",
        "inputType": 0,
        "description": "to customize the style of the popup calendar",
        "type": "object",
        "typeRaw": "`object`",
        "default": "`{}`",
        "pureDefault": "{}",
        "_common": true
      },
      {
        "name": "nzDropdownClassName",
        "inputType": 0,
        "description": "to customize the className of the popup calendar",
        "type": "string",
        "typeRaw": "`string`",
        "default": "",
        "_common": true
      },
      {
        "name": "nzSize",
        "inputType": 0,
        "description": "determine the size of the input box, the height of `large` and `small`, are 40px and 24px respectively, while default size is 32px",
        "type": "Enum",
        "typeRaw": "`'large'｜'small'`",
        "default": "",
        "typeDefinition": [
          "large",
          "small"
        ],
        "_common": true
      },
      {
        "name": "nzStyle",
        "inputType": 0,
        "description": "to customize the style of the input box",
        "type": "object",
        "typeRaw": "`object`",
        "default": "`{}`",
        "pureDefault": "{}",
        "_common": true
      },
      {
        "name": "nzOnOpenChange",
        "inputType": 1,
        "description": "a callback emitter, can be executed whether the popup calendar is popped up or closed",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<boolean>`",
        "default": "",
        "_common": true
      },
      {
        "name": "ngModel",
        "inputType": 2,
        "description": "Date",
        "type": "Array",
        "typeRaw": "`Date[]`",
        "default": ""
      },
      {
        "name": "nzDisabledTime",
        "inputType": 0,
        "description": "to specify the time that cannot be selected",
        "type": "function",
        "typeRaw": "`(current: Date, partial: 'start'｜'end') => { nzDisabledHours, nzDisabledMinutes, nzDisabledSeconds }`",
        "default": ""
      },
      {
        "name": "nzFormat",
        "inputType": 0,
        "description": "to set the date format",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`\"yyyy-MM-dd\"`",
        "pureDefault": "yyyy-MM-dd"
      },
      {
        "name": "nzRanges",
        "inputType": 0,
        "description": "preseted ranges for quick selection",
        "type": "object",
        "typeRaw": "`{ [ key: string ]: Date[] }`",
        "default": ""
      },
      {
        "name": "nzRenderExtraFooter",
        "inputType": 0,
        "description": "render extra footer in panel",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef｜string｜(() => TemplateRef｜string)`",
        "default": ""
      },
      {
        "name": "nzShowTime",
        "inputType": 0,
        "description": "to provide an additional time selection",
        "type": "object",
        "typeRaw": "`object｜boolean`",
        "default": "[TimePicker Options](/components/time-picker/en#api)",
        "pureDefault": "[TimePicker Options](/components/time-picker/en#api)"
      },
      {
        "name": "nzPlaceHolder",
        "inputType": 0,
        "description": "placeholder of date input",
        "type": "Array",
        "typeRaw": "`string[]`",
        "default": ""
      },
      {
        "name": "nzOnOk",
        "inputType": 1,
        "description": "click ok callback",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<Date[]>`",
        "default": ""
      },
      {
        "name": "ngModelChange",
        "inputType": 1,
        "description": "Date change callback",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<Date[]>`",
        "default": ""
      },
      {
        "name": "formControlName",
        "inputType": 0,
        "type": "string",
        "typeRaw": "`string`"
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "DatePicker",
    "description": "To select or input a date.",
    "whenToUse": "By clicking the input box, you can select a date from a popup calendar.",
    "doc": "/components/date-picker/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/date-picker"
  },
  {
    "_idx": 24,
    "type": "component",
    "selector": "nz-divider",
    "types": {},
    "properties": [
      {
        "name": "nzDashed",
        "inputType": 0,
        "description": "whether line is dasded",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzType",
        "inputType": 0,
        "description": "direction type of divider",
        "type": "Enum",
        "typeRaw": "`'horizontal'｜'vertical'`",
        "default": "`'horizontal'`",
        "typeDefinition": [
          "horizontal",
          "vertical"
        ],
        "pureDefault": "horizontal"
      },
      {
        "name": "nzText",
        "inputType": 0,
        "description": "inner text of divider",
        "type": "string",
        "typeRaw": "`string｜TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzOrientation",
        "inputType": 0,
        "description": "inner text orientation",
        "type": "Enum",
        "typeRaw": "`'left'｜'right'`",
        "default": "",
        "typeDefinition": [
          "left",
          "right"
        ]
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Divider",
    "description": "A divider line separates different content.",
    "whenToUse": "- Divide sections of article.\n- Divide inline text and links such as the operation column of table.",
    "doc": "/components/divider/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/divider"
  },
  {
    "_idx": 26,
    "type": "component",
    "selector": "nz-drawer",
    "types": {},
    "properties": [
      {
        "name": "nzClosable",
        "inputType": 0,
        "description": "Whether a close (x) button is visible on top right of the Drawer dialog or not.",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "nzMask",
        "inputType": 0,
        "description": "Whether to show mask or not.",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "nzMaskClosable",
        "inputType": 0,
        "description": "Clicking on the mask (area outside the Drawer) to close the Drawer or not.",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "nzMaskStyle",
        "inputType": 0,
        "description": "Style for Drawer's mask element.",
        "type": "object",
        "typeRaw": "`object`",
        "default": "`{}`",
        "pureDefault": "{}"
      },
      {
        "name": "nzBodyStyle",
        "inputType": 0,
        "description": "Body style for drawer body element. Such as height, padding etc.",
        "type": "object",
        "typeRaw": "`object`",
        "default": "`{}`",
        "pureDefault": "{}"
      },
      {
        "name": "nzTitle",
        "inputType": 0,
        "description": "The title for Drawer.",
        "type": "string",
        "typeRaw": "`string｜TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzVisible",
        "inputType": 0,
        "description": "Whether the Drawer dialog is visible or not.",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzPlacement",
        "inputType": 0,
        "description": "The placement of the Drawer.",
        "type": "Enum",
        "typeRaw": "`'top'｜'right'｜'bottom'｜'left'`",
        "default": "`'right'`",
        "typeDefinition": [
          "top",
          "right",
          "bottom",
          "left"
        ],
        "pureDefault": "right"
      },
      {
        "name": "nzWidth",
        "inputType": 0,
        "description": "Width of the Drawer dialog, only when placement is `'right'` or `'left'`.",
        "type": "number",
        "typeRaw": "`number｜string`",
        "default": "`256`",
        "pureDefault": "256"
      },
      {
        "name": "nzHeight",
        "inputType": 0,
        "description": "Height of the Drawer dialog, only when placement is `'top'` or `'bottom'`.",
        "type": "number",
        "typeRaw": "`number｜string`",
        "default": "`256`",
        "pureDefault": "256"
      },
      {
        "name": "nzOffsetX",
        "inputType": 0,
        "description": "The the X coordinate offset(px), only when placement is `'right'` or `'left'`.",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`0`",
        "pureDefault": "0"
      },
      {
        "name": "nzOffsetY",
        "inputType": 0,
        "description": "The the Y coordinate offset(px), only when placement is `'top'` or `'bottom'`.",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`0`",
        "pureDefault": "0"
      },
      {
        "name": "nzWrapClassName",
        "inputType": 0,
        "description": "The class name of the container of the Drawer dialog.",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "nzZIndex",
        "inputType": 0,
        "description": "The `z-index` of the Drawer.",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`1000`",
        "pureDefault": "1000"
      },
      {
        "name": "nzOnClose",
        "inputType": 1,
        "description": "Specify a callback that will be called when a user clicks mask, close button or Cancel button.",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<MouseEvent>`",
        "default": ""
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Drawer",
    "description": "A Drawer is a panel that is typically overlaid on top of a page and slides in from the side. It contains a set of information or actions. Since that user can interact with the Drawer without leaving the current page, tasks can be achieved more efficient within the same context.",
    "whenToUse": "- Use a Form to create or edit a set of information.\n- Processing subtasks. When subtasks are too heavy for Popover and we still want to keep the subtasks in the context of the main task, Drawer comes very handy.\n- When a same Form is needed in multiple places.",
    "doc": "/components/drawer/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/drawer"
  },
  {
    "_idx": 12,
    "type": "component",
    "selector": "nz-dropdown",
    "types": {},
    "properties": [
      {
        "name": "nzDisabled",
        "inputType": 0,
        "description": "whether the dropdown menu is disabled",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "",
        "forceInputType": 0
      },
      {
        "name": "nzPlacement",
        "inputType": 0,
        "description": "placement of pop menu",
        "type": "Enum",
        "typeRaw": "`'bottomLeft'｜'bottomCenter'｜'bottomRight'｜'topLeft'｜'topCenter'｜'topRight'`",
        "default": "`'bottomLeft'`",
        "typeDefinition": [
          "bottomLeft",
          "bottomCenter",
          "bottomRight",
          "topLeft",
          "topCenter",
          "topRight"
        ],
        "pureDefault": "bottomLeft"
      },
      {
        "name": "nzTrigger",
        "inputType": 0,
        "description": "the trigger mode which executes the drop-down action",
        "type": "Enum",
        "typeRaw": "`'click'｜'hover'`",
        "default": "`'hover'`",
        "typeDefinition": [
          "click",
          "hover"
        ],
        "pureDefault": "hover"
      },
      {
        "name": "nzClickHide",
        "inputType": 0,
        "description": "whether hide menu when click",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "nzVisible",
        "inputType": 2,
        "description": "whether the dropdown menu is visible, double binding",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": ""
      },
      {
        "name": "nzOverlayClassName",
        "inputType": 0,
        "description": "Class name of the dropdown root element",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "nzOverlayStyle",
        "inputType": 0,
        "description": "Style of the dropdown root element",
        "type": "object",
        "typeRaw": "`object`",
        "default": "",
        "forceInputType": 0
      },
      {
        "name": "nzVisibleChange",
        "inputType": 1,
        "description": "a callback function takes an argument: `nzVisible`, is executed when the visible state is changed",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<boolean>`",
        "default": ""
      }
    ],
    "description": "You should add  `[nz-dropdown]` to the element that trigger dropdown",
    "lib": "ng-zorro-antd",
    "title": "Dropdown",
    "whenToUse": "If there are too many operations to display, you can wrap them in a `Dropdown`. By clicking/hovering on the trigger, a dropdown menu should appear, which allows you to choose one option and execute relevant actions.",
    "doc": "/components/dropdown/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/dropdown"
  },
  {
    "_idx": 160,
    "type": "directive",
    "selector": "nz-dropdown",
    "types": {},
    "properties": [
      {
        "name": "nzDisabled",
        "inputType": 0,
        "description": "whether the dropdown menu is disabled",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "",
        "forceInputType": 0
      },
      {
        "name": "nzPlacement",
        "inputType": 0,
        "description": "placement of pop menu",
        "type": "Enum",
        "typeRaw": "`'bottomLeft'｜'bottomCenter'｜'bottomRight'｜'topLeft'｜'topCenter'｜'topRight'`",
        "default": "`'bottomLeft'`",
        "typeDefinition": [
          "bottomLeft",
          "bottomCenter",
          "bottomRight",
          "topLeft",
          "topCenter",
          "topRight"
        ],
        "pureDefault": "bottomLeft"
      },
      {
        "name": "nzSize",
        "inputType": 0,
        "description": "size of the button, the same as [nz-buutton](/components/button/en)",
        "type": "Enum",
        "typeRaw": "`'large'｜'small'｜'default'`",
        "default": "`'default'`",
        "typeDefinition": [
          "large",
          "small",
          "default"
        ],
        "pureDefault": "default"
      },
      {
        "name": "nzType",
        "inputType": 0,
        "description": "type of the button, the same as [nz-button](/components/button/en)",
        "type": "Enum",
        "typeRaw": "`'primary'｜'ghost'｜'dashed'｜'danger'｜'default'`",
        "default": "`'default'`",
        "typeDefinition": [
          "primary",
          "ghost",
          "dashed",
          "danger",
          "default"
        ],
        "pureDefault": "default"
      },
      {
        "name": "nzTrigger",
        "inputType": 0,
        "description": "the trigger mode which executes the drop-down action",
        "type": "Enum",
        "typeRaw": "`'click'｜'hover'`",
        "default": "`'hover'`",
        "typeDefinition": [
          "click",
          "hover"
        ],
        "pureDefault": "hover"
      },
      {
        "name": "nzClickHide",
        "inputType": 0,
        "description": "whether hide menu when click",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "nzVisible",
        "inputType": 0,
        "description": "whether the dropdown menu is visible",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": ""
      },
      {
        "name": "nzVisibleChange",
        "inputType": 1,
        "description": "a callback function takes an argument: `nzVisible`, is executed when the visible state is changed",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<boolean>`",
        "default": ""
      },
      {
        "name": "nzClick",
        "inputType": 1,
        "description": "a callback function which will be executed when you click the button on the left",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<MouseEvent>`",
        "default": ""
      }
    ],
    "description": "mark the element that trigger dropdown",
    "lib": "ng-zorro-antd",
    "title": "Dropdown",
    "whenToUse": "If there are too many operations to display, you can wrap them in a `Dropdown`. By clicking/hovering on the trigger, a dropdown menu should appear, which allows you to choose one option and execute relevant actions.",
    "doc": "/components/dropdown/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/dropdown"
  },
  {
    "_idx": 166,
    "type": "component",
    "selector": "nz-dropdown-button",
    "types": {},
    "properties": [
      {
        "name": "nzDisabled",
        "inputType": 0,
        "description": "whether the dropdown menu is disabled",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "",
        "forceInputType": 0
      },
      {
        "name": "nzPlacement",
        "inputType": 0,
        "description": "placement of pop menu",
        "type": "Enum",
        "typeRaw": "`'bottomLeft'｜'bottomCenter'｜'bottomRight'｜'topLeft'｜'topCenter'｜'topRight'`",
        "default": "`'bottomLeft'`",
        "typeDefinition": [
          "bottomLeft",
          "bottomCenter",
          "bottomRight",
          "topLeft",
          "topCenter",
          "topRight"
        ],
        "pureDefault": "bottomLeft"
      },
      {
        "name": "nzSize",
        "inputType": 0,
        "description": "size of the button, the same as [nz-buutton](/components/button/en)",
        "type": "Enum",
        "typeRaw": "`'large'｜'small'｜'default'`",
        "default": "`'default'`",
        "typeDefinition": [
          "large",
          "small",
          "default"
        ],
        "pureDefault": "default"
      },
      {
        "name": "nzType",
        "inputType": 0,
        "description": "type of the button, the same as [nz-button](/components/button/en)",
        "type": "Enum",
        "typeRaw": "`'primary'｜'ghost'｜'dashed'｜'danger'｜'default'`",
        "default": "`'default'`",
        "typeDefinition": [
          "primary",
          "ghost",
          "dashed",
          "danger",
          "default"
        ],
        "pureDefault": "default"
      },
      {
        "name": "nzTrigger",
        "inputType": 0,
        "description": "the trigger mode which executes the drop-down action",
        "type": "Enum",
        "typeRaw": "`'click'｜'hover'`",
        "default": "`'hover'`",
        "typeDefinition": [
          "click",
          "hover"
        ],
        "pureDefault": "hover"
      },
      {
        "name": "nzClickHide",
        "inputType": 0,
        "description": "whether hide menu when click",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "nzVisible",
        "inputType": 0,
        "description": "whether the dropdown menu is visible",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": ""
      },
      {
        "name": "nzVisibleChange",
        "inputType": 1,
        "description": "a callback function takes an argument: `nzVisible`, is executed when the visible state is changed",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<boolean>`",
        "default": ""
      },
      {
        "name": "nzClick",
        "inputType": 1,
        "description": "a callback function which will be executed when you click the button on the left",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<MouseEvent>`",
        "default": ""
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Dropdown",
    "description": "A dropdown list.",
    "whenToUse": "If there are too many operations to display, you can wrap them in a `Dropdown`. By clicking/hovering on the trigger, a dropdown menu should appear, which allows you to choose one option and execute relevant actions.",
    "doc": "/components/dropdown/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/dropdown"
  },
  {
    "_idx": 12,
    "type": "component",
    "selector": "nz-empty",
    "types": {},
    "properties": [
      {
        "name": "nzNotFoundImage",
        "inputType": 0,
        "description": "Customize image. Will tread as image url when string provided",
        "type": "string",
        "typeRaw": "`string` ｜ `TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzNotFoundContent",
        "inputType": 0,
        "description": "Custom description",
        "type": "string",
        "typeRaw": "`string` ｜ `TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzNotFoundFooter",
        "inputType": 0,
        "description": "Custom Footer",
        "type": "string",
        "typeRaw": "`string` ｜ `TemplateRef<void>`",
        "default": ""
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Empty",
    "description": "Empty state placeholder.",
    "whenToUse": "When there is no data provided, display for friendly tips.",
    "doc": "/components/empty/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/empty"
  },
  {
    "_idx": 56,
    "type": "component",
    "selector": "nz-form",
    "types": {},
    "properties": [
      {
        "name": "nzLayout",
        "inputType": 0,
        "description": "Form layout",
        "type": "Enum",
        "typeRaw": "`'horizontal'｜'vertical'｜'inline'`",
        "default": "`'horizontal'`",
        "typeDefinition": [
          "horizontal",
          "vertical",
          "inline"
        ],
        "pureDefault": "horizontal"
      },
      {
        "name": "formGroup",
        "inputType": 0,
        "type": "object",
        "typeRaw": "`object`"
      },
      {
        "name": "ngSubmit",
        "inputType": 1,
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<any>`"
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Form",
    "description": "Form is used to collect, validate, and submit the user input, usually contains various form items including checkbox, radio, input, select, and etc.",
    "whenToUse": "",
    "doc": "/components/form/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/form",
    "snippet": "<form __$1>$0</form>"
  },
  {
    "_idx": 93,
    "type": "component",
    "selector": "nz-form-item",
    "types": {},
    "properties": [
      {
        "name": "nzAlign",
        "inputType": 0,
        "description": "the vertical alignment of the flex layout",
        "type": "Enum",
        "typeRaw": "`'top'｜'middle'｜'bottom'`",
        "default": "`'top'`",
        "typeDefinition": [
          "top",
          "middle",
          "bottom"
        ],
        "pureDefault": "top"
      },
      {
        "name": "nzGutter",
        "inputType": 0,
        "description": "spacing between grids, could be a number or a object like `{ xs: 8, sm: 16, md: 24, lg: 32, xl: 32, xxl: 32 }`",
        "type": "Enum",
        "typeRaw": "`number｜object`",
        "default": "`0`",
        "pureDefault": "0",
        "typeDefinition": [
          "0",
          "8",
          "16",
          "24",
          "32",
          "40",
          "48",
          "56",
          "64"
        ]
      },
      {
        "name": "nzJustify",
        "inputType": 0,
        "description": "horizontal arrangement of the flex layout",
        "type": "Enum",
        "typeRaw": "`'start'｜'end'｜'center'｜'space-around'｜'space-between'`",
        "default": "`'start'`",
        "typeDefinition": [
          "start",
          "end",
          "center",
          "space-around",
          "space-between"
        ],
        "pureDefault": "start"
      },
      {
        "name": "nzType",
        "inputType": 0,
        "description": "layout mode, optional `flex`, [browser support](http://caniuse.com/#search=flex)",
        "type": "Enum",
        "typeRaw": "`'flex'`",
        "default": "",
        "typeDefinition": [
          "flex"
        ]
      },
      {
        "name": "nzFlex",
        "inputType": 0,
        "description": "display flex",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      }
    ],
    "description": "Used to separate the item in forms, contains label(optional) and control field.",
    "lib": "ng-zorro-antd",
    "title": "Form",
    "whenToUse": "",
    "doc": "/components/form/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/form"
  },
  {
    "_idx": 138,
    "type": "component",
    "selector": "nz-form-label",
    "types": {},
    "properties": [
      {
        "name": "nzOffset",
        "inputType": 0,
        "description": "the number of cells to offset Col from the left",
        "type": "Enum",
        "typeRaw": "`number`",
        "default": "`0`",
        "pureDefault": "0",
        "typeDefinition": [
          "0",
          "8",
          "16",
          "24",
          "32",
          "40",
          "48",
          "56",
          "64"
        ]
      },
      {
        "name": "nzOrder",
        "inputType": 0,
        "description": "raster order, used in `flex` layout mode",
        "type": "Enum",
        "typeRaw": "`number`",
        "default": "`0`",
        "pureDefault": "0",
        "typeDefinition": [
          "0",
          "8",
          "16",
          "24",
          "32",
          "40",
          "48",
          "56",
          "64"
        ]
      },
      {
        "name": "nzPull",
        "inputType": 0,
        "description": "the number of cells that raster is moved to the left",
        "type": "Enum",
        "typeRaw": "`number`",
        "default": "`0`",
        "pureDefault": "0",
        "typeDefinition": [
          "0",
          "8",
          "16",
          "24",
          "32",
          "40",
          "48",
          "56",
          "64"
        ]
      },
      {
        "name": "nzPush",
        "inputType": 0,
        "description": "the number of cells that raster is moved to the right",
        "type": "Enum",
        "typeRaw": "`number`",
        "default": "`0`",
        "pureDefault": "0",
        "typeDefinition": [
          "0",
          "8",
          "16",
          "24",
          "32",
          "40",
          "48",
          "56",
          "64"
        ]
      },
      {
        "name": "nzSpan",
        "inputType": 0,
        "description": "raster number of cells to occupy, 0 corresponds to `display: none`",
        "type": "Enum",
        "typeRaw": "`number`",
        "default": "",
        "typeDefinition": [
          "0",
          "8",
          "16",
          "24",
          "32",
          "40",
          "48",
          "56",
          "64"
        ]
      },
      {
        "name": "nzXs",
        "inputType": 0,
        "description": "`<576px` and also default setting, could be a `span` value or an object containing above props",
        "type": "Enum",
        "typeRaw": "`number｜object`",
        "default": "",
        "typeDefinition": [
          "0",
          "8",
          "16",
          "24",
          "32",
          "40",
          "48",
          "56",
          "64"
        ]
      },
      {
        "name": "nzSm",
        "inputType": 0,
        "description": "`≥576px`, could be a `span` value or an object containing above props",
        "type": "Enum",
        "typeRaw": "`number｜object`",
        "default": "",
        "typeDefinition": [
          "0",
          "8",
          "16",
          "24",
          "32",
          "40",
          "48",
          "56",
          "64"
        ]
      },
      {
        "name": "nzMd",
        "inputType": 0,
        "description": "`≥768px`, could be a `span` value or an object containing above props",
        "type": "Enum",
        "typeRaw": "`number｜object`",
        "default": "",
        "typeDefinition": [
          "0",
          "8",
          "16",
          "24",
          "32",
          "40",
          "48",
          "56",
          "64"
        ]
      },
      {
        "name": "nzLg",
        "inputType": 0,
        "description": "`≥992px`, could be a `span` value or an object containing above props",
        "type": "Enum",
        "typeRaw": "`number｜object`",
        "default": "",
        "typeDefinition": [
          "0",
          "8",
          "16",
          "24",
          "32",
          "40",
          "48",
          "56",
          "64"
        ]
      },
      {
        "name": "nzXl",
        "inputType": 0,
        "description": "`≥1200px`, could be a `span` value or an object containing above props",
        "type": "Enum",
        "typeRaw": "`number｜object`",
        "default": "",
        "typeDefinition": [
          "0",
          "8",
          "16",
          "24",
          "32",
          "40",
          "48",
          "56",
          "64"
        ]
      },
      {
        "name": "nzXXl",
        "inputType": 0,
        "description": "`≥1600px`, could be a `span` value or an object containing above props",
        "type": "Enum",
        "typeRaw": "`number｜object`",
        "default": "",
        "typeDefinition": [
          "0",
          "8",
          "16",
          "24",
          "32",
          "40",
          "48",
          "56",
          "64"
        ]
      },
      {
        "name": "nzRequired",
        "inputType": 0,
        "description": "add required style to current item",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzFor",
        "inputType": 0,
        "description": "The `for` property of `label`",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      }
    ],
    "description": "The label of the form item, optional.",
    "lib": "ng-zorro-antd",
    "title": "Form",
    "whenToUse": "",
    "doc": "/components/form/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/form"
  },
  {
    "_idx": 197,
    "type": "component",
    "selector": "nz-form-control",
    "types": {},
    "properties": [
      {
        "name": "nzOffset",
        "inputType": 0,
        "description": "the number of cells to offset Col from the left",
        "type": "Enum",
        "typeRaw": "`number`",
        "default": "`0`",
        "pureDefault": "0",
        "typeDefinition": [
          "0",
          "8",
          "16",
          "24",
          "32",
          "40",
          "48",
          "56",
          "64"
        ]
      },
      {
        "name": "nzOrder",
        "inputType": 0,
        "description": "raster order, used in `flex` layout mode",
        "type": "Enum",
        "typeRaw": "`number`",
        "default": "`0`",
        "pureDefault": "0",
        "typeDefinition": [
          "0",
          "8",
          "16",
          "24",
          "32",
          "40",
          "48",
          "56",
          "64"
        ]
      },
      {
        "name": "nzPull",
        "inputType": 0,
        "description": "the number of cells that raster is moved to the left",
        "type": "Enum",
        "typeRaw": "`number`",
        "default": "`0`",
        "pureDefault": "0",
        "typeDefinition": [
          "0",
          "8",
          "16",
          "24",
          "32",
          "40",
          "48",
          "56",
          "64"
        ]
      },
      {
        "name": "nzPush",
        "inputType": 0,
        "description": "the number of cells that raster is moved to the right",
        "type": "Enum",
        "typeRaw": "`number`",
        "default": "`0`",
        "pureDefault": "0",
        "typeDefinition": [
          "0",
          "8",
          "16",
          "24",
          "32",
          "40",
          "48",
          "56",
          "64"
        ]
      },
      {
        "name": "nzSpan",
        "inputType": 0,
        "description": "raster number of cells to occupy, 0 corresponds to `display: none`",
        "type": "Enum",
        "typeRaw": "`number`",
        "default": "",
        "typeDefinition": [
          "0",
          "8",
          "16",
          "24",
          "32",
          "40",
          "48",
          "56",
          "64"
        ]
      },
      {
        "name": "nzXs",
        "inputType": 0,
        "description": "`<576px` and also default setting, could be a `span` value or an object containing above props",
        "type": "Enum",
        "typeRaw": "`number｜object`",
        "default": "",
        "typeDefinition": [
          "0",
          "8",
          "16",
          "24",
          "32",
          "40",
          "48",
          "56",
          "64"
        ]
      },
      {
        "name": "nzSm",
        "inputType": 0,
        "description": "`≥576px`, could be a `span` value or an object containing above props",
        "type": "Enum",
        "typeRaw": "`number｜object`",
        "default": "",
        "typeDefinition": [
          "0",
          "8",
          "16",
          "24",
          "32",
          "40",
          "48",
          "56",
          "64"
        ]
      },
      {
        "name": "nzMd",
        "inputType": 0,
        "description": "`≥768px`, could be a `span` value or an object containing above props",
        "type": "Enum",
        "typeRaw": "`number｜object`",
        "default": "",
        "typeDefinition": [
          "0",
          "8",
          "16",
          "24",
          "32",
          "40",
          "48",
          "56",
          "64"
        ]
      },
      {
        "name": "nzLg",
        "inputType": 0,
        "description": "`≥992px`, could be a `span` value or an object containing above props",
        "type": "Enum",
        "typeRaw": "`number｜object`",
        "default": "",
        "typeDefinition": [
          "0",
          "8",
          "16",
          "24",
          "32",
          "40",
          "48",
          "56",
          "64"
        ]
      },
      {
        "name": "nzXl",
        "inputType": 0,
        "description": "`≥1200px`, could be a `span` value or an object containing above props",
        "type": "Enum",
        "typeRaw": "`number｜object`",
        "default": "",
        "typeDefinition": [
          "0",
          "8",
          "16",
          "24",
          "32",
          "40",
          "48",
          "56",
          "64"
        ]
      },
      {
        "name": "nzXXl",
        "inputType": 0,
        "description": "`≥1600px`, could be a `span` value or an object containing above props",
        "type": "Enum",
        "typeRaw": "`number｜object`",
        "default": "",
        "typeDefinition": [
          "0",
          "8",
          "16",
          "24",
          "32",
          "40",
          "48",
          "56",
          "64"
        ]
      },
      {
        "name": "nzValidateStatus",
        "inputType": 0,
        "description": "Reactive Forms: Will generate status based on FormControl",
        "type": "object",
        "typeRaw": "`FormControl`",
        "default": "first `FormControl` in `nz-form-control`",
        "pureDefault": "first `FormControl` in `nz-form-control`"
      },
      {
        "name": "nzValidateStatus",
        "inputType": 0,
        "description": "Template-driven Forms: The validation status",
        "type": "Enum",
        "typeRaw": "`'success'｜'warning'｜'error'｜'validating'`",
        "default": "",
        "typeDefinition": [
          "success",
          "warning",
          "error",
          "validating"
        ]
      },
      {
        "name": "nzHasFeedback",
        "inputType": 0,
        "description": "Used with `nzValidateStatus`, this option specifies the validation status icon. Recommended to be used only with `Input`.",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      }
    ],
    "description": "Note：Due to the lack of partial Observable in [Angular Form](https://github.com/angular/angular/issues/10887), you have to notify `nz-form-control` to update its status with `updateValueAndValidity` when you update form status using methods like `markAsDirty`.",
    "lib": "ng-zorro-antd",
    "title": "Form",
    "whenToUse": "",
    "doc": "/components/form/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/form"
  },
  {
    "_idx": 275,
    "type": "component",
    "selector": "nz-form-explain",
    "types": {},
    "properties": [],
    "description": "Validation messages",
    "lib": "ng-zorro-antd",
    "title": "Form",
    "whenToUse": "",
    "doc": "/components/form/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/form"
  },
  {
    "_idx": 281,
    "type": "component",
    "selector": "nz-form-extra",
    "types": {},
    "properties": [],
    "description": "The extra prompt message. It is similar to help.",
    "lib": "ng-zorro-antd",
    "title": "Form",
    "whenToUse": "",
    "doc": "/components/form/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/form"
  },
  {
    "_idx": 287,
    "type": "component",
    "selector": "nz-form-split",
    "types": {},
    "properties": [],
    "description": "The split icon of `-`",
    "lib": "ng-zorro-antd",
    "title": "Form",
    "whenToUse": "",
    "doc": "/components/form/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/form"
  },
  {
    "_idx": 293,
    "type": "component",
    "selector": "nz-form-text",
    "types": {},
    "properties": [],
    "description": "Text in `nz-form-control`",
    "lib": "ng-zorro-antd",
    "title": "Form",
    "whenToUse": "",
    "doc": "/components/form/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/form"
  },
  {
    "_idx": 15,
    "type": "component",
    "selector": "nz-affix",
    "types": {},
    "properties": [
      {
        "name": "nzOffsetBottom",
        "inputType": 0,
        "description": "Pixels to offset from bottom when calculating position of scroll",
        "type": "number",
        "typeRaw": "`number`",
        "default": ""
      },
      {
        "name": "nzOffsetTop",
        "inputType": 0,
        "description": "Pixels to offset from top when calculating position of scroll",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`0`",
        "pureDefault": "0"
      },
      {
        "name": "nzTarget",
        "inputType": 0,
        "description": "specifies the scrollable area dom node",
        "type": "string",
        "typeRaw": "`string｜HTMLElement`",
        "default": "`window`",
        "pureDefault": "window"
      },
      {
        "name": "nzChange",
        "inputType": 1,
        "description": "Callback for when affix state is changed",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<boolean>`",
        "default": ""
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Affix",
    "description": "Make an element stick to viewport.",
    "whenToUse": "When user browses a long web page, some content need to stick to the viewport. This is common for menus and actions.",
    "doc": "/components/affix/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/affix"
  },
  {
    "_idx": 20,
    "type": "directive",
    "selector": "nz-icon",
    "types": {},
    "properties": [
      {
        "name": "type",
        "inputType": 0,
        "description": "Type of the ant design icon",
        "type": "string",
        "typeRaw": "`string`",
        "default": "",
        "typeDefinition": {
          "type": "complex",
          "conditionField": "theme",
          "list": [
            {
              "conditionValue": "outline",
              "values": [
                {
                  "value": "account-book",
                  "label": "account-book"
                },
                {
                  "value": "alert",
                  "label": "alert"
                },
                {
                  "value": "alipay-circle",
                  "label": "alipay-circle"
                },
                {
                  "value": "aliwangwang",
                  "label": "aliwangwang"
                },
                {
                  "value": "android",
                  "label": "android"
                },
                {
                  "value": "api",
                  "label": "api"
                },
                {
                  "value": "appstore",
                  "label": "appstore"
                },
                {
                  "value": "apple",
                  "label": "apple"
                },
                {
                  "value": "audio",
                  "label": "audio"
                },
                {
                  "value": "bank",
                  "label": "bank"
                },
                {
                  "value": "bell",
                  "label": "bell"
                },
                {
                  "value": "book",
                  "label": "book"
                },
                {
                  "value": "behance-square",
                  "label": "behance-square"
                },
                {
                  "value": "box-plot",
                  "label": "box-plot"
                },
                {
                  "value": "build",
                  "label": "build"
                },
                {
                  "value": "backward",
                  "label": "backward"
                },
                {
                  "value": "calculator",
                  "label": "calculator"
                },
                {
                  "value": "calendar",
                  "label": "calendar"
                },
                {
                  "value": "camera",
                  "label": "camera"
                },
                {
                  "value": "car",
                  "label": "car"
                },
                {
                  "value": "caret-down",
                  "label": "caret-down"
                },
                {
                  "value": "bulb",
                  "label": "bulb"
                },
                {
                  "value": "caret-right",
                  "label": "caret-right"
                },
                {
                  "value": "caret-up",
                  "label": "caret-up"
                },
                {
                  "value": "caret-left",
                  "label": "caret-left"
                },
                {
                  "value": "carry-out",
                  "label": "carry-out"
                },
                {
                  "value": "check-circle",
                  "label": "check-circle"
                },
                {
                  "value": "chrome",
                  "label": "chrome"
                },
                {
                  "value": "check-square",
                  "label": "check-square"
                },
                {
                  "value": "clock-circle",
                  "label": "clock-circle"
                },
                {
                  "value": "close-circle",
                  "label": "close-circle"
                },
                {
                  "value": "close-square",
                  "label": "close-square"
                },
                {
                  "value": "cloud",
                  "label": "cloud"
                },
                {
                  "value": "code",
                  "label": "code"
                },
                {
                  "value": "codepen-circle",
                  "label": "codepen-circle"
                },
                {
                  "value": "contacts",
                  "label": "contacts"
                },
                {
                  "value": "compass",
                  "label": "compass"
                },
                {
                  "value": "container",
                  "label": "container"
                },
                {
                  "value": "control",
                  "label": "control"
                },
                {
                  "value": "copy",
                  "label": "copy"
                },
                {
                  "value": "credit-card",
                  "label": "credit-card"
                },
                {
                  "value": "crown",
                  "label": "crown"
                },
                {
                  "value": "customer-service",
                  "label": "customer-service"
                },
                {
                  "value": "dashboard",
                  "label": "dashboard"
                },
                {
                  "value": "delete",
                  "label": "delete"
                },
                {
                  "value": "diff",
                  "label": "diff"
                },
                {
                  "value": "database",
                  "label": "database"
                },
                {
                  "value": "dislike",
                  "label": "dislike"
                },
                {
                  "value": "down-circle",
                  "label": "down-circle"
                },
                {
                  "value": "dribbble-square",
                  "label": "dribbble-square"
                },
                {
                  "value": "edit",
                  "label": "edit"
                },
                {
                  "value": "environment",
                  "label": "environment"
                },
                {
                  "value": "exclamation-circle",
                  "label": "exclamation-circle"
                },
                {
                  "value": "experiment",
                  "label": "experiment"
                },
                {
                  "value": "eye-invisible",
                  "label": "eye-invisible"
                },
                {
                  "value": "down-square",
                  "label": "down-square"
                },
                {
                  "value": "facebook",
                  "label": "facebook"
                },
                {
                  "value": "eye",
                  "label": "eye"
                },
                {
                  "value": "fast-backward",
                  "label": "fast-backward"
                },
                {
                  "value": "fast-forward",
                  "label": "fast-forward"
                },
                {
                  "value": "file-add",
                  "label": "file-add"
                },
                {
                  "value": "file-excel",
                  "label": "file-excel"
                },
                {
                  "value": "file-exclamation",
                  "label": "file-exclamation"
                },
                {
                  "value": "file-image",
                  "label": "file-image"
                },
                {
                  "value": "file-markdown",
                  "label": "file-markdown"
                },
                {
                  "value": "file-pdf",
                  "label": "file-pdf"
                },
                {
                  "value": "file-ppt",
                  "label": "file-ppt"
                },
                {
                  "value": "file-text",
                  "label": "file-text"
                },
                {
                  "value": "file-unknown",
                  "label": "file-unknown"
                },
                {
                  "value": "file-word",
                  "label": "file-word"
                },
                {
                  "value": "file-zip",
                  "label": "file-zip"
                },
                {
                  "value": "filter",
                  "label": "filter"
                },
                {
                  "value": "flag",
                  "label": "flag"
                },
                {
                  "value": "file",
                  "label": "file"
                },
                {
                  "value": "folder-add",
                  "label": "folder-add"
                },
                {
                  "value": "folder-open",
                  "label": "folder-open"
                },
                {
                  "value": "folder",
                  "label": "folder"
                },
                {
                  "value": "fire",
                  "label": "fire"
                },
                {
                  "value": "forward",
                  "label": "forward"
                },
                {
                  "value": "frown",
                  "label": "frown"
                },
                {
                  "value": "funnel-plot",
                  "label": "funnel-plot"
                },
                {
                  "value": "gift",
                  "label": "gift"
                },
                {
                  "value": "github",
                  "label": "github"
                },
                {
                  "value": "fund",
                  "label": "fund"
                },
                {
                  "value": "gitlab",
                  "label": "gitlab"
                },
                {
                  "value": "hdd",
                  "label": "hdd"
                },
                {
                  "value": "heart",
                  "label": "heart"
                },
                {
                  "value": "highlight",
                  "label": "highlight"
                },
                {
                  "value": "home",
                  "label": "home"
                },
                {
                  "value": "hourglass",
                  "label": "hourglass"
                },
                {
                  "value": "html5",
                  "label": "html5"
                },
                {
                  "value": "info-circle",
                  "label": "info-circle"
                },
                {
                  "value": "instagram",
                  "label": "instagram"
                },
                {
                  "value": "insurance",
                  "label": "insurance"
                },
                {
                  "value": "left-circle",
                  "label": "left-circle"
                },
                {
                  "value": "layout",
                  "label": "layout"
                },
                {
                  "value": "interation",
                  "label": "interation"
                },
                {
                  "value": "left-square",
                  "label": "left-square"
                },
                {
                  "value": "idcard",
                  "label": "idcard"
                },
                {
                  "value": "linkedin",
                  "label": "linkedin"
                },
                {
                  "value": "lock",
                  "label": "lock"
                },
                {
                  "value": "like",
                  "label": "like"
                },
                {
                  "value": "medicine-box",
                  "label": "medicine-box"
                },
                {
                  "value": "meh",
                  "label": "meh"
                },
                {
                  "value": "message",
                  "label": "message"
                },
                {
                  "value": "minus-circle",
                  "label": "minus-circle"
                },
                {
                  "value": "minus-square",
                  "label": "minus-square"
                },
                {
                  "value": "mobile",
                  "label": "mobile"
                },
                {
                  "value": "notification",
                  "label": "notification"
                },
                {
                  "value": "money-collect",
                  "label": "money-collect"
                },
                {
                  "value": "pause-circle",
                  "label": "pause-circle"
                },
                {
                  "value": "pay-circle",
                  "label": "pay-circle"
                },
                {
                  "value": "phone",
                  "label": "phone"
                },
                {
                  "value": "picture",
                  "label": "picture"
                },
                {
                  "value": "pie-chart",
                  "label": "pie-chart"
                },
                {
                  "value": "play-circle",
                  "label": "play-circle"
                },
                {
                  "value": "play-square",
                  "label": "play-square"
                },
                {
                  "value": "plus-circle",
                  "label": "plus-circle"
                },
                {
                  "value": "plus-square",
                  "label": "plus-square"
                },
                {
                  "value": "mail",
                  "label": "mail"
                },
                {
                  "value": "printer",
                  "label": "printer"
                },
                {
                  "value": "profile",
                  "label": "profile"
                },
                {
                  "value": "pushpin",
                  "label": "pushpin"
                },
                {
                  "value": "project",
                  "label": "project"
                },
                {
                  "value": "question-circle",
                  "label": "question-circle"
                },
                {
                  "value": "read",
                  "label": "read"
                },
                {
                  "value": "red-envelope",
                  "label": "red-envelope"
                },
                {
                  "value": "reconciliation",
                  "label": "reconciliation"
                },
                {
                  "value": "property-safety",
                  "label": "property-safety"
                },
                {
                  "value": "rest",
                  "label": "rest"
                },
                {
                  "value": "right-circle",
                  "label": "right-circle"
                },
                {
                  "value": "safety-certificate",
                  "label": "safety-certificate"
                },
                {
                  "value": "rocket",
                  "label": "rocket"
                },
                {
                  "value": "save",
                  "label": "save"
                },
                {
                  "value": "schedule",
                  "label": "schedule"
                },
                {
                  "value": "security-scan",
                  "label": "security-scan"
                },
                {
                  "value": "right-square",
                  "label": "right-square"
                },
                {
                  "value": "shop",
                  "label": "shop"
                },
                {
                  "value": "shopping",
                  "label": "shopping"
                },
                {
                  "value": "setting",
                  "label": "setting"
                },
                {
                  "value": "skin",
                  "label": "skin"
                },
                {
                  "value": "slack-square",
                  "label": "slack-square"
                },
                {
                  "value": "sliders",
                  "label": "sliders"
                },
                {
                  "value": "smile",
                  "label": "smile"
                },
                {
                  "value": "skype",
                  "label": "skype"
                },
                {
                  "value": "step-backward",
                  "label": "step-backward"
                },
                {
                  "value": "step-forward",
                  "label": "step-forward"
                },
                {
                  "value": "sound",
                  "label": "sound"
                },
                {
                  "value": "stop",
                  "label": "stop"
                },
                {
                  "value": "switcher",
                  "label": "switcher"
                },
                {
                  "value": "tablet",
                  "label": "tablet"
                },
                {
                  "value": "snippets",
                  "label": "snippets"
                },
                {
                  "value": "tags",
                  "label": "tags"
                },
                {
                  "value": "tag",
                  "label": "tag"
                },
                {
                  "value": "taobao-circle",
                  "label": "taobao-circle"
                },
                {
                  "value": "thunderbolt",
                  "label": "thunderbolt"
                },
                {
                  "value": "tool",
                  "label": "tool"
                },
                {
                  "value": "star",
                  "label": "star"
                },
                {
                  "value": "trophy",
                  "label": "trophy"
                },
                {
                  "value": "unlock",
                  "label": "unlock"
                },
                {
                  "value": "up-square",
                  "label": "up-square"
                },
                {
                  "value": "usb",
                  "label": "usb"
                },
                {
                  "value": "up-circle",
                  "label": "up-circle"
                },
                {
                  "value": "wallet",
                  "label": "wallet"
                },
                {
                  "value": "warning",
                  "label": "warning"
                },
                {
                  "value": "wechat",
                  "label": "wechat"
                },
                {
                  "value": "video-camera",
                  "label": "video-camera"
                },
                {
                  "value": "windows",
                  "label": "windows"
                },
                {
                  "value": "yahoo",
                  "label": "yahoo"
                },
                {
                  "value": "weibo-square",
                  "label": "weibo-square"
                },
                {
                  "value": "weibo-circle",
                  "label": "weibo-circle"
                },
                {
                  "value": "youtube",
                  "label": "youtube"
                },
                {
                  "value": "yuque",
                  "label": "yuque"
                },
                {
                  "value": "alibaba",
                  "label": "alibaba"
                },
                {
                  "value": "align-center",
                  "label": "align-center"
                },
                {
                  "value": "alipay",
                  "label": "alipay"
                },
                {
                  "value": "align-right",
                  "label": "align-right"
                },
                {
                  "value": "align-left",
                  "label": "align-left"
                },
                {
                  "value": "aliyun",
                  "label": "aliyun"
                },
                {
                  "value": "amazon",
                  "label": "amazon"
                },
                {
                  "value": "ant-cloud",
                  "label": "ant-cloud"
                },
                {
                  "value": "ant-design",
                  "label": "ant-design"
                },
                {
                  "value": "apartment",
                  "label": "apartment"
                },
                {
                  "value": "area-chart",
                  "label": "area-chart"
                },
                {
                  "value": "arrow-down",
                  "label": "arrow-down"
                },
                {
                  "value": "arrow-up",
                  "label": "arrow-up"
                },
                {
                  "value": "arrow-right",
                  "label": "arrow-right"
                },
                {
                  "value": "arrow-left",
                  "label": "arrow-left"
                },
                {
                  "value": "arrows-alt",
                  "label": "arrows-alt"
                },
                {
                  "value": "audit",
                  "label": "audit"
                },
                {
                  "value": "bars",
                  "label": "bars"
                },
                {
                  "value": "barcode",
                  "label": "barcode"
                },
                {
                  "value": "behance",
                  "label": "behance"
                },
                {
                  "value": "bg-colors",
                  "label": "bg-colors"
                },
                {
                  "value": "block",
                  "label": "block"
                },
                {
                  "value": "bold",
                  "label": "bold"
                },
                {
                  "value": "border-bottom",
                  "label": "border-bottom"
                },
                {
                  "value": "border-horizontal",
                  "label": "border-horizontal"
                },
                {
                  "value": "border-inner",
                  "label": "border-inner"
                },
                {
                  "value": "border-left",
                  "label": "border-left"
                },
                {
                  "value": "border-outer",
                  "label": "border-outer"
                },
                {
                  "value": "border-top",
                  "label": "border-top"
                },
                {
                  "value": "border-verticle",
                  "label": "border-verticle"
                },
                {
                  "value": "border",
                  "label": "border"
                },
                {
                  "value": "border-right",
                  "label": "border-right"
                },
                {
                  "value": "branches",
                  "label": "branches"
                },
                {
                  "value": "check",
                  "label": "check"
                },
                {
                  "value": "ci",
                  "label": "ci"
                },
                {
                  "value": "cloud-download",
                  "label": "cloud-download"
                },
                {
                  "value": "cloud-server",
                  "label": "cloud-server"
                },
                {
                  "value": "cloud-sync",
                  "label": "cloud-sync"
                },
                {
                  "value": "cloud-upload",
                  "label": "cloud-upload"
                },
                {
                  "value": "close",
                  "label": "close"
                },
                {
                  "value": "cluster",
                  "label": "cluster"
                },
                {
                  "value": "codepen",
                  "label": "codepen"
                },
                {
                  "value": "coffee",
                  "label": "coffee"
                },
                {
                  "value": "colum-height",
                  "label": "colum-height"
                },
                {
                  "value": "column-width",
                  "label": "column-width"
                },
                {
                  "value": "code-sandbox",
                  "label": "code-sandbox"
                },
                {
                  "value": "bar-chart",
                  "label": "bar-chart"
                },
                {
                  "value": "copyright",
                  "label": "copyright"
                },
                {
                  "value": "dash",
                  "label": "dash"
                },
                {
                  "value": "deployment-unit",
                  "label": "deployment-unit"
                },
                {
                  "value": "desktop",
                  "label": "desktop"
                },
                {
                  "value": "disconnect",
                  "label": "disconnect"
                },
                {
                  "value": "dingding",
                  "label": "dingding"
                },
                {
                  "value": "dollar",
                  "label": "dollar"
                },
                {
                  "value": "dot-chart",
                  "label": "dot-chart"
                },
                {
                  "value": "double-left",
                  "label": "double-left"
                },
                {
                  "value": "double-right",
                  "label": "double-right"
                },
                {
                  "value": "download",
                  "label": "download"
                },
                {
                  "value": "drag",
                  "label": "drag"
                },
                {
                  "value": "down",
                  "label": "down"
                },
                {
                  "value": "dribbble",
                  "label": "dribbble"
                },
                {
                  "value": "dropbox",
                  "label": "dropbox"
                },
                {
                  "value": "ellipsis",
                  "label": "ellipsis"
                },
                {
                  "value": "enter",
                  "label": "enter"
                },
                {
                  "value": "exception",
                  "label": "exception"
                },
                {
                  "value": "euro",
                  "label": "euro"
                },
                {
                  "value": "exclamation",
                  "label": "exclamation"
                },
                {
                  "value": "export",
                  "label": "export"
                },
                {
                  "value": "fall",
                  "label": "fall"
                },
                {
                  "value": "file-done",
                  "label": "file-done"
                },
                {
                  "value": "file-jpg",
                  "label": "file-jpg"
                },
                {
                  "value": "file-search",
                  "label": "file-search"
                },
                {
                  "value": "file-protect",
                  "label": "file-protect"
                },
                {
                  "value": "file-sync",
                  "label": "file-sync"
                },
                {
                  "value": "font-colors",
                  "label": "font-colors"
                },
                {
                  "value": "font-size",
                  "label": "font-size"
                },
                {
                  "value": "fork",
                  "label": "fork"
                },
                {
                  "value": "form",
                  "label": "form"
                },
                {
                  "value": "fullscreen-exit",
                  "label": "fullscreen-exit"
                },
                {
                  "value": "fullscreen",
                  "label": "fullscreen"
                },
                {
                  "value": "gateway",
                  "label": "gateway"
                },
                {
                  "value": "global",
                  "label": "global"
                },
                {
                  "value": "gold",
                  "label": "gold"
                },
                {
                  "value": "google-plus",
                  "label": "google-plus"
                },
                {
                  "value": "google",
                  "label": "google"
                },
                {
                  "value": "heat-map",
                  "label": "heat-map"
                },
                {
                  "value": "ie",
                  "label": "ie"
                },
                {
                  "value": "import",
                  "label": "import"
                },
                {
                  "value": "inbox",
                  "label": "inbox"
                },
                {
                  "value": "info",
                  "label": "info"
                },
                {
                  "value": "issues-close",
                  "label": "issues-close"
                },
                {
                  "value": "italic",
                  "label": "italic"
                },
                {
                  "value": "laptop",
                  "label": "laptop"
                },
                {
                  "value": "key",
                  "label": "key"
                },
                {
                  "value": "left",
                  "label": "left"
                },
                {
                  "value": "line-chart",
                  "label": "line-chart"
                },
                {
                  "value": "line-height",
                  "label": "line-height"
                },
                {
                  "value": "line",
                  "label": "line"
                },
                {
                  "value": "link",
                  "label": "link"
                },
                {
                  "value": "loading-3-quarters",
                  "label": "loading-3-quarters"
                },
                {
                  "value": "loading",
                  "label": "loading"
                },
                {
                  "value": "login",
                  "label": "login"
                },
                {
                  "value": "logout",
                  "label": "logout"
                },
                {
                  "value": "man",
                  "label": "man"
                },
                {
                  "value": "medium-workmark",
                  "label": "medium-workmark"
                },
                {
                  "value": "menu-fold",
                  "label": "menu-fold"
                },
                {
                  "value": "medium",
                  "label": "medium"
                },
                {
                  "value": "menu-unfold",
                  "label": "menu-unfold"
                },
                {
                  "value": "menu",
                  "label": "menu"
                },
                {
                  "value": "minus",
                  "label": "minus"
                },
                {
                  "value": "monitor",
                  "label": "monitor"
                },
                {
                  "value": "mr",
                  "label": "mr"
                },
                {
                  "value": "ordered-list",
                  "label": "ordered-list"
                },
                {
                  "value": "number",
                  "label": "number"
                },
                {
                  "value": "paper-clip",
                  "label": "paper-clip"
                },
                {
                  "value": "pause",
                  "label": "pause"
                },
                {
                  "value": "percentage",
                  "label": "percentage"
                },
                {
                  "value": "pic-center",
                  "label": "pic-center"
                },
                {
                  "value": "pic-left",
                  "label": "pic-left"
                },
                {
                  "value": "pic-right",
                  "label": "pic-right"
                },
                {
                  "value": "plus",
                  "label": "plus"
                },
                {
                  "value": "poweroff",
                  "label": "poweroff"
                },
                {
                  "value": "pound",
                  "label": "pound"
                },
                {
                  "value": "qrcode",
                  "label": "qrcode"
                },
                {
                  "value": "qq",
                  "label": "qq"
                },
                {
                  "value": "question",
                  "label": "question"
                },
                {
                  "value": "radar-chart",
                  "label": "radar-chart"
                },
                {
                  "value": "radius-bottomleft",
                  "label": "radius-bottomleft"
                },
                {
                  "value": "radius-setting",
                  "label": "radius-setting"
                },
                {
                  "value": "radius-bottomright",
                  "label": "radius-bottomright"
                },
                {
                  "value": "radius-upleft",
                  "label": "radius-upleft"
                },
                {
                  "value": "radius-upright",
                  "label": "radius-upright"
                },
                {
                  "value": "reddit",
                  "label": "reddit"
                },
                {
                  "value": "reload",
                  "label": "reload"
                },
                {
                  "value": "reload-time",
                  "label": "reload-time"
                },
                {
                  "value": "redo",
                  "label": "redo"
                },
                {
                  "value": "retweet",
                  "label": "retweet"
                },
                {
                  "value": "right",
                  "label": "right"
                },
                {
                  "value": "rise",
                  "label": "rise"
                },
                {
                  "value": "rollback",
                  "label": "rollback"
                },
                {
                  "value": "safety",
                  "label": "safety"
                },
                {
                  "value": "scan",
                  "label": "scan"
                },
                {
                  "value": "scissor",
                  "label": "scissor"
                },
                {
                  "value": "robot",
                  "label": "robot"
                },
                {
                  "value": "search",
                  "label": "search"
                },
                {
                  "value": "select",
                  "label": "select"
                },
                {
                  "value": "share-alt",
                  "label": "share-alt"
                },
                {
                  "value": "shake",
                  "label": "shake"
                },
                {
                  "value": "shopping-cart",
                  "label": "shopping-cart"
                },
                {
                  "value": "shrink",
                  "label": "shrink"
                },
                {
                  "value": "sketch",
                  "label": "sketch"
                },
                {
                  "value": "slack",
                  "label": "slack"
                },
                {
                  "value": "small-dash",
                  "label": "small-dash"
                },
                {
                  "value": "solution",
                  "label": "solution"
                },
                {
                  "value": "sort-ascending",
                  "label": "sort-ascending"
                },
                {
                  "value": "sort-descending",
                  "label": "sort-descending"
                },
                {
                  "value": "stock",
                  "label": "stock"
                },
                {
                  "value": "strikethrough",
                  "label": "strikethrough"
                },
                {
                  "value": "swap-left",
                  "label": "swap-left"
                },
                {
                  "value": "swap",
                  "label": "swap"
                },
                {
                  "value": "swap-right",
                  "label": "swap-right"
                },
                {
                  "value": "sync",
                  "label": "sync"
                },
                {
                  "value": "table",
                  "label": "table"
                },
                {
                  "value": "team",
                  "label": "team"
                },
                {
                  "value": "to-top",
                  "label": "to-top"
                },
                {
                  "value": "taobao",
                  "label": "taobao"
                },
                {
                  "value": "trademark",
                  "label": "trademark"
                },
                {
                  "value": "twitter",
                  "label": "twitter"
                },
                {
                  "value": "underline",
                  "label": "underline"
                },
                {
                  "value": "undo",
                  "label": "undo"
                },
                {
                  "value": "unordered-list",
                  "label": "unordered-list"
                },
                {
                  "value": "upload",
                  "label": "upload"
                },
                {
                  "value": "user-delete",
                  "label": "user-delete"
                },
                {
                  "value": "user-add",
                  "label": "user-add"
                },
                {
                  "value": "up",
                  "label": "up"
                },
                {
                  "value": "user",
                  "label": "user"
                },
                {
                  "value": "usergroup-add",
                  "label": "usergroup-add"
                },
                {
                  "value": "transaction",
                  "label": "transaction"
                },
                {
                  "value": "usergroup-delete",
                  "label": "usergroup-delete"
                },
                {
                  "value": "vertical-align-bottom",
                  "label": "vertical-align-bottom"
                },
                {
                  "value": "vertical-align-middle",
                  "label": "vertical-align-middle"
                },
                {
                  "value": "vertical-left",
                  "label": "vertical-left"
                },
                {
                  "value": "vertical-right",
                  "label": "vertical-right"
                },
                {
                  "value": "vertical-align-top",
                  "label": "vertical-align-top"
                },
                {
                  "value": "weibo",
                  "label": "weibo"
                },
                {
                  "value": "wifi",
                  "label": "wifi"
                },
                {
                  "value": "woman",
                  "label": "woman"
                },
                {
                  "value": "zhihu",
                  "label": "zhihu"
                },
                {
                  "value": "zoom-in",
                  "label": "zoom-in"
                },
                {
                  "value": "zoom-out",
                  "label": "zoom-out"
                }
              ]
            },
            {
              "conditionValue": "fill",
              "values": [
                {
                  "value": "account-book",
                  "label": "account-book"
                },
                {
                  "value": "alert",
                  "label": "alert"
                },
                {
                  "value": "alipay-circle",
                  "label": "alipay-circle"
                },
                {
                  "value": "alipay-square",
                  "label": "alipay-square"
                },
                {
                  "value": "amazon-circle",
                  "label": "amazon-circle"
                },
                {
                  "value": "aliwangwang",
                  "label": "aliwangwang"
                },
                {
                  "value": "android",
                  "label": "android"
                },
                {
                  "value": "amazon-square",
                  "label": "amazon-square"
                },
                {
                  "value": "api",
                  "label": "api"
                },
                {
                  "value": "appstore",
                  "label": "appstore"
                },
                {
                  "value": "apple",
                  "label": "apple"
                },
                {
                  "value": "audio",
                  "label": "audio"
                },
                {
                  "value": "bank",
                  "label": "bank"
                },
                {
                  "value": "bell",
                  "label": "bell"
                },
                {
                  "value": "book",
                  "label": "book"
                },
                {
                  "value": "behance-square",
                  "label": "behance-square"
                },
                {
                  "value": "behance-circle",
                  "label": "behance-circle"
                },
                {
                  "value": "box-plot",
                  "label": "box-plot"
                },
                {
                  "value": "build",
                  "label": "build"
                },
                {
                  "value": "backward",
                  "label": "backward"
                },
                {
                  "value": "calculator",
                  "label": "calculator"
                },
                {
                  "value": "calendar",
                  "label": "calendar"
                },
                {
                  "value": "camera",
                  "label": "camera"
                },
                {
                  "value": "car",
                  "label": "car"
                },
                {
                  "value": "caret-down",
                  "label": "caret-down"
                },
                {
                  "value": "bulb",
                  "label": "bulb"
                },
                {
                  "value": "caret-right",
                  "label": "caret-right"
                },
                {
                  "value": "caret-up",
                  "label": "caret-up"
                },
                {
                  "value": "caret-left",
                  "label": "caret-left"
                },
                {
                  "value": "carry-out",
                  "label": "carry-out"
                },
                {
                  "value": "check-circle",
                  "label": "check-circle"
                },
                {
                  "value": "chrome",
                  "label": "chrome"
                },
                {
                  "value": "check-square",
                  "label": "check-square"
                },
                {
                  "value": "ci-circle",
                  "label": "ci-circle"
                },
                {
                  "value": "clock-circle",
                  "label": "clock-circle"
                },
                {
                  "value": "close-circle",
                  "label": "close-circle"
                },
                {
                  "value": "close-square",
                  "label": "close-square"
                },
                {
                  "value": "cloud",
                  "label": "cloud"
                },
                {
                  "value": "code-sandbox-circle",
                  "label": "code-sandbox-circle"
                },
                {
                  "value": "code-sandbox-square",
                  "label": "code-sandbox-square"
                },
                {
                  "value": "code",
                  "label": "code"
                },
                {
                  "value": "codepen-circle",
                  "label": "codepen-circle"
                },
                {
                  "value": "codepen-square",
                  "label": "codepen-square"
                },
                {
                  "value": "contacts",
                  "label": "contacts"
                },
                {
                  "value": "compass",
                  "label": "compass"
                },
                {
                  "value": "container",
                  "label": "container"
                },
                {
                  "value": "control",
                  "label": "control"
                },
                {
                  "value": "copy",
                  "label": "copy"
                },
                {
                  "value": "copyright-circle",
                  "label": "copyright-circle"
                },
                {
                  "value": "credit-card",
                  "label": "credit-card"
                },
                {
                  "value": "crown",
                  "label": "crown"
                },
                {
                  "value": "customer-service",
                  "label": "customer-service"
                },
                {
                  "value": "dashboard",
                  "label": "dashboard"
                },
                {
                  "value": "delete",
                  "label": "delete"
                },
                {
                  "value": "diff",
                  "label": "diff"
                },
                {
                  "value": "dingtalk-circle",
                  "label": "dingtalk-circle"
                },
                {
                  "value": "dingtalk-square",
                  "label": "dingtalk-square"
                },
                {
                  "value": "database",
                  "label": "database"
                },
                {
                  "value": "dislike",
                  "label": "dislike"
                },
                {
                  "value": "dollar-circle",
                  "label": "dollar-circle"
                },
                {
                  "value": "down-circle",
                  "label": "down-circle"
                },
                {
                  "value": "dribbble-circle",
                  "label": "dribbble-circle"
                },
                {
                  "value": "dribbble-square",
                  "label": "dribbble-square"
                },
                {
                  "value": "dropbox-circle",
                  "label": "dropbox-circle"
                },
                {
                  "value": "dropbox-square",
                  "label": "dropbox-square"
                },
                {
                  "value": "edit",
                  "label": "edit"
                },
                {
                  "value": "environment",
                  "label": "environment"
                },
                {
                  "value": "euro-circle",
                  "label": "euro-circle"
                },
                {
                  "value": "exclamation-circle",
                  "label": "exclamation-circle"
                },
                {
                  "value": "experiment",
                  "label": "experiment"
                },
                {
                  "value": "eye-invisible",
                  "label": "eye-invisible"
                },
                {
                  "value": "down-square",
                  "label": "down-square"
                },
                {
                  "value": "facebook",
                  "label": "facebook"
                },
                {
                  "value": "eye",
                  "label": "eye"
                },
                {
                  "value": "fast-backward",
                  "label": "fast-backward"
                },
                {
                  "value": "fast-forward",
                  "label": "fast-forward"
                },
                {
                  "value": "file-add",
                  "label": "file-add"
                },
                {
                  "value": "file-excel",
                  "label": "file-excel"
                },
                {
                  "value": "file-exclamation",
                  "label": "file-exclamation"
                },
                {
                  "value": "file-image",
                  "label": "file-image"
                },
                {
                  "value": "file-markdown",
                  "label": "file-markdown"
                },
                {
                  "value": "file-pdf",
                  "label": "file-pdf"
                },
                {
                  "value": "file-ppt",
                  "label": "file-ppt"
                },
                {
                  "value": "file-text",
                  "label": "file-text"
                },
                {
                  "value": "file-unknown",
                  "label": "file-unknown"
                },
                {
                  "value": "file-word",
                  "label": "file-word"
                },
                {
                  "value": "file-zip",
                  "label": "file-zip"
                },
                {
                  "value": "filter",
                  "label": "filter"
                },
                {
                  "value": "flag",
                  "label": "flag"
                },
                {
                  "value": "file",
                  "label": "file"
                },
                {
                  "value": "folder-add",
                  "label": "folder-add"
                },
                {
                  "value": "folder-open",
                  "label": "folder-open"
                },
                {
                  "value": "folder",
                  "label": "folder"
                },
                {
                  "value": "fire",
                  "label": "fire"
                },
                {
                  "value": "forward",
                  "label": "forward"
                },
                {
                  "value": "frown",
                  "label": "frown"
                },
                {
                  "value": "funnel-plot",
                  "label": "funnel-plot"
                },
                {
                  "value": "gift",
                  "label": "gift"
                },
                {
                  "value": "github",
                  "label": "github"
                },
                {
                  "value": "fund",
                  "label": "fund"
                },
                {
                  "value": "gitlab",
                  "label": "gitlab"
                },
                {
                  "value": "golden",
                  "label": "golden"
                },
                {
                  "value": "google-circle",
                  "label": "google-circle"
                },
                {
                  "value": "google-plus-circle",
                  "label": "google-plus-circle"
                },
                {
                  "value": "google-plus-square",
                  "label": "google-plus-square"
                },
                {
                  "value": "google-square",
                  "label": "google-square"
                },
                {
                  "value": "hdd",
                  "label": "hdd"
                },
                {
                  "value": "heart",
                  "label": "heart"
                },
                {
                  "value": "highlight",
                  "label": "highlight"
                },
                {
                  "value": "home",
                  "label": "home"
                },
                {
                  "value": "hourglass",
                  "label": "hourglass"
                },
                {
                  "value": "html5",
                  "label": "html5"
                },
                {
                  "value": "ie-circle",
                  "label": "ie-circle"
                },
                {
                  "value": "ie-square",
                  "label": "ie-square"
                },
                {
                  "value": "info-circle",
                  "label": "info-circle"
                },
                {
                  "value": "instagram",
                  "label": "instagram"
                },
                {
                  "value": "insurance",
                  "label": "insurance"
                },
                {
                  "value": "left-circle",
                  "label": "left-circle"
                },
                {
                  "value": "layout",
                  "label": "layout"
                },
                {
                  "value": "interation",
                  "label": "interation"
                },
                {
                  "value": "left-square",
                  "label": "left-square"
                },
                {
                  "value": "idcard",
                  "label": "idcard"
                },
                {
                  "value": "linkedin",
                  "label": "linkedin"
                },
                {
                  "value": "lock",
                  "label": "lock"
                },
                {
                  "value": "like",
                  "label": "like"
                },
                {
                  "value": "medicine-box",
                  "label": "medicine-box"
                },
                {
                  "value": "medium-circle",
                  "label": "medium-circle"
                },
                {
                  "value": "medium-square",
                  "label": "medium-square"
                },
                {
                  "value": "meh",
                  "label": "meh"
                },
                {
                  "value": "message",
                  "label": "message"
                },
                {
                  "value": "minus-circle",
                  "label": "minus-circle"
                },
                {
                  "value": "minus-square",
                  "label": "minus-square"
                },
                {
                  "value": "mobile",
                  "label": "mobile"
                },
                {
                  "value": "notification",
                  "label": "notification"
                },
                {
                  "value": "money-collect",
                  "label": "money-collect"
                },
                {
                  "value": "pause-circle",
                  "label": "pause-circle"
                },
                {
                  "value": "pay-circle",
                  "label": "pay-circle"
                },
                {
                  "value": "phone",
                  "label": "phone"
                },
                {
                  "value": "picture",
                  "label": "picture"
                },
                {
                  "value": "pie-chart",
                  "label": "pie-chart"
                },
                {
                  "value": "play-circle",
                  "label": "play-circle"
                },
                {
                  "value": "play-square",
                  "label": "play-square"
                },
                {
                  "value": "plus-circle",
                  "label": "plus-circle"
                },
                {
                  "value": "pound-circle",
                  "label": "pound-circle"
                },
                {
                  "value": "plus-square",
                  "label": "plus-square"
                },
                {
                  "value": "mail",
                  "label": "mail"
                },
                {
                  "value": "printer",
                  "label": "printer"
                },
                {
                  "value": "profile",
                  "label": "profile"
                },
                {
                  "value": "pushpin",
                  "label": "pushpin"
                },
                {
                  "value": "qq-circle",
                  "label": "qq-circle"
                },
                {
                  "value": "project",
                  "label": "project"
                },
                {
                  "value": "question-circle",
                  "label": "question-circle"
                },
                {
                  "value": "qq-square",
                  "label": "qq-square"
                },
                {
                  "value": "read",
                  "label": "read"
                },
                {
                  "value": "red-envelope",
                  "label": "red-envelope"
                },
                {
                  "value": "reconciliation",
                  "label": "reconciliation"
                },
                {
                  "value": "property-safety",
                  "label": "property-safety"
                },
                {
                  "value": "reddit-circle",
                  "label": "reddit-circle"
                },
                {
                  "value": "reddit-square",
                  "label": "reddit-square"
                },
                {
                  "value": "rest",
                  "label": "rest"
                },
                {
                  "value": "right-circle",
                  "label": "right-circle"
                },
                {
                  "value": "safety-certificate",
                  "label": "safety-certificate"
                },
                {
                  "value": "rocket",
                  "label": "rocket"
                },
                {
                  "value": "save",
                  "label": "save"
                },
                {
                  "value": "schedule",
                  "label": "schedule"
                },
                {
                  "value": "security-scan",
                  "label": "security-scan"
                },
                {
                  "value": "right-square",
                  "label": "right-square"
                },
                {
                  "value": "shop",
                  "label": "shop"
                },
                {
                  "value": "shopping",
                  "label": "shopping"
                },
                {
                  "value": "setting",
                  "label": "setting"
                },
                {
                  "value": "sketch-circle",
                  "label": "sketch-circle"
                },
                {
                  "value": "sketch-square",
                  "label": "sketch-square"
                },
                {
                  "value": "slack-circle",
                  "label": "slack-circle"
                },
                {
                  "value": "skin",
                  "label": "skin"
                },
                {
                  "value": "slack-square",
                  "label": "slack-square"
                },
                {
                  "value": "sliders",
                  "label": "sliders"
                },
                {
                  "value": "smile",
                  "label": "smile"
                },
                {
                  "value": "skype",
                  "label": "skype"
                },
                {
                  "value": "step-backward",
                  "label": "step-backward"
                },
                {
                  "value": "step-forward",
                  "label": "step-forward"
                },
                {
                  "value": "sound",
                  "label": "sound"
                },
                {
                  "value": "stop",
                  "label": "stop"
                },
                {
                  "value": "switcher",
                  "label": "switcher"
                },
                {
                  "value": "tablet",
                  "label": "tablet"
                },
                {
                  "value": "snippets",
                  "label": "snippets"
                },
                {
                  "value": "tags",
                  "label": "tags"
                },
                {
                  "value": "tag",
                  "label": "tag"
                },
                {
                  "value": "taobao-square",
                  "label": "taobao-square"
                },
                {
                  "value": "taobao-circle",
                  "label": "taobao-circle"
                },
                {
                  "value": "thunderbolt",
                  "label": "thunderbolt"
                },
                {
                  "value": "tool",
                  "label": "tool"
                },
                {
                  "value": "star",
                  "label": "star"
                },
                {
                  "value": "trademark-circle",
                  "label": "trademark-circle"
                },
                {
                  "value": "twitter-circle",
                  "label": "twitter-circle"
                },
                {
                  "value": "trophy",
                  "label": "trophy"
                },
                {
                  "value": "twitter-square",
                  "label": "twitter-square"
                },
                {
                  "value": "unlock",
                  "label": "unlock"
                },
                {
                  "value": "up-square",
                  "label": "up-square"
                },
                {
                  "value": "usb",
                  "label": "usb"
                },
                {
                  "value": "up-circle",
                  "label": "up-circle"
                },
                {
                  "value": "wallet",
                  "label": "wallet"
                },
                {
                  "value": "warning",
                  "label": "warning"
                },
                {
                  "value": "wechat",
                  "label": "wechat"
                },
                {
                  "value": "video-camera",
                  "label": "video-camera"
                },
                {
                  "value": "windows",
                  "label": "windows"
                },
                {
                  "value": "yahoo",
                  "label": "yahoo"
                },
                {
                  "value": "weibo-square",
                  "label": "weibo-square"
                },
                {
                  "value": "weibo-circle",
                  "label": "weibo-circle"
                },
                {
                  "value": "youtube",
                  "label": "youtube"
                },
                {
                  "value": "yuque",
                  "label": "yuque"
                },
                {
                  "value": "zhihu-circle",
                  "label": "zhihu-circle"
                },
                {
                  "value": "zhihu-square",
                  "label": "zhihu-square"
                }
              ]
            },
            {
              "conditionValue": "twotone",
              "values": [
                {
                  "value": "account-book",
                  "label": "account-book"
                },
                {
                  "value": "alert",
                  "label": "alert"
                },
                {
                  "value": "api",
                  "label": "api"
                },
                {
                  "value": "appstore",
                  "label": "appstore"
                },
                {
                  "value": "audio",
                  "label": "audio"
                },
                {
                  "value": "bank",
                  "label": "bank"
                },
                {
                  "value": "bell",
                  "label": "bell"
                },
                {
                  "value": "book",
                  "label": "book"
                },
                {
                  "value": "box-plot",
                  "label": "box-plot"
                },
                {
                  "value": "build",
                  "label": "build"
                },
                {
                  "value": "calculator",
                  "label": "calculator"
                },
                {
                  "value": "camera",
                  "label": "camera"
                },
                {
                  "value": "car",
                  "label": "car"
                },
                {
                  "value": "bulb",
                  "label": "bulb"
                },
                {
                  "value": "carry-out",
                  "label": "carry-out"
                },
                {
                  "value": "check-circle",
                  "label": "check-circle"
                },
                {
                  "value": "check-square",
                  "label": "check-square"
                },
                {
                  "value": "clock-circle",
                  "label": "clock-circle"
                },
                {
                  "value": "close-circle",
                  "label": "close-circle"
                },
                {
                  "value": "close-square",
                  "label": "close-square"
                },
                {
                  "value": "cloud",
                  "label": "cloud"
                },
                {
                  "value": "code",
                  "label": "code"
                },
                {
                  "value": "contacts",
                  "label": "contacts"
                },
                {
                  "value": "compass",
                  "label": "compass"
                },
                {
                  "value": "container",
                  "label": "container"
                },
                {
                  "value": "control",
                  "label": "control"
                },
                {
                  "value": "copy",
                  "label": "copy"
                },
                {
                  "value": "credit-card",
                  "label": "credit-card"
                },
                {
                  "value": "crown",
                  "label": "crown"
                },
                {
                  "value": "customer-service",
                  "label": "customer-service"
                },
                {
                  "value": "dashboard",
                  "label": "dashboard"
                },
                {
                  "value": "delete",
                  "label": "delete"
                },
                {
                  "value": "diff",
                  "label": "diff"
                },
                {
                  "value": "database",
                  "label": "database"
                },
                {
                  "value": "dislike",
                  "label": "dislike"
                },
                {
                  "value": "down-circle",
                  "label": "down-circle"
                },
                {
                  "value": "edit",
                  "label": "edit"
                },
                {
                  "value": "environment",
                  "label": "environment"
                },
                {
                  "value": "exclamation-circle",
                  "label": "exclamation-circle"
                },
                {
                  "value": "experiment",
                  "label": "experiment"
                },
                {
                  "value": "eye-invisible",
                  "label": "eye-invisible"
                },
                {
                  "value": "down-square",
                  "label": "down-square"
                },
                {
                  "value": "eye",
                  "label": "eye"
                },
                {
                  "value": "file-add",
                  "label": "file-add"
                },
                {
                  "value": "file-excel",
                  "label": "file-excel"
                },
                {
                  "value": "file-exclamation",
                  "label": "file-exclamation"
                },
                {
                  "value": "file-image",
                  "label": "file-image"
                },
                {
                  "value": "file-markdown",
                  "label": "file-markdown"
                },
                {
                  "value": "file-pdf",
                  "label": "file-pdf"
                },
                {
                  "value": "file-ppt",
                  "label": "file-ppt"
                },
                {
                  "value": "file-text",
                  "label": "file-text"
                },
                {
                  "value": "file-unknown",
                  "label": "file-unknown"
                },
                {
                  "value": "file-word",
                  "label": "file-word"
                },
                {
                  "value": "file-zip",
                  "label": "file-zip"
                },
                {
                  "value": "filter",
                  "label": "filter"
                },
                {
                  "value": "flag",
                  "label": "flag"
                },
                {
                  "value": "file",
                  "label": "file"
                },
                {
                  "value": "folder-add",
                  "label": "folder-add"
                },
                {
                  "value": "folder-open",
                  "label": "folder-open"
                },
                {
                  "value": "folder",
                  "label": "folder"
                },
                {
                  "value": "fire",
                  "label": "fire"
                },
                {
                  "value": "frown",
                  "label": "frown"
                },
                {
                  "value": "funnel-plot",
                  "label": "funnel-plot"
                },
                {
                  "value": "gift",
                  "label": "gift"
                },
                {
                  "value": "fund",
                  "label": "fund"
                },
                {
                  "value": "hdd",
                  "label": "hdd"
                },
                {
                  "value": "heart",
                  "label": "heart"
                },
                {
                  "value": "highlight",
                  "label": "highlight"
                },
                {
                  "value": "home",
                  "label": "home"
                },
                {
                  "value": "hourglass",
                  "label": "hourglass"
                },
                {
                  "value": "html5",
                  "label": "html5"
                },
                {
                  "value": "info-circle",
                  "label": "info-circle"
                },
                {
                  "value": "insurance",
                  "label": "insurance"
                },
                {
                  "value": "left-circle",
                  "label": "left-circle"
                },
                {
                  "value": "layout",
                  "label": "layout"
                },
                {
                  "value": "interation",
                  "label": "interation"
                },
                {
                  "value": "left-square",
                  "label": "left-square"
                },
                {
                  "value": "idcard",
                  "label": "idcard"
                },
                {
                  "value": "lock",
                  "label": "lock"
                },
                {
                  "value": "like",
                  "label": "like"
                },
                {
                  "value": "medicine-box",
                  "label": "medicine-box"
                },
                {
                  "value": "meh",
                  "label": "meh"
                },
                {
                  "value": "message",
                  "label": "message"
                },
                {
                  "value": "minus-circle",
                  "label": "minus-circle"
                },
                {
                  "value": "minus-square",
                  "label": "minus-square"
                },
                {
                  "value": "mobile",
                  "label": "mobile"
                },
                {
                  "value": "notification",
                  "label": "notification"
                },
                {
                  "value": "money-collect",
                  "label": "money-collect"
                },
                {
                  "value": "pause-circle",
                  "label": "pause-circle"
                },
                {
                  "value": "phone",
                  "label": "phone"
                },
                {
                  "value": "picture",
                  "label": "picture"
                },
                {
                  "value": "pie-chart",
                  "label": "pie-chart"
                },
                {
                  "value": "play-circle",
                  "label": "play-circle"
                },
                {
                  "value": "play-square",
                  "label": "play-square"
                },
                {
                  "value": "plus-circle",
                  "label": "plus-circle"
                },
                {
                  "value": "pound-circle",
                  "label": "pound-circle"
                },
                {
                  "value": "plus-square",
                  "label": "plus-square"
                },
                {
                  "value": "mail",
                  "label": "mail"
                },
                {
                  "value": "printer",
                  "label": "printer"
                },
                {
                  "value": "profile",
                  "label": "profile"
                },
                {
                  "value": "pushpin",
                  "label": "pushpin"
                },
                {
                  "value": "project",
                  "label": "project"
                },
                {
                  "value": "question-circle",
                  "label": "question-circle"
                },
                {
                  "value": "red-envelope",
                  "label": "red-envelope"
                },
                {
                  "value": "reconciliation",
                  "label": "reconciliation"
                },
                {
                  "value": "property-safety",
                  "label": "property-safety"
                },
                {
                  "value": "rest",
                  "label": "rest"
                },
                {
                  "value": "right-circle",
                  "label": "right-circle"
                },
                {
                  "value": "safety-certificate",
                  "label": "safety-certificate"
                },
                {
                  "value": "rocket",
                  "label": "rocket"
                },
                {
                  "value": "save",
                  "label": "save"
                },
                {
                  "value": "schedule",
                  "label": "schedule"
                },
                {
                  "value": "security-scan",
                  "label": "security-scan"
                },
                {
                  "value": "right-square",
                  "label": "right-square"
                },
                {
                  "value": "shop",
                  "label": "shop"
                },
                {
                  "value": "shopping",
                  "label": "shopping"
                },
                {
                  "value": "setting",
                  "label": "setting"
                },
                {
                  "value": "skin",
                  "label": "skin"
                },
                {
                  "value": "sliders",
                  "label": "sliders"
                },
                {
                  "value": "smile",
                  "label": "smile"
                },
                {
                  "value": "sound",
                  "label": "sound"
                },
                {
                  "value": "stop",
                  "label": "stop"
                },
                {
                  "value": "switcher",
                  "label": "switcher"
                },
                {
                  "value": "tablet",
                  "label": "tablet"
                },
                {
                  "value": "snippets",
                  "label": "snippets"
                },
                {
                  "value": "tags",
                  "label": "tags"
                },
                {
                  "value": "tag",
                  "label": "tag"
                },
                {
                  "value": "thunderbolt",
                  "label": "thunderbolt"
                },
                {
                  "value": "tool",
                  "label": "tool"
                },
                {
                  "value": "star",
                  "label": "star"
                },
                {
                  "value": "trademark-circle",
                  "label": "trademark-circle"
                },
                {
                  "value": "trophy",
                  "label": "trophy"
                },
                {
                  "value": "unlock",
                  "label": "unlock"
                },
                {
                  "value": "up-square",
                  "label": "up-square"
                },
                {
                  "value": "usb",
                  "label": "usb"
                },
                {
                  "value": "up-circle",
                  "label": "up-circle"
                },
                {
                  "value": "wallet",
                  "label": "wallet"
                },
                {
                  "value": "warning",
                  "label": "warning"
                },
                {
                  "value": "video-camera",
                  "label": "video-camera"
                },
                {
                  "value": "ci",
                  "label": "ci"
                },
                {
                  "value": "copyright",
                  "label": "copyright"
                },
                {
                  "value": "dollar",
                  "label": "dollar"
                },
                {
                  "value": "euro",
                  "label": "euro"
                },
                {
                  "value": "gold",
                  "label": "gold"
                },
                {
                  "value": "canlendar",
                  "label": "canlendar"
                }
              ]
            }
          ]
        }
      },
      {
        "name": "theme",
        "inputType": 0,
        "description": "Type of the ant design icon",
        "type": "Enum",
        "typeRaw": "`'fill'｜'outline'｜'twotone'`",
        "default": "`'outline'`",
        "typeDefinition": [
          "fill",
          "outline",
          "twotone"
        ],
        "pureDefault": "outline"
      },
      {
        "name": "spin",
        "inputType": 0,
        "description": "Rotate icon with animation",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "twoToneColor",
        "inputType": 0,
        "description": "Only support the two-tone icon. Specific the primary color.",
        "type": "string",
        "typeRaw": "`string (hex color)`",
        "default": ""
      },
      {
        "name": "iconfont",
        "inputType": 0,
        "description": "Type of the icon from iconfont",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Icon",
    "description": "Semantic vector graphics.",
    "whenToUse": "",
    "doc": "/components/icon/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/icon",
    "snippet": "<i __$1></i>"
  },
  {
    "_idx": 21,
    "type": "directive",
    "selector": "nz-input",
    "types": {},
    "properties": [
      {
        "name": "nzSize",
        "inputType": 0,
        "description": "The size of the input box. Note: in the context of a form, the `large` size is used.",
        "type": "Enum",
        "typeRaw": "`'large'｜'small'｜'default'`",
        "default": "`'default'`",
        "typeDefinition": [
          "large",
          "small",
          "default"
        ],
        "pureDefault": "default"
      },
      {
        "name": "nzAutosize",
        "inputType": 0,
        "description": "Only used for `textarea`, height autosize feature, can be set to `boolean` or an object `{ minRows: 2, maxRows: 6 }`",
        "type": "boolean",
        "typeRaw": "`boolean｜{ minRows: number, maxRows: number }`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "ngModel",
        "inputType": 2,
        "type": "any",
        "typeRaw": "`any`"
      },
      {
        "name": "ngModelChange",
        "inputType": 1,
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<any>`"
      },
      {
        "name": "disabled",
        "inputType": 0,
        "type": "boolean",
        "typeRaw": "`boolean`",
        "forceInputType": 0
      },
      {
        "name": "nzAutocomplete",
        "inputType": 0,
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef`",
        "default": "auto"
      },
      {
        "name": "formControlName",
        "inputType": 0,
        "type": "string",
        "typeRaw": "`string`"
      }
    ],
    "description": "All props of input supported by [w3c standards](https://www.w3schools.com/tags/tag_input.asp) and Angular can used in `nz-input`.",
    "lib": "ng-zorro-antd",
    "title": "Input",
    "whenToUse": "- A user input in a form field is needed.\n- A search input is required.",
    "doc": "/components/input/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/input",
    "snippet": "<input __$1>"
  },
  {
    "_idx": 75,
    "type": "component",
    "selector": "nz-input-group",
    "types": {},
    "properties": [
      {
        "name": "nzAddonAfter",
        "inputType": 0,
        "description": "The label text displayed after (on the right side of) the input field.",
        "type": "string",
        "typeRaw": "`string｜TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzAddonBefore",
        "inputType": 0,
        "description": "The label text displayed before (on the left side of) the input field.",
        "type": "string",
        "typeRaw": "`string｜TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzPrefix",
        "inputType": 0,
        "description": "The prefix icon for the Input.",
        "type": "string",
        "typeRaw": "`string｜TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzSuffix",
        "inputType": 0,
        "description": "The suffix icon for the Input.",
        "type": "string",
        "typeRaw": "`string｜TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzCompact",
        "inputType": 0,
        "description": "Whether use compact style",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzSize",
        "inputType": 0,
        "description": "The size of `nz-input-group` specifies the size of the included `nz-input` fields",
        "type": "Enum",
        "typeRaw": "`'large'｜'small'｜'default'`",
        "default": "`'default'`",
        "typeDefinition": [
          "large",
          "small",
          "default"
        ],
        "pureDefault": "default"
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Input",
    "description": "A basic widget for getting the user input is a text field.\nKeyboard and mouse can be used for providing or changing data.",
    "whenToUse": "- A user input in a form field is needed.\n- A search input is required.",
    "doc": "/components/input/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/input"
  },
  {
    "_idx": 12,
    "type": "component",
    "selector": "nz-input-number",
    "types": {},
    "properties": [
      {
        "name": "ngModel",
        "inputType": 2,
        "description": "current value, double binding",
        "type": "number",
        "typeRaw": "`number｜string` ｜ `string`",
        "default": ""
      },
      {
        "name": "nzAutoFocus",
        "inputType": 0,
        "description": "get focus when component mounted",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzDisabled",
        "inputType": 0,
        "description": "disable the input",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "forceInputType": 0
      },
      {
        "name": "nzMax",
        "inputType": 0,
        "description": "max vale",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`Infinity`",
        "pureDefault": "Infinity"
      },
      {
        "name": "nzMin",
        "inputType": 0,
        "description": "min value",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`-Infinity`",
        "pureDefault": "-Infinity"
      },
      {
        "name": "nzFormatter",
        "inputType": 0,
        "description": "Specifies the format of the value presented",
        "type": "function",
        "typeRaw": "`(value: number｜string) => string｜number`",
        "default": ""
      },
      {
        "name": "nzParser",
        "inputType": 0,
        "description": "Specifies the value extracted from nzFormatter",
        "type": "function",
        "typeRaw": "`(value: string) => string｜number`",
        "default": ""
      },
      {
        "name": "nzPrecision",
        "inputType": 0,
        "description": "precision of input value",
        "type": "number",
        "typeRaw": "`number`",
        "default": ""
      },
      {
        "name": "nzSize",
        "inputType": 0,
        "description": "width of input box",
        "type": "Enum",
        "typeRaw": "`'large'｜'small'｜'default'`",
        "default": "`'default'`",
        "typeDefinition": [
          "large",
          "small",
          "default"
        ],
        "pureDefault": "default"
      },
      {
        "name": "nzStep",
        "inputType": 0,
        "description": "The number to which the current value is increased or decreased. It can be an integer or decimal.",
        "type": "number",
        "typeRaw": "`number｜string`",
        "default": "`1`",
        "pureDefault": "1"
      },
      {
        "name": "nzPlaceHolder",
        "inputType": 0,
        "description": "Placeholder of select",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "ngModelChange",
        "inputType": 1,
        "description": "The callback triggered when the value is changed",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<number>`",
        "default": ""
      },
      {
        "name": "nzFocus",
        "inputType": 1,
        "description": "focus callback",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<void>`",
        "default": ""
      },
      {
        "name": "nzBlur",
        "inputType": 1,
        "description": "blur callback",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<void>`",
        "default": ""
      },
      {
        "name": "formControlName",
        "inputType": 0,
        "type": "string",
        "typeRaw": "`string`"
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "InputNumber",
    "description": "Enter a number within certain range with the mouse or keyboard.",
    "whenToUse": "When a numeric value needs to be provided.",
    "doc": "/components/input-number/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/input-number"
  },
  {
    "_idx": 138,
    "type": "component",
    "selector": "nz-sider",
    "types": {},
    "properties": [
      {
        "name": "nzBreakpoint",
        "inputType": 0,
        "description": "breakpoints of the responsive layout",
        "type": "Enum",
        "typeRaw": "`'xs'｜'sm'｜'md'｜'lg'｜'xl'｜'xxl'`",
        "default": "",
        "typeDefinition": [
          "xs",
          "sm",
          "md",
          "lg",
          "xl",
          "xxl"
        ]
      },
      {
        "name": "nzCollapsed",
        "inputType": 0,
        "description": "to set the current status",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": ""
      },
      {
        "name": "nzCollapsedWidth",
        "inputType": 0,
        "description": "width of the collapsed sidebar, by setting to `0` a special trigger will appear",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`64`",
        "pureDefault": "64"
      },
      {
        "name": "nzCollapsible",
        "inputType": 0,
        "description": "whether can be collapsed",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzCollapsed",
        "inputType": 2,
        "description": "the collapsed status can be double binding",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzReverseArrow",
        "inputType": 0,
        "description": "reverse direction of arrow, for a sider that expands from the right",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzTrigger",
        "inputType": 0,
        "description": "specify the customized trigger, set to null to hide the trigger",
        "type": "string",
        "typeRaw": "`string｜TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzWidth",
        "inputType": 0,
        "description": "width of the sidebar",
        "type": "number",
        "typeRaw": "`number｜string`",
        "default": "`200`",
        "pureDefault": "200"
      },
      {
        "name": "nzCollapsedChange",
        "inputType": 1,
        "description": "the callback function",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<boolean>`",
        "default": ""
      }
    ],
    "description": "The sidebar.",
    "lib": "ng-zorro-antd",
    "title": "Layout",
    "whenToUse": "",
    "doc": "/components/layout/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/layout"
  },
  {
    "_idx": 12,
    "type": "component",
    "selector": "nz-list",
    "types": {},
    "properties": [
      {
        "name": "nzDataSource",
        "inputType": 0,
        "description": "Data source for list",
        "type": "object",
        "typeRaw": "`any[]`",
        "default": ""
      },
      {
        "name": "nzRenderItem",
        "inputType": 0,
        "description": "Custom item renderer",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzBordered",
        "inputType": 0,
        "description": "Toggles rendering of the border around the list",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzFooter",
        "inputType": 0,
        "description": "List footer renderer",
        "type": "string",
        "typeRaw": "`string｜TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzGrid",
        "inputType": 0,
        "description": "The grid type of list. You can set grid to something like `{gutter: 16, column: 4}`",
        "type": "object",
        "typeRaw": "`object`",
        "default": ""
      },
      {
        "name": "nzHeader",
        "inputType": 0,
        "description": "List header renderer",
        "type": "string",
        "typeRaw": "`string｜TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzItemLayout",
        "inputType": 0,
        "description": "The layout of list, default is `horizontal`, If a vertical list is desired, set the itemLayout property to `vertical`",
        "type": "Enum",
        "typeRaw": "`'vertical'｜'horizontal'`",
        "default": "`'horizontal'`",
        "typeDefinition": [
          "vertical",
          "horizontal"
        ],
        "pureDefault": "horizontal"
      },
      {
        "name": "nzLoading",
        "inputType": 0,
        "description": "Shows a loading indicator while the contents of the list are being fetched",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "forceInputType": 0
      },
      {
        "name": "nzLoadMore",
        "inputType": 0,
        "description": "Shows a load more content",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzNoResult",
        "inputType": 0,
        "description": "Specify content to show when list is empty",
        "type": "string",
        "typeRaw": "`string` ｜ `TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzPagination",
        "inputType": 0,
        "description": "Shows a pagination content",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzSize",
        "inputType": 0,
        "description": "Size of list",
        "type": "Enum",
        "typeRaw": "`'large'｜'small'｜'default'`",
        "default": "`'default'`",
        "typeDefinition": [
          "large",
          "small",
          "default"
        ],
        "pureDefault": "default"
      },
      {
        "name": "nzSplit",
        "inputType": 0,
        "description": "Toggles rendering of the split under the list item",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "List",
    "description": "Simple List.",
    "whenToUse": "A list can be used to display content related to a single subject. The content can consist of multiple elements of varying type and size.",
    "doc": "/components/list/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/list"
  },
  {
    "_idx": 352,
    "type": "component",
    "selector": "nz-list-item",
    "types": {},
    "properties": [
      {
        "name": "nzContent",
        "inputType": 0,
        "description": "content renderer",
        "type": "string",
        "typeRaw": "`string｜TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzActions",
        "inputType": 0,
        "description": "The actions content of list item. If `itemLayout` is `vertical`, shows the content on bottom, otherwise shows content on the far right.",
        "type": "Array",
        "typeRaw": "`Array<TemplateRef<void>>`",
        "default": ""
      },
      {
        "name": "nzExtra",
        "inputType": 0,
        "description": "The extra content of list item. If `itemLayout` is `vertical`, shows the content on right, otherwise shows content on the far right.",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef<void>`",
        "default": ""
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "List",
    "description": "Simple List.",
    "whenToUse": "A list can be used to display content related to a single subject. The content can consist of multiple elements of varying type and size.",
    "doc": "/components/list/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/list"
  },
  {
    "_idx": 417,
    "type": "component",
    "selector": "nz-list-item-meta",
    "types": {},
    "properties": [
      {
        "name": "nzAvatar",
        "inputType": 0,
        "description": "The avatar of list item",
        "type": "string",
        "typeRaw": "`string｜TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzDescription",
        "inputType": 0,
        "description": "The description of list item",
        "type": "string",
        "typeRaw": "`string｜TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzTitle",
        "inputType": 0,
        "description": "The title of list item",
        "type": "string",
        "typeRaw": "`string｜TemplateRef<void>`",
        "default": ""
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "List",
    "description": "Simple List.",
    "whenToUse": "A list can be used to display content related to a single subject. The content can consist of multiple elements of varying type and size.",
    "doc": "/components/list/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/list"
  },
  {
    "_idx": 13,
    "type": "component",
    "selector": "nz-mention",
    "types": {},
    "properties": [
      {
        "name": "nzMentionTrigger",
        "inputType": 0,
        "description": "Trigger element **(required)**",
        "type": "object",
        "typeRaw": "`HTMLTextAreaElement｜HTMLInputElement`",
        "default": ""
      },
      {
        "name": "nzMentionSuggestion",
        "inputType": 0,
        "description": "Customize the suggestion template",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef<any>`",
        "default": ""
      },
      {
        "name": "nzLoading",
        "inputType": 0,
        "description": "Loading mode",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "forceInputType": 0
      },
      {
        "name": "nzNotFoundContent",
        "inputType": 0,
        "description": "Suggestion when suggestions empty",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`'无匹配结果，轻敲空格完成输入'`",
        "pureDefault": "无匹配结果，轻敲空格完成输入"
      },
      {
        "name": "nzPlacement",
        "inputType": 0,
        "description": "The position of the suggestion relative to the target, which can be one of top and bottom",
        "type": "Enum",
        "typeRaw": "`'button'｜'top'`",
        "default": "`'bottom'`",
        "typeDefinition": [
          "button",
          "top"
        ],
        "pureDefault": "bottom"
      },
      {
        "name": "nzPrefix",
        "inputType": 0,
        "description": "Character which will trigger Mention to show mention list",
        "type": "string",
        "typeRaw": "`string｜string[]`",
        "default": "`'@'`",
        "pureDefault": "@"
      },
      {
        "name": "nzSuggestions",
        "inputType": 0,
        "description": "Suggestion content",
        "type": "object",
        "typeRaw": "`any[]`",
        "default": "`[]`",
        "pureDefault": "[]"
      },
      {
        "name": "nzValueWith",
        "inputType": 0,
        "description": "Function that maps an suggestion's value",
        "type": "function",
        "typeRaw": "`(any) => string｜(value: string) => string`",
        "default": ""
      },
      {
        "name": "nzOnSelect",
        "inputType": 1,
        "description": "Callback function called when select from suggestions",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<any>`",
        "default": ""
      },
      {
        "name": "onSearchChange",
        "inputType": 1,
        "description": "Callback function called when search content changes",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<MentionOnSearchTypes>`",
        "default": ""
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Mention",
    "description": "Mention component.",
    "whenToUse": "When need to mention someone or something.",
    "doc": "/components/mention/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/mention"
  },
  {
    "_idx": 16,
    "type": "directive",
    "selector": "nz-menu",
    "types": {},
    "properties": [
      {
        "name": "nzInlineCollapsed",
        "inputType": 0,
        "description": "specifies the collapsed status when menu is inline mode",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": ""
      },
      {
        "name": "nzInlineIndent",
        "inputType": 0,
        "description": "indent px of inline menu item on each level",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`24`",
        "pureDefault": "24"
      },
      {
        "name": "nzMode",
        "inputType": 0,
        "description": "type of the menu; `vertical`, `horizontal`, and `inline` modes are supported",
        "type": "Enum",
        "typeRaw": "`'vertical'｜'horizontal'｜'inline'`",
        "default": "`'vertical'`",
        "typeDefinition": [
          "vertical",
          "horizontal",
          "inline"
        ],
        "pureDefault": "vertical"
      },
      {
        "name": "nzSelectable",
        "inputType": 0,
        "description": "allow selecting menu items",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "nzTheme",
        "inputType": 0,
        "description": "color theme of the menu",
        "type": "Enum",
        "typeRaw": "`'light'｜'dark'`",
        "default": "`'light'`",
        "typeDefinition": [
          "light",
          "dark"
        ],
        "pureDefault": "light"
      },
      {
        "name": "nzClick",
        "inputType": 1,
        "description": "the Output when click nz-menu-item inside nz-menu",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<NzMenuItemDirective>`",
        "default": ""
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Menu",
    "description": "Menu list of Navigation.",
    "whenToUse": "Navigation menu is important for a website, it helps users jump from one site section to another quickly. Mostly, it includes top navigation and side navigation. Top navigation provides all the category and functions of the website. Side navigation provides the Multi-level structure of the website.",
    "doc": "/components/menu/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/menu"
  },
  {
    "_idx": 123,
    "type": "directive",
    "selector": "nz-menu-item",
    "types": {},
    "properties": [
      {
        "name": "nzDisabled",
        "inputType": 0,
        "description": "whether menu item is disabled or not",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "forceInputType": 0
      },
      {
        "name": "nzSelected",
        "inputType": 0,
        "description": "whether menu item is selected or not",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Menu",
    "description": "Menu list of Navigation.",
    "whenToUse": "Navigation menu is important for a website, it helps users jump from one site section to another quickly. Mostly, it includes top navigation and side navigation. Top navigation provides all the category and functions of the website. Side navigation provides the Multi-level structure of the website.",
    "doc": "/components/menu/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/menu"
  },
  {
    "_idx": 174,
    "type": "directive",
    "selector": "nz-submenu",
    "types": {},
    "properties": [
      {
        "name": "nzOpen",
        "inputType": 2,
        "description": "whether sub menu is open or not, double binding",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzDisabled",
        "inputType": 0,
        "description": "whether sub menu is disabled or not",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "forceInputType": 0
      },
      {
        "name": "nzOpenChange",
        "inputType": 1,
        "description": "nzOpen callback",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<boolean>`",
        "default": ""
      }
    ],
    "description": "use `title` to mark the title of submenu",
    "lib": "ng-zorro-antd",
    "title": "Menu",
    "whenToUse": "Navigation menu is important for a website, it helps users jump from one site section to another quickly. Mostly, it includes top navigation and side navigation. Top navigation provides all the category and functions of the website. Side navigation provides the Multi-level structure of the website.",
    "doc": "/components/menu/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/menu"
  },
  {
    "_idx": 242,
    "type": "directive",
    "selector": "nz-menu-group",
    "types": {},
    "properties": [],
    "description": "use `title` to mark the title of menu group",
    "lib": "ng-zorro-antd",
    "title": "Menu",
    "whenToUse": "Navigation menu is important for a website, it helps users jump from one site section to another quickly. Mostly, it includes top navigation and side navigation. Top navigation provides all the category and functions of the website. Side navigation provides the Multi-level structure of the website.",
    "doc": "/components/menu/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/menu"
  },
  {
    "_idx": 248,
    "type": "directive",
    "selector": "nz-menu-divider",
    "types": {},
    "properties": [],
    "description": "Divider line in between menu items, only used in vertical popup Menu or Dropdown Menu.",
    "lib": "ng-zorro-antd",
    "title": "Menu",
    "whenToUse": "Navigation menu is important for a website, it helps users jump from one site section to another quickly. Mostly, it includes top navigation and side navigation. Top navigation provides all the category and functions of the website. Side navigation provides the Multi-level structure of the website.",
    "doc": "/components/menu/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/menu"
  },
  {
    "_idx": 22,
    "type": "component",
    "selector": "nz-pagination",
    "types": {},
    "properties": [
      {
        "name": "nzTotal",
        "inputType": 0,
        "description": "total number of data items",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`0`",
        "pureDefault": "0"
      },
      {
        "name": "nzPageIndex",
        "inputType": 2,
        "description": "current page number，double binding",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`1`",
        "pureDefault": "1"
      },
      {
        "name": "nzPageSize",
        "inputType": 2,
        "description": "number of data items per page, double binding",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`10`",
        "pureDefault": "10"
      },
      {
        "name": "nzShowQuickJumper",
        "inputType": 0,
        "description": "determine whether you can jump to pages directly",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzShowSizeChanger",
        "inputType": 0,
        "description": "determine whether `nzPageSize` can be changed",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzSimple",
        "inputType": 0,
        "description": "whether to use simple mode",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": ""
      },
      {
        "name": "nzSize",
        "inputType": 0,
        "description": "specify the size of `nz-pagination`, can be set to `small`",
        "type": "Enum",
        "typeRaw": "`'small'`",
        "default": "`\"\"`",
        "typeDefinition": [
          "small"
        ],
        "pureDefault": ""
      },
      {
        "name": "nzPageSizeOptions",
        "inputType": 0,
        "description": "specify the sizeChanger options",
        "type": "Array",
        "typeRaw": "`number[]`",
        "default": "`[10, 20, 30, 40]`",
        "pureDefault": "[10, 20, 30, 40]"
      },
      {
        "name": "nzItemRender",
        "inputType": 0,
        "description": "to customize item",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef<{ $implicit: 'page'｜'prev'｜'next', page: number }>`",
        "default": ""
      },
      {
        "name": "nzShowTotal",
        "inputType": 0,
        "description": "to display the total number and range",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef<{ $implicit: number, range: [ number, number ] }>`",
        "default": ""
      },
      {
        "name": "nzHideOnSinglePage",
        "inputType": 0,
        "description": "Whether to hide pager on single page",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzPageIndexChange",
        "inputType": 1,
        "description": "current page number change callback",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<number>`",
        "default": ""
      },
      {
        "name": "nzPageSizeChange",
        "inputType": 1,
        "description": "number of data items per page change callback",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<number>`",
        "default": ""
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Pagination",
    "description": "A long list can be divided into several pages by `Pagination`, and only one page will be loaded at a time.",
    "whenToUse": "- When it will take a long time to load/render all items.\n- If you want to browse the data by navigating through pages.",
    "doc": "/components/pagination/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/pagination"
  },
  {
    "_idx": 15,
    "type": "directive",
    "selector": "nz-popconfirm",
    "types": {},
    "properties": [
      {
        "name": "nzMouseEnterDelay",
        "inputType": 0,
        "description": "Delay in seconds, before tooltip is shown on mouse enter",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`0.15`",
        "pureDefault": "0.15",
        "_common": true
      },
      {
        "name": "nzMouseLeaveDelay",
        "inputType": 0,
        "description": "Delay in seconds, before tooltip is hidden on mouse leave",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`0.1`",
        "pureDefault": "0.1",
        "_common": true
      },
      {
        "name": "nzOverlayClassName",
        "inputType": 0,
        "description": "Class name of the tooltip card",
        "type": "string",
        "typeRaw": "`string`",
        "default": "",
        "_common": true
      },
      {
        "name": "nzOverlayStyle",
        "inputType": 0,
        "description": "Style of the tooltip card",
        "type": "object",
        "typeRaw": "`object`",
        "default": "",
        "_common": true,
        "forceInputType": 0
      },
      {
        "name": "nzPlacement",
        "inputType": 0,
        "description": "The position of the tooltip relative to the target",
        "type": "Enum",
        "typeRaw": "`'top'｜'left'｜'right'｜'bottom'｜'topLeft'｜'topRight'｜'bottomLeft'｜'bottomRight'｜'leftTop'｜'leftBottom'｜'rightTop'｜'rightBottom'`",
        "default": "`'top'`",
        "typeDefinition": [
          "top",
          "left",
          "right",
          "bottom",
          "topLeft",
          "topRight",
          "bottomLeft",
          "bottomRight",
          "leftTop",
          "leftBottom",
          "rightTop",
          "rightBottom"
        ],
        "pureDefault": "top",
        "_common": true
      },
      {
        "name": "nzTrigger",
        "inputType": 0,
        "description": "Tooltip trigger mode",
        "type": "Enum",
        "typeRaw": "`'click'｜'focus'｜'hover'`",
        "default": "`'hover'`",
        "typeDefinition": [
          "click",
          "focus",
          "hover"
        ],
        "pureDefault": "hover",
        "_common": true
      },
      {
        "name": "nzVisible",
        "inputType": 0,
        "description": "Whether the floating tooltip card is visible or not",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "_common": true
      },
      {
        "name": "nzVisibleChange",
        "inputType": 1,
        "description": "Callback executed when visibility of the tooltip card is changed",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<boolean>`",
        "default": "",
        "_common": true
      },
      {
        "name": "nzTitle",
        "inputType": 0,
        "description": "The text shown in the tooltip",
        "type": "string",
        "typeRaw": "`string｜TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzCancelText",
        "inputType": 0,
        "description": "text of the Cancel button",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`'Cancel'`",
        "pureDefault": "Cancel"
      },
      {
        "name": "nzOkText",
        "inputType": 0,
        "description": "text of the Confirm button",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`'Confirm'`",
        "pureDefault": "Confirm"
      },
      {
        "name": "nzOkType",
        "inputType": 0,
        "description": "Button `type` of the Confirm button",
        "type": "Enum",
        "typeRaw": "`'primary'｜'ghost'｜'dashed'｜'danger'｜'default'`",
        "default": "`'primary'`",
        "typeDefinition": [
          "primary",
          "ghost",
          "dashed",
          "danger",
          "default"
        ],
        "pureDefault": "primary"
      },
      {
        "name": "nzTitle",
        "inputType": 0,
        "description": "title of the confirmation box",
        "type": "string",
        "typeRaw": "`string｜TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzCondition",
        "inputType": 0,
        "description": "Whether to directly emit `onConfirm` without showing Popconfirm",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzOnCancel",
        "inputType": 1,
        "description": "callback of cancel",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<void>`",
        "default": ""
      },
      {
        "name": "nzOnConfirm",
        "inputType": 1,
        "description": "callback of confirmation",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<void>`",
        "default": ""
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Popconfirm",
    "description": "A simple and compact confirmation dialog of an action.",
    "whenToUse": "A simple and compact dialog used for asking for user confirmation.",
    "doc": "/components/popconfirm/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/popconfirm"
  },
  {
    "_idx": 15,
    "type": "directive",
    "selector": "nz-popover",
    "types": {},
    "properties": [
      {
        "name": "nzMouseEnterDelay",
        "inputType": 0,
        "description": "Delay in seconds, before tooltip is shown on mouse enter",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`0.15`",
        "pureDefault": "0.15",
        "_common": true
      },
      {
        "name": "nzMouseLeaveDelay",
        "inputType": 0,
        "description": "Delay in seconds, before tooltip is hidden on mouse leave",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`0.1`",
        "pureDefault": "0.1",
        "_common": true
      },
      {
        "name": "nzOverlayClassName",
        "inputType": 0,
        "description": "Class name of the tooltip card",
        "type": "string",
        "typeRaw": "`string`",
        "default": "",
        "_common": true
      },
      {
        "name": "nzOverlayStyle",
        "inputType": 0,
        "description": "Style of the tooltip card",
        "type": "object",
        "typeRaw": "`object`",
        "default": "",
        "_common": true,
        "forceInputType": 0
      },
      {
        "name": "nzPlacement",
        "inputType": 0,
        "description": "The position of the tooltip relative to the target",
        "type": "Enum",
        "typeRaw": "`'top'｜'left'｜'right'｜'bottom'｜'topLeft'｜'topRight'｜'bottomLeft'｜'bottomRight'｜'leftTop'｜'leftBottom'｜'rightTop'｜'rightBottom'`",
        "default": "`'top'`",
        "typeDefinition": [
          "top",
          "left",
          "right",
          "bottom",
          "topLeft",
          "topRight",
          "bottomLeft",
          "bottomRight",
          "leftTop",
          "leftBottom",
          "rightTop",
          "rightBottom"
        ],
        "pureDefault": "top",
        "_common": true
      },
      {
        "name": "nzTrigger",
        "inputType": 0,
        "description": "Tooltip trigger mode",
        "type": "Enum",
        "typeRaw": "`'click'｜'focus'｜'hover'`",
        "default": "`'hover'`",
        "typeDefinition": [
          "click",
          "focus",
          "hover"
        ],
        "pureDefault": "hover",
        "_common": true
      },
      {
        "name": "nzVisible",
        "inputType": 0,
        "description": "Whether the floating tooltip card is visible or not",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "_common": true
      },
      {
        "name": "nzVisibleChange",
        "inputType": 1,
        "description": "Callback executed when visibility of the tooltip card is changed",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<boolean>`",
        "default": "",
        "_common": true
      },
      {
        "name": "nzTitle",
        "inputType": 0,
        "description": "The text shown in the tooltip",
        "type": "string",
        "typeRaw": "`string｜TemplateRef<void>`",
        "default": ""
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Popover",
    "description": "The floating card popped by clicking or hovering.",
    "whenToUse": "A simple popup menu to provide extra information or operations.",
    "doc": "/components/popover/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/popover"
  },
  {
    "_idx": 24,
    "type": "component",
    "selector": "nz-progress",
    "types": {},
    "properties": [
      {
        "name": "nzFormat",
        "inputType": 0,
        "description": "template function of the content",
        "type": "function",
        "typeRaw": "`(percent: number) => string`",
        "default": "`percent => percent + '%'`",
        "pureDefault": "percent => percent + '%"
      },
      {
        "name": "nzGapDegree",
        "inputType": 0,
        "description": "the gap degree of half circle, 0 ~ 360",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`0`",
        "pureDefault": "0"
      },
      {
        "name": "nzGapPosition",
        "inputType": 0,
        "description": "the gap position",
        "type": "Enum",
        "typeRaw": "`'top'｜'right'｜'bottom'｜'left'`",
        "default": "`'top'`",
        "typeDefinition": [
          "top",
          "right",
          "bottom",
          "left"
        ],
        "pureDefault": "top"
      },
      {
        "name": "nzPercent",
        "inputType": 0,
        "description": "to set the completion percentage",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`0`",
        "pureDefault": "0"
      },
      {
        "name": "nzShowInfo",
        "inputType": 0,
        "description": "whether to display the progress value and the status icon",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "nzStatus",
        "inputType": 0,
        "description": "to set the status of the Progress",
        "type": "Enum",
        "typeRaw": "`'success'｜'exception'｜'active'`",
        "default": "",
        "typeDefinition": [
          "success",
          "exception",
          "active"
        ]
      },
      {
        "name": "nzStrokeWidth",
        "inputType": 0,
        "description": "to set the width of the progress bar, unit: `px`",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`8`",
        "pureDefault": "8"
      },
      {
        "name": "nzStrokeWidth",
        "inputType": 0,
        "description": "to set the width of the circular progress bar, unit: percentage of the canvas width",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`6`",
        "pureDefault": "6"
      },
      {
        "name": "nzType",
        "inputType": 0,
        "description": "to set the type",
        "type": "Enum",
        "typeRaw": "`'line'｜'circle'｜'dashboard'`",
        "default": "`'line'`",
        "typeDefinition": [
          "line",
          "circle",
          "dashboard"
        ],
        "pureDefault": "line"
      },
      {
        "name": "nzWidth",
        "inputType": 0,
        "description": "to set the canvas width of the circular progress bar, unit: `px`",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`132`",
        "pureDefault": "132"
      },
      {
        "name": "nzStrokeLinecap",
        "inputType": 0,
        "description": "to set the style of the progress linecap",
        "type": "Enum",
        "typeRaw": "`'round'｜'square'`",
        "default": "`'round'`",
        "typeDefinition": [
          "round",
          "square"
        ],
        "pureDefault": "round"
      },
      {
        "name": "nzStrokeColor",
        "inputType": 0,
        "description": "color of progress bar",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Progress",
    "description": "Display the current progress of an operation flow.",
    "whenToUse": "If it will take a long time to complete an operation, you can use `Progress` to show the current progress and status.",
    "doc": "/components/progress/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/progress"
  },
  {
    "_idx": 21,
    "type": "directive",
    "selector": "nz-radio",
    "types": {},
    "properties": [
      {
        "name": "nzAutoFocus",
        "inputType": 0,
        "description": "get focus when component mounted",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzDisabled",
        "inputType": 0,
        "description": "Disable radio",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "forceInputType": 0
      },
      {
        "name": "ngModel",
        "inputType": 2,
        "description": "Specifies whether the radio is selected, double binding",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzValue",
        "inputType": 0,
        "description": "use with `nz-radio-group`",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "ngModelChange",
        "inputType": 1,
        "description": "The callback function that is triggered when the state changes.",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<boolean>`",
        "default": ""
      },
      {
        "name": "formControlName",
        "inputType": 0,
        "type": "string",
        "typeRaw": "`string`"
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Radio",
    "description": "Radio.",
    "whenToUse": "- Used to select a single state in multiple options.\n- The difference between Select is that Radio is visible to user and can facilitate the comparison of choice. So, when you want to use Radio, option should not be too much.",
    "doc": "/components/radio/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/radio",
    "snippet": "<label __$1>$2</label>"
  },
  {
    "_idx": 21,
    "type": "directive",
    "selector": "nz-radio-button",
    "types": {},
    "properties": [
      {
        "name": "nzAutoFocus",
        "inputType": 0,
        "description": "get focus when component mounted",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzDisabled",
        "inputType": 0,
        "description": "Disable radio",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "forceInputType": 0
      },
      {
        "name": "ngModel",
        "inputType": 2,
        "description": "Specifies whether the radio is selected, double binding",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzValue",
        "inputType": 0,
        "description": "use with `nz-radio-group`",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "ngModelChange",
        "inputType": 1,
        "description": "The callback function that is triggered when the state changes.",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<boolean>`",
        "default": ""
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Radio",
    "description": "Radio.",
    "whenToUse": "- Used to select a single state in multiple options.\n- The difference between Select is that Radio is visible to user and can facilitate the comparison of choice. So, when you want to use Radio, option should not be too much.",
    "doc": "/components/radio/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/radio"
  },
  {
    "_idx": 114,
    "type": "component",
    "selector": "nz-radio-group",
    "types": {},
    "properties": [
      {
        "name": "ngModel",
        "inputType": 2,
        "description": "current selected `nz-radio` value, double binding",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "nzName",
        "inputType": 0,
        "description": "The `name` property of all `input[type=\"radio\"]` children",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "nzDisabled",
        "inputType": 0,
        "description": "Disable all radio buttons",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "forceInputType": 0
      },
      {
        "name": "nzSize",
        "inputType": 0,
        "description": "Size, only on radio style",
        "type": "Enum",
        "typeRaw": "`'large'｜'small'｜'default'`",
        "default": "`'default'`",
        "typeDefinition": [
          "large",
          "small",
          "default"
        ],
        "pureDefault": "default"
      },
      {
        "name": "ngModelChange",
        "inputType": 1,
        "description": "the callback function when current selected `nz-radio` value change",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<string>`",
        "default": ""
      },
      {
        "name": "nzButtonStyle",
        "inputType": 0,
        "description": "style type of radio button",
        "type": "Enum",
        "typeRaw": "`'outline'｜'solid'`",
        "default": "`'outline'`",
        "typeDefinition": [
          "outline",
          "solid"
        ],
        "pureDefault": "outline"
      }
    ],
    "description": "radio group，wrap a group of `nz-radio`。",
    "lib": "ng-zorro-antd",
    "title": "Radio",
    "whenToUse": "- Used to select a single state in multiple options.\n- The difference between Select is that Radio is visible to user and can facilitate the comparison of choice. So, when you want to use Radio, option should not be too much.",
    "doc": "/components/radio/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/radio"
  },
  {
    "_idx": 21,
    "type": "component",
    "selector": "nz-rate",
    "types": {},
    "properties": [
      {
        "name": "nzAllowClear",
        "inputType": 0,
        "description": "whether to allow clear when click again",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "nzAllowHalf",
        "inputType": 0,
        "description": "whether to allow semi selection",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzAutoFocus",
        "inputType": 0,
        "description": "get focus when component mounted",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzCharacter",
        "inputType": 0,
        "description": "custom character of rate",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef<void>`",
        "default": "`<i nz-icon type=\"star\"></i>`",
        "pureDefault": "<i nz-icon type=\"star\"></i>"
      },
      {
        "name": "nzCount",
        "inputType": 0,
        "description": "star count",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`5`",
        "pureDefault": "5"
      },
      {
        "name": "nzDisabled",
        "inputType": 0,
        "description": "read only, unable to interact",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "forceInputType": 0
      },
      {
        "name": "ngModel",
        "inputType": 2,
        "description": "current value , double binding",
        "type": "number",
        "typeRaw": "`number`",
        "default": ""
      },
      {
        "name": "ngModelChange",
        "inputType": 1,
        "description": "callback when select value",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<number>`",
        "default": ""
      },
      {
        "name": "nzOnBlur",
        "inputType": 1,
        "description": "callback when component lose focus",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<FocusEvent>`",
        "default": ""
      },
      {
        "name": "nzOnFocus",
        "inputType": 1,
        "description": "callback when component get focus",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<FocusEvent>`",
        "default": ""
      },
      {
        "name": "nzOnHoverChange",
        "inputType": 1,
        "description": "callback when hover item",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<number>`",
        "default": ""
      },
      {
        "name": "nzOnKeyDown",
        "inputType": 1,
        "description": "callback when keydown on component",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<KeyboardEvent>`",
        "default": ""
      },
      {
        "name": "formControlName",
        "inputType": 0,
        "type": "string",
        "typeRaw": "`string`"
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Rate",
    "description": "Rate component.",
    "whenToUse": "- Show evaluation.\n- A quick rating operation on something.",
    "doc": "/components/rate/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/rate"
  },
  {
    "_idx": 22,
    "type": "component",
    "selector": "nz-select",
    "types": {},
    "properties": [
      {
        "name": "ngModel",
        "inputType": 2,
        "description": "Current selected nz-option value, double binding.",
        "type": "object",
        "typeRaw": "`any｜any[]`",
        "default": ""
      },
      {
        "name": "compareWith",
        "inputType": 0,
        "description": "Same as [SelectControlValueAccessor](https://angular.io/api/forms/SelectControlValueAccessor#caveat-option-selection)",
        "type": "function",
        "typeRaw": "`(o1: any, o2: any) => boolean`",
        "default": "`(o1: any, o2: any) => o1===o2`",
        "pureDefault": "(o1: any, o2: any) => o1===o2"
      },
      {
        "name": "nzAllowClear",
        "inputType": 0,
        "description": "Show clear button.",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzOpen",
        "inputType": 2,
        "description": "dropdown expand state, double binding",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzAutoFocus",
        "inputType": 0,
        "description": "Get focus by default",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzDisabled",
        "inputType": 0,
        "description": "Whether disabled select",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "forceInputType": 0
      },
      {
        "name": "nzDropdownClassName",
        "inputType": 0,
        "description": "className of dropdown menu",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "nzDropdownMatchSelectWidth",
        "inputType": 0,
        "description": "Whether dropdown's with is same with select.",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "nzDropdownStyle",
        "inputType": 0,
        "description": "style of dropdown menu",
        "type": "object",
        "typeRaw": "`object`",
        "default": ""
      },
      {
        "name": "nzServerSearch",
        "inputType": 0,
        "description": "nz-option will not be filtered when set to true",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzFilterOption",
        "inputType": 0,
        "description": "Filter options against it. The function will receive two arguments, `inputValue` and `option`, if the function returns `true`, the option will be included in the filtered set; Otherwise, it will be excluded.",
        "type": "function",
        "typeRaw": "`(input?: string, option?: NzOptionComponent) => boolean;`",
        "default": ""
      },
      {
        "name": "nzMaxMultipleCount",
        "inputType": 0,
        "description": "Max selected option can be selected",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`Infinity`",
        "pureDefault": "Infinity"
      },
      {
        "name": "nzMode",
        "inputType": 0,
        "description": "Set mode of Select",
        "type": "Enum",
        "typeRaw": "`'multiple'｜'tags'｜'default'`",
        "default": "`'default'`",
        "typeDefinition": [
          "multiple",
          "tags",
          "default"
        ],
        "pureDefault": "default"
      },
      {
        "name": "nzNotFoundContent",
        "inputType": 0,
        "description": "Specify content to show when no result matches..",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`'Not Found'`",
        "pureDefault": "Not Found"
      },
      {
        "name": "nzPlaceHolder",
        "inputType": 0,
        "description": "Placeholder of select",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "nzShowSearch",
        "inputType": 0,
        "description": "Whether show search input in single mode.",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzSize",
        "inputType": 0,
        "description": "Size of Select input",
        "type": "Enum",
        "typeRaw": "`'large'｜'small'｜'default'`",
        "default": "`'default'`",
        "typeDefinition": [
          "large",
          "small",
          "default"
        ],
        "pureDefault": "default"
      },
      {
        "name": "ngModelChange",
        "inputType": 1,
        "description": "Current selected nz-option value change callback.",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<any[]>`",
        "default": ""
      },
      {
        "name": "nzOpenChange",
        "inputType": 1,
        "description": "dropdown expand change callback",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<boolean>`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzScrollToBottom",
        "inputType": 1,
        "description": "Called when dropdown scrolls to bottom",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<void>`",
        "default": ""
      },
      {
        "name": "nzOnSearch",
        "inputType": 1,
        "description": "Callback function that is fired when input changed.",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<string>`",
        "default": ""
      },
      {
        "name": "formControlName",
        "inputType": 0,
        "type": "string",
        "typeRaw": "`string`"
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Select",
    "description": "Select component to select value from options.",
    "whenToUse": "- A dropdown menu for displaying choices - an elegant alternative to the native `<select>` element.\n- Utilizing [Radio](/components/radio/en) is recommended when there are fewer total options (less than 5).",
    "doc": "/components/select/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/select"
  },
  {
    "_idx": 339,
    "type": "component",
    "selector": "nz-option",
    "types": {},
    "properties": [
      {
        "name": "nzDisabled",
        "inputType": 0,
        "description": "Disable this option",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "forceInputType": 0
      },
      {
        "name": "nzLabel",
        "inputType": 0,
        "description": "The text show in nz-select and dropdown menu",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "nzValue",
        "inputType": 0,
        "description": "The value passed to ngModel of nz-select",
        "type": "object",
        "typeRaw": "`any `",
        "default": ""
      },
      {
        "name": "nzCustomContent",
        "inputType": 0,
        "description": "Whether custom nz-option content in drodown menu, the ng-content in nz-option will relace nzLabel when it was set to true",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Select",
    "description": "Select component to select value from options.",
    "whenToUse": "- A dropdown menu for displaying choices - an elegant alternative to the native `<select>` element.\n- Utilizing [Radio](/components/radio/en) is recommended when there are fewer total options (less than 5).",
    "doc": "/components/select/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/select"
  },
  {
    "_idx": 418,
    "type": "component",
    "selector": "nz-option-group",
    "types": {},
    "properties": [
      {
        "name": "nzLabel",
        "inputType": 0,
        "description": "Group label",
        "type": "string",
        "typeRaw": "`string｜TemplateRef<void>`",
        "default": ""
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Select",
    "description": "Select component to select value from options.",
    "whenToUse": "- A dropdown menu for displaying choices - an elegant alternative to the native `<select>` element.\n- Utilizing [Radio](/components/radio/en) is recommended when there are fewer total options (less than 5).",
    "doc": "/components/select/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/select"
  },
  {
    "_idx": 21,
    "type": "component",
    "selector": "nz-skeleton",
    "types": {},
    "properties": [
      {
        "name": "nzActive",
        "inputType": 0,
        "description": "Show animation effect",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzAvatar",
        "inputType": 0,
        "description": "Show avatar placeholder",
        "type": "boolean",
        "typeRaw": "`boolean｜NzSkeletonAvatar`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzLoading",
        "inputType": 0,
        "description": "Display the skeleton when `true`",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "",
        "forceInputType": 0
      },
      {
        "name": "nzParagraph",
        "inputType": 0,
        "description": "Show paragraph placeholder",
        "type": "boolean",
        "typeRaw": "`boolean｜NzSkeletonParagraph`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "nzTitle",
        "inputType": 0,
        "description": "Show title placeholder",
        "type": "boolean",
        "typeRaw": "`boolean｜NzSkeletonTitle`",
        "default": "`true`",
        "pureDefault": "true"
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Skeleton",
    "description": "Provide a placeholder at the place which need waiting for loading.",
    "whenToUse": "- When resource need long time loading, like low network speed.\n- The component contains much information, such as List or Card.",
    "doc": "/components/skeleton/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/skeleton"
  },
  {
    "_idx": 12,
    "type": "component",
    "selector": "nz-slider",
    "types": {},
    "properties": [
      {
        "name": "nzDefaultValue",
        "inputType": 0,
        "description": "The default value of slider. When `range` is `false`, use `number`, otherwise, use `[number, number]`",
        "type": "number",
        "typeRaw": "`number｜number[]`",
        "default": "`0｜[0, 0]`",
        "pureDefault": "0｜[0, 0]"
      },
      {
        "name": "nzDisabled",
        "inputType": 0,
        "description": "If true, the slider will not be interactable.",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "forceInputType": 0
      },
      {
        "name": "nzDots",
        "inputType": 0,
        "description": "Whether the thumb can drag over tick only.",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzIncluded",
        "inputType": 0,
        "description": "Make effect when `marks` not null，`true` means containment and `false` means coordinative",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "nzMarks",
        "inputType": 0,
        "description": "Tick mark of Slider, type of key must be `number`, and must in closed interval [min, max] ，each mark can declare its own style.",
        "type": "object",
        "typeRaw": "`object`",
        "default": "{ number: string/HTML } or { number: { style: object, label: string/HTML } }",
        "pureDefault": "{ number: string/HTML } or { number: { style: object, label: string/HTML } }"
      },
      {
        "name": "nzMax",
        "inputType": 0,
        "description": "The maximum value the slider can slide to",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`100`",
        "pureDefault": "100"
      },
      {
        "name": "nzMin",
        "inputType": 0,
        "description": "The minimum value the slider can slide to.",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`0`",
        "pureDefault": "0"
      },
      {
        "name": "nzRange",
        "inputType": 0,
        "description": "dual thumb mode",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzStep",
        "inputType": 0,
        "description": "The granularity the slider can step through values. Must greater than 0, and be divided by (max - min) . When  `marks` no null, `step` can be `null`.",
        "type": "number",
        "typeRaw": "`number｜null`",
        "default": "`1`",
        "pureDefault": "1"
      },
      {
        "name": "nzTipFormatter",
        "inputType": 0,
        "description": "Slider will pass its value to `tipFormatter`, and display its value in Tooltip, and hide Tooltip when return value is null.",
        "type": "function",
        "typeRaw": "`(value: number) => string`",
        "default": ""
      },
      {
        "name": "ngModel",
        "inputType": 2,
        "description": "The value of slider. When `range` is `false`, use `number`, otherwise, use `[number, number]`",
        "type": "number",
        "typeRaw": "`number｜number[]`",
        "default": ""
      },
      {
        "name": "nzVertical",
        "inputType": 0,
        "description": "If true, the slider will be vertical.",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzOnAfterChange",
        "inputType": 1,
        "description": "Fire when `onmouseup` is fired.",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<number[] ｜ number>`",
        "default": ""
      },
      {
        "name": "ngModelChange",
        "inputType": 1,
        "description": "Callback function that is fired when the user changes the slider's value.",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<number[] ｜ number>`",
        "default": ""
      },
      {
        "name": "formControlName",
        "inputType": 0,
        "type": "string",
        "typeRaw": "`string`"
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Slider",
    "description": "A Slider component for displaying current value and intervals in range.",
    "whenToUse": "To input a value in a range.",
    "doc": "/components/slider/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/slider"
  },
  {
    "_idx": 12,
    "type": "component",
    "selector": "nz-spin",
    "types": {},
    "properties": [
      {
        "name": "nzDelay",
        "inputType": 0,
        "description": "specifies a delay in milliseconds for loading state (prevent flush), unit: milliseconds",
        "type": "number",
        "typeRaw": "`number`",
        "default": ""
      },
      {
        "name": "nzIndicator",
        "inputType": 0,
        "description": "React node of the spinning indicator",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzSize",
        "inputType": 0,
        "description": "size of Spin",
        "type": "Enum",
        "typeRaw": "`'large'｜'small'｜'default'`",
        "default": "`'default'`",
        "typeDefinition": [
          "large",
          "small",
          "default"
        ],
        "pureDefault": "default"
      },
      {
        "name": "nzSpinning",
        "inputType": 0,
        "description": "whether Spin is spinning",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true",
        "forceInputType": 0
      },
      {
        "name": "nzTip",
        "inputType": 0,
        "description": "customize description content when Spin has children",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Spin",
    "description": "A spinner for displaying loading state of a page or a section.",
    "whenToUse": "When part of the page is waiting for asynchronous data or during a rendering process, an appropriate loading animation can effectively alleviate users' inquietude.",
    "doc": "/components/spin/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/spin"
  },
  {
    "_idx": 13,
    "type": "component",
    "selector": "nz-steps",
    "types": {},
    "properties": [
      {
        "name": "nzCurrent",
        "inputType": 0,
        "description": "To set the current step, counting from 0. You can overwrite this state by using `nzStatus` of `nz-step`",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`0`",
        "pureDefault": "0"
      },
      {
        "name": "nzDirection",
        "inputType": 0,
        "description": "To specify the direction of the step bar, `horizontal` and `vertical` are currently supported",
        "type": "Enum",
        "typeRaw": "`'vertical'｜'horizontal'`",
        "default": "`horizontal`",
        "typeDefinition": [
          "vertical",
          "horizontal"
        ],
        "pureDefault": "horizontal"
      },
      {
        "name": "nzLabelPlacement",
        "inputType": 0,
        "description": "Support vertical title and description",
        "type": "Enum",
        "typeRaw": "`'vertical'｜'horizontal'`",
        "default": "`horizontal`",
        "typeDefinition": [
          "vertical",
          "horizontal"
        ],
        "pureDefault": "horizontal"
      },
      {
        "name": "nzProgressDot",
        "inputType": 0,
        "description": "Steps with progress dot style, customize the progress dot by setting it with TemplateRef",
        "type": "boolean",
        "typeRaw": "`boolean｜TemplateRef<{ $implicit: TemplateRef<void>, status: string, index: number }>`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzSize",
        "inputType": 0,
        "description": "To specify the size of the step bar, `default` and `small` are currently supported",
        "type": "Enum",
        "typeRaw": "`'small'｜'default'`",
        "default": "`'default'`",
        "typeDefinition": [
          "small",
          "default"
        ],
        "pureDefault": "default"
      },
      {
        "name": "nzStatus",
        "inputType": 0,
        "description": "To specify the status of current step, can be set to one of the following values: `wait` `process` `finish` `error`",
        "type": "Enum",
        "typeRaw": "`'wait'｜'process'｜'finish'｜'error'`",
        "default": "`'process'`",
        "typeDefinition": [
          "wait",
          "process",
          "finish",
          "error"
        ],
        "pureDefault": "process"
      },
      {
        "name": "nzStartIndex",
        "inputType": 0,
        "description": "To specify the starting number",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`0`",
        "pureDefault": "0"
      }
    ],
    "description": "The whole of the step bar.",
    "lib": "ng-zorro-antd",
    "title": "Steps",
    "whenToUse": "When the task is complicated or has a certain sequence in the series of subtasks, we can decompose it into several steps to make things easier.",
    "doc": "/components/steps/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/steps"
  },
  {
    "_idx": 137,
    "type": "component",
    "selector": "nz-step",
    "types": {},
    "properties": [
      {
        "name": "nzDescription",
        "inputType": 0,
        "description": "description of the step, optional property",
        "type": "string",
        "typeRaw": "`string｜TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzIcon",
        "inputType": 0,
        "description": "icon of the step, optional property",
        "type": "string",
        "typeRaw": "`string｜string[]｜Set<string>｜{ [klass: string]: any; };` ｜ `TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzStatus",
        "inputType": 0,
        "description": "to specify the status. It will be automatically set by `nzCurrent` of `nz-steps` if not configured. Optional values are: `wait` `process` `finish` `error`",
        "type": "Enum",
        "typeRaw": "`'wait'｜'process'｜'finish'｜'error'`",
        "default": "`'wait'`",
        "typeDefinition": [
          "wait",
          "process",
          "finish",
          "error"
        ],
        "pureDefault": "wait"
      },
      {
        "name": "nzTitle",
        "inputType": 0,
        "description": "title of the step",
        "type": "string",
        "typeRaw": "`string｜TemplateRef<void>`",
        "default": ""
      }
    ],
    "description": "A single step in the step bar.",
    "lib": "ng-zorro-antd",
    "title": "Steps",
    "whenToUse": "When the task is complicated or has a certain sequence in the series of subtasks, we can decompose it into several steps to make things easier.",
    "doc": "/components/steps/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/steps"
  },
  {
    "_idx": 21,
    "type": "component",
    "selector": "nz-switch",
    "types": {},
    "properties": [
      {
        "name": "ngModel",
        "inputType": 2,
        "description": "determine whether the `nz-switch` is checked, double binding",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzCheckedChildren",
        "inputType": 0,
        "description": "content to be shown when the state is checked",
        "type": "string",
        "typeRaw": "`string｜TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzUnCheckedChildren",
        "inputType": 0,
        "description": "content to be shown when the state is unchecked",
        "type": "string",
        "typeRaw": "`string｜TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzDisabled",
        "inputType": 0,
        "description": "Disable switch",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "forceInputType": 0
      },
      {
        "name": "nzSize",
        "inputType": 0,
        "description": "the size of the `nz-switch`, options: `default` `small`",
        "type": "Enum",
        "typeRaw": "`'small'｜'default'`",
        "default": "`'default'`",
        "typeDefinition": [
          "small",
          "default"
        ],
        "pureDefault": "default"
      },
      {
        "name": "nzLoading",
        "inputType": 0,
        "description": "loading state of switch",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "forceInputType": 0
      },
      {
        "name": "nzControl",
        "inputType": 0,
        "description": "determine whether fully control state by user",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "ngModelChange",
        "inputType": 1,
        "description": "a callback function, can be executed when the checked state is changing",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<boolean>`",
        "default": ""
      },
      {
        "name": "formControlName",
        "inputType": 0,
        "type": "string",
        "typeRaw": "`string`"
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Switch",
    "description": "Switching Selector.",
    "whenToUse": "- If you need to represent the switching between two states or on-off state.\n- The difference between `Switch` and `Checkbox` is that `Switch` will trigger a state change directly when you toggle it, while `Checkbox` is generally used for state marking, which should work in conjunction with submit operation.",
    "doc": "/components/switch/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/switch"
  },
  {
    "_idx": 46,
    "type": "component",
    "selector": "nz-table",
    "types": {},
    "properties": [
      {
        "name": "nzData",
        "inputType": 0,
        "description": "Data record array to be displayed",
        "type": "object",
        "typeRaw": "`any[]`",
        "default": ""
      },
      {
        "name": "nzFrontPagination",
        "inputType": 0,
        "description": "Whether paginate data in front side，should set to `false` if you want to paginate data in server side or display all data in table",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "nzTotal",
        "inputType": 0,
        "description": "Total data count, should set when `nzServerRender` is true",
        "type": "number",
        "typeRaw": "`number`",
        "default": ""
      },
      {
        "name": "nzPageIndex",
        "inputType": 2,
        "description": "pageIndex , double binding",
        "type": "number",
        "typeRaw": "`number`",
        "default": ""
      },
      {
        "name": "nzPageSize",
        "inputType": 2,
        "description": "pageSize, double binding",
        "type": "number",
        "typeRaw": "`number`",
        "default": ""
      },
      {
        "name": "nzShowPagination",
        "inputType": 0,
        "description": "Whether show pagination component in bottom of the table",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "nzBordered",
        "inputType": 0,
        "description": "Whether to show all table borders",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzWidthConfig",
        "inputType": 0,
        "description": "Set col width can not used with `nzWidth` of `th`",
        "type": "Array",
        "typeRaw": "`string[]`",
        "default": ""
      },
      {
        "name": "nzSize",
        "inputType": 0,
        "description": "Size of table",
        "type": "Enum",
        "typeRaw": "`'middle'｜'small'｜'default'`",
        "default": "`'default'`",
        "typeDefinition": [
          "middle",
          "small",
          "default"
        ],
        "pureDefault": "default"
      },
      {
        "name": "nzLoading",
        "inputType": 0,
        "description": "Loading status of table",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "forceInputType": 0
      },
      {
        "name": "nzLoadingDelay",
        "inputType": 0,
        "description": "Specifies a delay in milliseconds for loading state (prevent flush)",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`0`",
        "pureDefault": "0"
      },
      {
        "name": "nzScroll",
        "inputType": 0,
        "description": "Whether table can be scrolled in x/y direction, `x` or `y` can be a string that indicates the width and height of table body",
        "type": "object",
        "typeRaw": "`object`",
        "default": ""
      },
      {
        "name": "nzTitle",
        "inputType": 0,
        "description": "Table title renderer",
        "type": "string",
        "typeRaw": "`string｜TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzFooter",
        "inputType": 0,
        "description": "Table footer renderer",
        "type": "string",
        "typeRaw": "`string｜TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzNoResult",
        "inputType": 0,
        "description": "Custom no result content",
        "type": "string",
        "typeRaw": "`string｜TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzPageSizeOptions",
        "inputType": 0,
        "description": "Specify the sizeChanger options",
        "type": "Array",
        "typeRaw": "`number[]`",
        "default": "`[10, 20, 30, 40]`",
        "pureDefault": "[10, 20, 30, 40]"
      },
      {
        "name": "nzShowQuickJumper",
        "inputType": 0,
        "description": "Determine whether you can jump to pages directly",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzShowSizeChanger",
        "inputType": 0,
        "description": "Determine whether `nzPageSize` can be changed",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzShowTotal",
        "inputType": 0,
        "description": "To display the total number and range, same as Pagination",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef<{ $implicit: number, range: [ number, number ] }>`",
        "default": ""
      },
      {
        "name": "nzHideOnSinglePage",
        "inputType": 0,
        "description": "Whether to hide pager on single page",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzSimple",
        "inputType": 0,
        "description": "whether to use simple mode",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": ""
      },
      {
        "name": "nzPageIndexChange",
        "inputType": 1,
        "description": "pageIndex change callback",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<number>`",
        "default": ""
      },
      {
        "name": "nzPageSizeChange",
        "inputType": 1,
        "description": "pageSize change callback",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<number>`",
        "default": ""
      },
      {
        "name": "nzCurrentPageDataChange",
        "inputType": 1,
        "description": "current pageData change callback",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<any[]>`",
        "default": ""
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Table",
    "description": "A table displays rows of data.",
    "whenToUse": "- To display a collection of structured data.\n- To sort, search, paginate, filter data.",
    "doc": "/components/table/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/table"
  },
  {
    "_idx": 405,
    "type": "component",
    "selector": "th",
    "types": {},
    "properties": [
      {
        "name": "nzShowCheckbox",
        "inputType": 0,
        "description": "Whether add nz-checkbox",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": ""
      },
      {
        "name": "nzDisabled",
        "inputType": 0,
        "description": "Whether disable checkbox",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "",
        "forceInputType": 0
      },
      {
        "name": "nzIndeterminate",
        "inputType": 0,
        "description": "Indeterminate status",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "",
        "forceInputType": 0
      },
      {
        "name": "nzChecked",
        "inputType": 2,
        "description": "Checked status, double binding",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": ""
      },
      {
        "name": "nzCheckedChange",
        "inputType": 1,
        "description": "Checked status change callback",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<boolean>`",
        "default": ""
      },
      {
        "name": "nzShowRowSelection",
        "inputType": 0,
        "description": "Whether show selections",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": ""
      },
      {
        "name": "nzSelections",
        "inputType": 0,
        "description": "Selection options include `text` and `onSelect` function",
        "type": "Array",
        "typeRaw": "`Array<{ text: string, onSelect: any }>`",
        "default": ""
      },
      {
        "name": "nzShowFilter",
        "inputType": 0,
        "description": "Whether show filter",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": ""
      },
      {
        "name": "nzFilters",
        "inputType": 0,
        "description": "Filter options,  `text`, and `value` for callback, `byDefault` to enable filter by default",
        "type": "Array",
        "typeRaw": "`Array<{ text: string; value: any; byDefault?: boolean }>`",
        "default": ""
      },
      {
        "name": "nzFilterMultiple",
        "inputType": 0,
        "description": "Whether filter multiple mode",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "nzFilterChange",
        "inputType": 1,
        "description": "Filter change callback `value`",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<any[]｜any>`",
        "default": ""
      },
      {
        "name": "nzWidth",
        "inputType": 0,
        "description": "Specify the column width, can not used when grouping columns",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "nzLeft",
        "inputType": 0,
        "description": "Left pixels, used to fixed column to left",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "nzRight",
        "inputType": 0,
        "description": "Right pixels, used to fixed column to right",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "nzExpand",
        "inputType": 0,
        "description": "Whether current column include expand icon",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": ""
      }
    ],
    "description": "Checkbox property",
    "lib": "ng-zorro-antd",
    "title": "Table",
    "whenToUse": "- To display a collection of structured data.\n- To sort, search, paginate, filter data.",
    "doc": "/components/table/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/table"
  },
  {
    "_idx": 733,
    "type": "component",
    "selector": "td",
    "types": {},
    "properties": [
      {
        "name": "nzShowCheckbox",
        "inputType": 0,
        "description": "Whether add nz-checkbox",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": ""
      },
      {
        "name": "nzDisabled",
        "inputType": 0,
        "description": "Whether disable checkbox",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "",
        "forceInputType": 0
      },
      {
        "name": "nzIndeterminate",
        "inputType": 0,
        "description": "Indeterminate status",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "",
        "forceInputType": 0
      },
      {
        "name": "nzChecked",
        "inputType": 2,
        "description": "Checked status, double binding",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": ""
      },
      {
        "name": "nzCheckedChange",
        "inputType": 1,
        "description": "Checked status change callback",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<boolean>`",
        "default": ""
      },
      {
        "name": "nzShowExpand",
        "inputType": 0,
        "description": "Whether show expand icon",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": ""
      },
      {
        "name": "nzExpand",
        "inputType": 2,
        "description": "Current expand status, double binding",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": ""
      },
      {
        "name": "nzExpandChange",
        "inputType": 1,
        "description": "Expand status change callback",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<boolean>`",
        "default": ""
      },
      {
        "name": "nzLeft",
        "inputType": 0,
        "description": "Left pixels, used to fixed column to left",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "nzRight",
        "inputType": 0,
        "description": "Right pixels, used to fixed column to right",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "nzIndentSize",
        "inputType": 0,
        "description": "Indent size in pixels of tree data",
        "type": "number",
        "typeRaw": "`number`",
        "default": ""
      }
    ],
    "description": "Checkbox property",
    "lib": "ng-zorro-antd",
    "title": "Table",
    "whenToUse": "- To display a collection of structured data.\n- To sort, search, paginate, filter data.",
    "doc": "/components/table/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/table"
  },
  {
    "_idx": 982,
    "type": "component",
    "selector": "thead",
    "types": {},
    "properties": [
      {
        "name": "nzSingleSort",
        "inputType": 0,
        "description": "Whether single column sort mode",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzSortChange",
        "inputType": 1,
        "description": "sort change callback，should used with `nzSortKey` of `th`",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<{ nzSortKey: string, value: 'descend'｜'ascend'｜null }>`",
        "default": ""
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Table",
    "description": "A table displays rows of data.",
    "whenToUse": "- To display a collection of structured data.\n- To sort, search, paginate, filter data.",
    "doc": "/components/table/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/table"
  },
  {
    "_idx": 1033,
    "type": "component",
    "selector": "tr",
    "types": {},
    "properties": [
      {
        "name": "nzExpand",
        "inputType": 0,
        "description": "Whether expand current row，used with `nzExpand` of `td`",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": ""
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Table",
    "description": "A table displays rows of data.",
    "whenToUse": "- To display a collection of structured data.\n- To sort, search, paginate, filter data.",
    "doc": "/components/table/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/table"
  },
  {
    "_idx": 29,
    "type": "component",
    "selector": "nz-tabset",
    "types": {},
    "properties": [
      {
        "name": "nzSelectedIndex",
        "inputType": 0,
        "description": "Current tab's index",
        "type": "number",
        "typeRaw": "`number`",
        "default": ""
      },
      {
        "name": "nzAnimated",
        "inputType": 0,
        "description": "Whether to change tabs with animation. Only works while `nzTabPosition=\"top\"｜\"bottom\"`",
        "type": "boolean",
        "typeRaw": "`boolean｜{inkBar:boolean, tabPane:boolean}`",
        "default": "`true`, `false` when `type=\"card\"`",
        "pureDefault": "true`, `false` when `type=\"card"
      },
      {
        "name": "nzSize",
        "inputType": 0,
        "description": "preset tab bar size",
        "type": "Enum",
        "typeRaw": "`'large'｜'small'｜'default'`",
        "default": "`'default'`",
        "typeDefinition": [
          "large",
          "small",
          "default"
        ],
        "pureDefault": "default"
      },
      {
        "name": "nzTabBarExtraContent",
        "inputType": 0,
        "description": "Extra content in tab bar",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzTabBarStyle",
        "inputType": 0,
        "description": "Tab bar style object",
        "type": "object",
        "typeRaw": "`object`",
        "default": ""
      },
      {
        "name": "nzTabPosition",
        "inputType": 0,
        "description": "Position of tabs",
        "type": "Enum",
        "typeRaw": "`'top'｜'right'｜'bottom'｜'left'`",
        "default": "`'top'`",
        "typeDefinition": [
          "top",
          "right",
          "bottom",
          "left"
        ],
        "pureDefault": "top"
      },
      {
        "name": "nzType",
        "inputType": 0,
        "description": "Basic style of tabs",
        "type": "Enum",
        "typeRaw": "`'line'｜'card'`",
        "default": "`'line'`",
        "typeDefinition": [
          "line",
          "card"
        ],
        "pureDefault": "line"
      },
      {
        "name": "nzTabBarGutter",
        "inputType": 0,
        "description": "The gap between tabs",
        "type": "number",
        "typeRaw": "`number`",
        "default": ""
      },
      {
        "name": "nzHideAll",
        "inputType": 0,
        "description": "Whether hide all tabs",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzShowPagination",
        "inputType": 0,
        "description": "Whether show pre or next button when exceed display area",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "nzSelectedIndexChange",
        "inputType": 1,
        "description": "Current tab's index change callback",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<number>`",
        "default": ""
      },
      {
        "name": "nzSelectChange",
        "inputType": 1,
        "description": "Current tab's change callback",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<{nzSelectedIndex: number,tab: NzTabComponent}>`",
        "default": ""
      },
      {
        "name": "nzOnNextClick",
        "inputType": 1,
        "description": "Callback executed when next button is clicked",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<void>`",
        "default": ""
      },
      {
        "name": "nzOnPrevClick",
        "inputType": 1,
        "description": "Callback executed when prev button is clicked",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<void>`",
        "default": ""
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Tabs",
    "description": "Tabs make it easy to switch between different views.",
    "whenToUse": "Ant Design has 3 types of Tabs for different situations.",
    "doc": "/components/tabs/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/tabs"
  },
  {
    "_idx": 248,
    "type": "component",
    "selector": "nz-tab",
    "types": {},
    "properties": [
      {
        "name": "nzTitle",
        "inputType": 0,
        "description": "Show text in tab's head",
        "type": "string",
        "typeRaw": "`string｜TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzForceRender",
        "inputType": 0,
        "description": "Forced render of content in tabs, not lazy render after clicking on tabs",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzDisabled",
        "inputType": 0,
        "description": "tab disable",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "",
        "forceInputType": 0
      },
      {
        "name": "nzClick",
        "inputType": 1,
        "description": "title click callback",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<void>`",
        "default": ""
      },
      {
        "name": "nzSelect",
        "inputType": 1,
        "description": "title select callback",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<void>`",
        "default": ""
      },
      {
        "name": "nzDeselect",
        "inputType": 1,
        "description": "title deselect callback",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<void>`",
        "default": ""
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Tabs",
    "description": "Tabs make it easy to switch between different views.",
    "whenToUse": "Ant Design has 3 types of Tabs for different situations.",
    "doc": "/components/tabs/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/tabs"
  },
  {
    "_idx": 13,
    "type": "component",
    "selector": "nz-time-picker",
    "types": {},
    "properties": [
      {
        "name": "ngModel",
        "inputType": 2,
        "description": "to set time",
        "type": "object",
        "typeRaw": "`Date`",
        "default": ""
      },
      {
        "name": "nzAddon",
        "inputType": 0,
        "description": "called from timepicker panel to render some addon to its bottom",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzAllowEmpty",
        "inputType": 0,
        "description": "allow clearing text",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "nzAutoFocus",
        "inputType": 0,
        "description": "get focus when component mounted",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzClearText",
        "inputType": 0,
        "description": "clear tooltip of icon",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`'clear'`",
        "pureDefault": "clear"
      },
      {
        "name": "nzDefaultOpenValue",
        "inputType": 0,
        "description": "default open panel value",
        "type": "object",
        "typeRaw": "`Date`",
        "default": "`new Date()`",
        "pureDefault": "new Date()"
      },
      {
        "name": "nzDisabled",
        "inputType": 0,
        "description": "determine whether the TimePicker is disabled",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "forceInputType": 0
      },
      {
        "name": "nzDisabledHours",
        "inputType": 0,
        "description": "to specify the hours that cannot be selected",
        "type": "function",
        "typeRaw": "`() => number[]`",
        "default": ""
      },
      {
        "name": "nzDisabledMinutes",
        "inputType": 0,
        "description": "to specify the minutes that cannot be selected",
        "type": "function",
        "typeRaw": "`(hour: number) => number[]`",
        "default": ""
      },
      {
        "name": "nzDisabledSeconds",
        "inputType": 0,
        "description": "to specify the seconds that cannot be selected",
        "type": "function",
        "typeRaw": "`(hour: number, minute: number) => number[]`",
        "default": ""
      },
      {
        "name": "nzFormat",
        "inputType": 0,
        "description": "to set the time format",
        "type": "string",
        "typeRaw": "[DatePipe](https://angular.io/api/common/DatePipe)",
        "default": "`\"HH:mm:ss\"`",
        "pureDefault": "HH:mm:ss"
      },
      {
        "name": "nzHideDisabledOptions",
        "inputType": 0,
        "description": "hide the options that can not be selected",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzHourStep",
        "inputType": 0,
        "description": "interval between hours in picker",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`1`",
        "pureDefault": "1"
      },
      {
        "name": "nzMinuteStep",
        "inputType": 0,
        "description": "interval between minutes in picker",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`1`",
        "pureDefault": "1"
      },
      {
        "name": "nzSecondStep",
        "inputType": 0,
        "description": "interval between seconds in picker",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`1`",
        "pureDefault": "1"
      },
      {
        "name": "nzOpen",
        "inputType": 2,
        "description": "whether to popup panel, double binding",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzPlaceHolder",
        "inputType": 0,
        "description": "display when there's no value",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`\"Select a time\"`",
        "pureDefault": "Select a time"
      },
      {
        "name": "nzPopupClassName",
        "inputType": 0,
        "description": "className of panel",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`''`",
        "pureDefault": ""
      },
      {
        "name": "ngModelChange",
        "inputType": 1,
        "description": "a callback function, can be executed when the selected time is changing",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<Date>`",
        "default": ""
      },
      {
        "name": "nzOpenChange",
        "inputType": 1,
        "description": "a callback function which will be called while panel opening/closing",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<boolean>`",
        "default": ""
      },
      {
        "name": "formControlName",
        "inputType": 0,
        "type": "string",
        "typeRaw": "`string`"
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "TimePicker",
    "description": "To select/input a time.",
    "whenToUse": "By clicking the input box, you can select a time from a popup panel.",
    "doc": "/components/time-picker/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/time-picker"
  },
  {
    "_idx": 21,
    "type": "component",
    "selector": "nz-alert",
    "types": {},
    "properties": [
      {
        "name": "nzBanner",
        "inputType": 0,
        "description": "Whether to show as banner",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzClosable",
        "inputType": 0,
        "description": "Whether Alert can be closed",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": ""
      },
      {
        "name": "nzCloseText",
        "inputType": 0,
        "description": "Close text to show",
        "type": "string",
        "typeRaw": "`string｜TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzDescription",
        "inputType": 0,
        "description": "Additional content of Alert",
        "type": "string",
        "typeRaw": "`string｜TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzMessage",
        "inputType": 0,
        "description": "Content of Alert",
        "type": "string",
        "typeRaw": "`string｜TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzShowIcon",
        "inputType": 0,
        "description": "Whether to show icon, in `nzBanner` mode default is `true`",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzIconType",
        "inputType": 0,
        "description": "Icon type, effective when `nzShowIcon` is `true`",
        "type": "string",
        "typeRaw": "`string｜string[]｜Set<string>｜{ [klass: string]: any; }`",
        "default": ""
      },
      {
        "name": "nzType",
        "inputType": 0,
        "description": "Type of Alert styles, in `nzBanner` mode default is `'warning'`",
        "type": "Enum",
        "typeRaw": "`'success'｜'info'｜'warning'｜'error'`",
        "default": "`'info'`",
        "typeDefinition": [
          "success",
          "info",
          "warning",
          "error"
        ],
        "pureDefault": "info"
      },
      {
        "name": "nzOnClose",
        "inputType": 1,
        "description": "Callback when Alert is closed",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<void>`",
        "default": ""
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Alert",
    "description": "Alert component for feedback.",
    "whenToUse": "- When you need to show alert messages to users.\n- When you need a persistent static container which is closable by user actions.",
    "doc": "/components/alert/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/alert"
  },
  {
    "_idx": 12,
    "type": "component",
    "selector": "nz-anchor",
    "types": {},
    "properties": [
      {
        "name": "nzAffix",
        "inputType": 0,
        "description": "Fixed mode of Anchor",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "nzBounds",
        "inputType": 0,
        "description": "Bounding distance of anchor area, unit: px",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`5`",
        "pureDefault": "5"
      },
      {
        "name": "nzOffsetBottom",
        "inputType": 0,
        "description": "Pixels to offset from bottom when calculating position of scroll",
        "type": "number",
        "typeRaw": "`number`",
        "default": ""
      },
      {
        "name": "nzOffsetTop",
        "inputType": 0,
        "description": "Pixels to offset from top when calculating position of scroll",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`0`",
        "pureDefault": "0"
      },
      {
        "name": "nzShowInkInFixed",
        "inputType": 0,
        "description": "Whether show ink-balls in Fixed mode",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzTarget",
        "inputType": 0,
        "description": "Scrolling container",
        "type": "string",
        "typeRaw": "`string｜HTMLElement`",
        "default": "`window`",
        "pureDefault": "window"
      },
      {
        "name": "nzClick",
        "inputType": 1,
        "description": "Click of Anchor item",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<string>`",
        "default": ""
      },
      {
        "name": "nzScroll",
        "inputType": 1,
        "description": "The scroll function that is triggered when scrolling to an anchor.",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<NzAnchorLinkComponent>`",
        "default": ""
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Anchor",
    "description": "Hyperlinks to scroll on one page.",
    "whenToUse": "For displaying anchor hyperlinks on page and jumping between them.",
    "doc": "/components/anchor/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/anchor"
  },
  {
    "_idx": 147,
    "type": "component",
    "selector": "nz-link",
    "types": {},
    "properties": [
      {
        "name": "nzHref",
        "inputType": 0,
        "description": "target of hyperlink",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "nzTitle",
        "inputType": 0,
        "description": "content of  hyperlink",
        "type": "string",
        "typeRaw": "`string｜TemplateRef<void>`",
        "default": ""
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Anchor",
    "description": "Hyperlinks to scroll on one page.",
    "whenToUse": "For displaying anchor hyperlinks on page and jumping between them.",
    "doc": "/components/anchor/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/anchor"
  },
  {
    "_idx": 15,
    "type": "component",
    "selector": "nz-transfer",
    "types": {},
    "properties": [
      {
        "name": "nzDataSource",
        "inputType": 0,
        "description": "Used for setting the source data. Except the elements whose keys are `direction: 'right'` prop.",
        "type": "Array",
        "typeRaw": "`TransferItem[]`",
        "default": "`[]`",
        "pureDefault": "[]"
      },
      {
        "name": "nzDisabled",
        "inputType": 0,
        "description": "Whether disabled transfer",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "forceInputType": 0
      },
      {
        "name": "nzTitles",
        "inputType": 0,
        "description": "A set of titles that are sorted from left to right.",
        "type": "Array",
        "typeRaw": "`string[]`",
        "default": "`['', '']`",
        "pureDefault": "['', '']"
      },
      {
        "name": "nzOperations",
        "inputType": 0,
        "description": "A set of operations that are sorted from bottom to top.",
        "type": "Array",
        "typeRaw": "`string[]`",
        "default": "`['', '']`",
        "pureDefault": "['', '']"
      },
      {
        "name": "nzListStyle",
        "inputType": 0,
        "description": "A custom CSS style used for rendering the transfer columns. equal `ngStyle`",
        "type": "object",
        "typeRaw": "`object`",
        "default": ""
      },
      {
        "name": "nzItemUnit",
        "inputType": 0,
        "description": "single unit",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`'item'`",
        "pureDefault": "item"
      },
      {
        "name": "nzItemsUnit",
        "inputType": 0,
        "description": "multiple unit",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`'items'`",
        "pureDefault": "items"
      },
      {
        "name": "nzRender",
        "inputType": 0,
        "description": "The function to generate the item shown on a column. please refer to the case.",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzFooter",
        "inputType": 0,
        "description": "A function used for rendering the footer. please refer to the case.",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "nzShowSearch",
        "inputType": 0,
        "description": "If included, a search box is shown on each column.",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzFilterOption",
        "inputType": 0,
        "description": "A function to determine whether an item should show in search result list",
        "type": "function",
        "typeRaw": "`(inputValue: string, item: TransferItem) => boolean`",
        "default": ""
      },
      {
        "name": "nzSearchPlaceholder",
        "inputType": 0,
        "description": "The hint text of the search box.",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`'Search here'`",
        "pureDefault": "Search here"
      },
      {
        "name": "nzNotFoundContent",
        "inputType": 0,
        "description": "Text to display when a column is empty.",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`'The list is empty'`",
        "pureDefault": "The list is empty"
      },
      {
        "name": "nzCanMove",
        "inputType": 0,
        "description": "Two verification when transfer choice box. please refer to the case.",
        "type": "function",
        "typeRaw": "`(arg: TransferCanMove) => Observable<TransferItem[]>`",
        "default": ""
      },
      {
        "name": "nzChange",
        "inputType": 1,
        "description": "A callback function that is executed when the transfer between columns is complete.",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<TransferChange>`",
        "default": ""
      },
      {
        "name": "nzSearchChange",
        "inputType": 1,
        "description": "A callback function which is executed when search field are changed",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<TransferSearchChange>`",
        "default": ""
      },
      {
        "name": "nzSelectChange",
        "inputType": 1,
        "description": "A callback function which is executed when selected items are changed.",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<TransferSearchChange>`",
        "default": ""
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Transfer",
    "description": "Double column transfer choice box.",
    "whenToUse": "Transfer the elements between two columns in an intuitive and efficient way.",
    "doc": "/components/transfer/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/transfer"
  },
  {
    "_idx": 9,
    "type": "component",
    "selector": "nz-tree",
    "types": {},
    "properties": [
      {
        "name": "ngModel",
        "inputType": 2,
        "description": "Tree data(nzData instead)",
        "type": "Array",
        "typeRaw": "`NzTreeNode[]`",
        "default": "`[]`",
        "pureDefault": "[]"
      },
      {
        "name": "nzData",
        "inputType": 0,
        "description": "Tree data (Reference NzTreeNode)",
        "type": "Array",
        "typeRaw": "`NzTreeNodeOptions[]｜NzTreeNode[]`",
        "default": "`[]`",
        "pureDefault": "[]"
      },
      {
        "name": "nzCheckable",
        "inputType": 0,
        "description": "Adds a Checkbox before the treeNodes",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzShowExpand",
        "inputType": 0,
        "description": "Show a Expand Icon before the treeNodes",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "nzShowLine",
        "inputType": 0,
        "description": "Shows a connecting line",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzShowIcon",
        "inputType": 0,
        "description": "Shows the icon before a TreeNode's title. There is no default style",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzAsyncData",
        "inputType": 0,
        "description": "Load data asynchronously (should be used with NzTreeNode.addChildren(...))",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzDraggable",
        "inputType": 0,
        "description": "Specifies whether this Tree is draggable (IE > 8)",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzMultiple",
        "inputType": 0,
        "description": "Allows selecting multiple treeNodes",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzCheckStrictly",
        "inputType": 0,
        "description": "Check treeNode precisely; parent treeNode and children treeNodes are not associated",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzExpandAll",
        "inputType": 0,
        "description": "Whether to expand all treeNodes",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzExpandedKeys",
        "inputType": 0,
        "description": "Specify the keys of the default expanded treeNodes, two-way binding",
        "type": "Array",
        "typeRaw": "`string[]`",
        "default": "`[]`",
        "pureDefault": "[]"
      },
      {
        "name": "nzCheckedKeys",
        "inputType": 0,
        "description": "Specifies the keys of the default checked treeNodes, two-way binding",
        "type": "Array",
        "typeRaw": "`string[]`",
        "default": "`[]`",
        "pureDefault": "[]"
      },
      {
        "name": "nzSelectedKeys",
        "inputType": 0,
        "description": "Specifies the keys of the default selected treeNodes, two-way binding",
        "type": "Array",
        "typeRaw": "`string[]`",
        "default": "`[]`",
        "pureDefault": "[]"
      },
      {
        "name": "nzSearchValue",
        "inputType": 0,
        "description": "Filter (highlight) treeNodes (see demo `Searchable`), two-way binding",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`null`",
        "pureDefault": "null"
      },
      {
        "name": "nzBeforeDrop",
        "inputType": 0,
        "description": "Drop before the second check, allowing the user to decide whether to allow placement",
        "type": "function",
        "typeRaw": "`(confirm: NzFormatBeforeDropEvent) => Observable<boolean>`",
        "default": ""
      },
      {
        "name": "nzClick",
        "inputType": 1,
        "description": "Callback function for when the user clicks a treeNode",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<NzFormatEmitEvent>`",
        "default": ""
      },
      {
        "name": "nzDblClick",
        "inputType": 1,
        "description": "Callback function for when the user double clicks a treeNode",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<NzFormatEmitEvent>`",
        "default": ""
      },
      {
        "name": "nzContextMenu",
        "inputType": 1,
        "description": "Callback function for when the user right clicks a treeNode",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<NzFormatEmitEvent>`",
        "default": ""
      },
      {
        "name": "nzCheckBoxChange",
        "inputType": 1,
        "description": "Callback function for when user clicks the Checkbox",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<NzFormatEmitEvent>`",
        "default": ""
      },
      {
        "name": "nzExpandChange",
        "inputType": 1,
        "description": "Callback function for when a treeNode is expanded or collapsed",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<NzFormatEmitEvent>`",
        "default": ""
      },
      {
        "name": "nzSearchValueChange",
        "inputType": 1,
        "description": "Callback function for when filter treeNodes(used with nzSearchValue)",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<NzFormatEmitEvent>`",
        "default": ""
      },
      {
        "name": "nzOnDragStart",
        "inputType": 1,
        "description": "Callback function for when the onDragStart event occurs",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<NzFormatEmitEvent>`",
        "default": ""
      },
      {
        "name": "nzOnDragEnter",
        "inputType": 1,
        "description": "Callback function for when the onDragEnter event occurs",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<NzFormatEmitEvent>`",
        "default": ""
      },
      {
        "name": "nzOnDragOver",
        "inputType": 1,
        "description": "Callback function for when the onDragOver event occurs",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<NzFormatEmitEvent>`",
        "default": ""
      },
      {
        "name": "nzOnDragLeave",
        "inputType": 1,
        "description": "Callback function for when the onDragLeave event occurs",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<NzFormatEmitEvent>`",
        "default": ""
      },
      {
        "name": "nzOnDrop",
        "inputType": 1,
        "description": "Callback function for when the onDrop event occurs",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<NzFormatEmitEvent>`",
        "default": ""
      },
      {
        "name": "nzOnDragEnd",
        "inputType": 1,
        "description": "Callback function for when the onDragEnd event occurs",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<NzFormatEmitEvent>`",
        "default": ""
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Tree",
    "description": "When To Use",
    "whenToUse": "Almost anything can be represented in a tree structure. Examples include directories, organization hierarchies, biological classifications, countries, etc. The `Tree` component is a way of representing the hierarchical relationship between these things. You can also  expand, collapse, and select a treeNode within a `Tree`.",
    "doc": "/components/tree/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/tree"
  },
  {
    "_idx": 12,
    "type": "component",
    "selector": "nz-tree-select",
    "types": {},
    "properties": [
      {
        "name": "nzAllowClear",
        "inputType": 0,
        "description": "Whether allow clear",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzPlaceHolder",
        "inputType": 0,
        "description": "Placeholder of the select input",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "nzDisabled",
        "inputType": 0,
        "description": "Disabled or not",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "forceInputType": 0
      },
      {
        "name": "nzShowSearch",
        "inputType": 0,
        "description": "Whether to display a search input in the dropdown menu(valid only in the single mode)",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzNotFoundContent",
        "inputType": 0,
        "description": "Specify content to show when no result matches.",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "nzDropdownMatchSelectWidth",
        "inputType": 0,
        "description": "Determine whether the dropdown menu and the select input are the same width",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "nzDropdownStyle",
        "inputType": 0,
        "description": "To set the style of the dropdown menu",
        "type": "object",
        "typeRaw": "`object`",
        "default": ""
      },
      {
        "name": "nzMultiple",
        "inputType": 0,
        "description": "Support multiple or not, will be `true` when enable `nzCheckable`.",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzSize",
        "inputType": 0,
        "description": "To set the size of the select input",
        "type": "Enum",
        "typeRaw": "`'large'｜'small'｜'default'`",
        "default": "`'default'`",
        "typeDefinition": [
          "large",
          "small",
          "default"
        ],
        "pureDefault": "default"
      },
      {
        "name": "nzCheckable",
        "inputType": 0,
        "description": "Whether to show checkbox on the treeNodes",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzShowExpand",
        "inputType": 0,
        "description": "Show a Expand Icon before the treeNodes",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "nzShowLine",
        "inputType": 0,
        "description": "Shows a connecting line",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzAsyncData",
        "inputType": 0,
        "description": "Load data asynchronously (should be used with NzTreeNode.addChildren(...))",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzNodes",
        "inputType": 0,
        "description": "Data of the treeNodes",
        "type": "Array",
        "typeRaw": "`NzTreeNode[]`",
        "default": "`[]`",
        "pureDefault": "[]"
      },
      {
        "name": "nzDefaultExpandAll",
        "inputType": 0,
        "description": "Whether to expand all treeNodes by default",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzDefaultExpandedKeys",
        "inputType": 0,
        "description": "Default expanded treeNodes",
        "type": "Array",
        "typeRaw": "`string[]`",
        "default": ""
      },
      {
        "name": "nzDisplayWith",
        "inputType": 0,
        "description": "How to display the selected node value in the trigger",
        "type": "function",
        "typeRaw": "`(node: NzTreeNode) => string`",
        "default": "`(node: NzTreeNode) => node.title`",
        "pureDefault": "(node: NzTreeNode) => node.title"
      },
      {
        "name": "nzExpandChange",
        "inputType": 1,
        "description": "Callback function for when a treeNode is expanded or collapsed",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<NzFormatEmitEvent>`",
        "default": ""
      },
      {
        "name": "formControlName",
        "inputType": 0,
        "type": "string",
        "typeRaw": "`string`"
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "TreeSelect",
    "description": "Tree selection control.",
    "whenToUse": "`TreeSelect` is similar to `Select`, but the values are provided in a tree like structure.\nAny data whose entries are defined in a hierarchical manner is fit to use this control. Examples of such case may include a corporate hierarchy, a directory structure, and so on.",
    "doc": "/components/tree-select/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/tree-select"
  },
  {
    "_idx": 34,
    "type": "component",
    "selector": "nz-upload",
    "types": {},
    "properties": [
      {
        "name": "nzAccept",
        "inputType": 0,
        "description": "File types that can be accepted. See [input accept Attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-accept)",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "nzAction",
        "inputType": 0,
        "description": "Required. Uploading URL",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "nzDirectory",
        "inputType": 0,
        "description": "support upload whole directory ([caniuse](https://caniuse.com/#feat=input-file-directory))",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzBeforeUpload",
        "inputType": 0,
        "description": "Hook function which will be executed before uploading. Uploading will be stopped with `false` or a Observable. **Warning：this function is not supported in IE9**. NOTICE: Muse be use `=>` to define the method.",
        "type": "function",
        "typeRaw": "`(file: UploadFile, fileList: UploadFile[]) => boolean｜Observable<boolean>`",
        "default": ""
      },
      {
        "name": "nzCustomRequest",
        "inputType": 0,
        "description": "override for the default xhr behavior allowing for additional customization and ability to implement your own XMLHttpRequest. NOTICE: Muse be use `=>` to define the method.",
        "type": "function",
        "typeRaw": "`(item) => Subscription`",
        "default": ""
      },
      {
        "name": "nzData",
        "inputType": 0,
        "description": "Uploading params or function which can return uploading params. NOTICE: Muse be use `=>` to define the method.",
        "type": "object",
        "typeRaw": "`Object｜((file: UploadFile) => Object)`",
        "default": ""
      },
      {
        "name": "nzDisabled",
        "inputType": 0,
        "description": "disable upload button",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "forceInputType": 0
      },
      {
        "name": "nzFileList",
        "inputType": 0,
        "description": "List of files, two-way data-binding",
        "type": "Array",
        "typeRaw": "`UploadFile[]`",
        "default": ""
      },
      {
        "name": "nzLimit",
        "inputType": 0,
        "description": "limit single upload count when `nzMultiple` has opened. `0` unlimited",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`0`",
        "pureDefault": "0"
      },
      {
        "name": "nzSize",
        "inputType": 0,
        "description": "limit file size (KB). `0` unlimited",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`0`",
        "pureDefault": "0"
      },
      {
        "name": "nzFileType",
        "inputType": 0,
        "description": "limit file type, e.g: `image/png,image/jpeg,image/gif,image/bmp`",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "nzFilter",
        "inputType": 0,
        "description": "Custom filter when choosed file",
        "type": "Array",
        "typeRaw": "`UploadFilter[]`",
        "default": ""
      },
      {
        "name": "nzHeaders",
        "inputType": 0,
        "description": "Set request headers, valid above IE10. NOTICE: Muse be use `=>` to define the method.",
        "type": "object",
        "typeRaw": "`Object｜((file: UploadFile) => Object)`",
        "default": ""
      },
      {
        "name": "nzListType",
        "inputType": 0,
        "description": "Built-in stylesheets, support for three types: `text`, `picture` or `picture-card`",
        "type": "Enum",
        "typeRaw": "`'text'｜'picture'｜'picture-card'`",
        "default": "`'text'`",
        "typeDefinition": [
          "text",
          "picture",
          "picture-card"
        ],
        "pureDefault": "text"
      },
      {
        "name": "nzMultiple",
        "inputType": 0,
        "description": "Whether to support selected multiple file. `IE10+` supported. You can select multiple files with CTRL holding down while multiple is set to be true",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzName",
        "inputType": 0,
        "description": "The name of uploading file",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`'file'`",
        "pureDefault": "file"
      },
      {
        "name": "nzShowUploadList",
        "inputType": 0,
        "description": "Whether to show default upload list, could be an object to specify `showPreviewIcon` and `showRemoveIcon` individually",
        "type": "boolean",
        "typeRaw": "`boolean｜{ showPreviewIcon?: boolean, showRemoveIcon?: boolean }`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "nzShowButton",
        "inputType": 0,
        "description": "Show upload button",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "nzWithCredentials",
        "inputType": 0,
        "description": "ajax upload with cookie sent",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzOpenFileDialogOnClick",
        "inputType": 0,
        "description": "click open file dialog",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "nzPreview",
        "inputType": 0,
        "description": "A callback function, will be executed when file link or preview icon is clicked. NOTICE: Muse be use `=>` to define the method.",
        "type": "function",
        "typeRaw": "`(file: UploadFile) => void`",
        "default": ""
      },
      {
        "name": "nzRemove",
        "inputType": 0,
        "description": "A callback function, will be executed when removing file button is clicked, remove event will be prevented when return value is `false` or a Observable. NOTICE: Muse be use `=>` to define the method.",
        "type": "function",
        "typeRaw": "`(file: UploadFile) => boolean｜Observable<boolean>`",
        "default": ""
      },
      {
        "name": "nzChange",
        "inputType": 1,
        "description": "A callback function, can be executed when uploading state is changing",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<UploadChangeParam>`",
        "default": ""
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Upload",
    "description": "Upload file by selecting or dragging.",
    "whenToUse": "Uploading is the process of publishing information (web pages, text, pictures, video, etc.) to a remote server via a web page or upload tool.",
    "doc": "/components/upload/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/upload"
  },
  {
    "_idx": 6,
    "type": "component",
    "selector": "avatar-list",
    "types": {},
    "properties": [
      {
        "name": "size",
        "inputType": 0,
        "description": "size of list",
        "type": "Enum",
        "typeRaw": "`'large','small','mini','default'`",
        "default": "`'default'`",
        "typeDefinition": [
          "large",
          "small",
          "mini",
          "default"
        ],
        "pureDefault": "default"
      },
      {
        "name": "maxLength",
        "inputType": 0,
        "description": "max items to show",
        "type": "number",
        "typeRaw": "`number`",
        "default": ""
      },
      {
        "name": "excessItemsStyle",
        "inputType": 0,
        "description": "the excess item style",
        "type": "object",
        "typeRaw": "`{ [key: string]: string }`",
        "default": ""
      }
    ],
    "lib": "@delon/abc",
    "title": "AvatarList",
    "description": "A list of user's avatar for project or group member list frequently. If a large or small avatar-list is desired, set the `size` property to either `large` or `small` and `mini` respectively. Omit the `size` property for a avatar-list with the default size.",
    "whenToUse": "",
    "doc": "https://ng-alain.com/components/avatar-list/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/abc/avatar-list"
  },
  {
    "_idx": 71,
    "type": "component",
    "selector": "avatar-list-item",
    "types": {},
    "properties": [
      {
        "name": "tips",
        "inputType": 0,
        "description": "title tips for avatar item",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "src",
        "inputType": 0,
        "description": "the address of the image for an image avatar",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "text",
        "inputType": 0,
        "description": "text for avatar item",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "icon",
        "inputType": 0,
        "description": "icon for avatar item",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      }
    ],
    "lib": "@delon/abc",
    "title": "AvatarList",
    "description": "A list of user's avatar for project or group member list frequently. If a large or small avatar-list is desired, set the `size` property to either `large` or `small` and `mini` respectively. Omit the `size` property for a avatar-list with the default size.",
    "whenToUse": "",
    "doc": "https://ng-alain.com/components/avatar-list/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/abc/avatar-list"
  },
  {
    "_idx": 10,
    "type": "component",
    "selector": "count-down",
    "types": {},
    "properties": [
      {
        "name": "target",
        "inputType": 0,
        "description": "目标时间，`number` 表示秒",
        "type": "number",
        "typeRaw": "`number | Date`",
        "default": ""
      },
      {
        "name": "config",
        "inputType": 0,
        "description": "完整 [Config](https://github.com/cipchk/ngx-countdown#config) 参数",
        "type": "object",
        "typeRaw": "`object`",
        "default": ""
      },
      {
        "name": "begin",
        "inputType": 1,
        "description": "开始时触发",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<void>`",
        "default": ""
      },
      {
        "name": "notify",
        "inputType": 1,
        "description": "通知时触发，需要在 `config` 中配置 notify",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<number>`",
        "default": ""
      },
      {
        "name": "end",
        "inputType": 1,
        "description": "结束时触发",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<void>`",
        "default": ""
      }
    ],
    "lib": "@delon/abc",
    "title": "倒计时",
    "description": "倒计时组件，依赖 [ngx-countdown](https://github.com/cipchk/ngx-countdown)。",
    "whenToUse": "",
    "doc": "https://ng-alain.com/components/count-down/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/abc/count-down"
  },
  {
    "_idx": 6,
    "type": "component",
    "selector": "range-picker",
    "types": {},
    "properties": [
      {
        "name": "ngModel",
        "inputType": 2,
        "description": "Start date, start and end values at the same time",
        "type": "object",
        "typeRaw": "`Date`",
        "default": ""
      },
      {
        "name": "ngModelEnd",
        "inputType": 2,
        "description": "End date, start and end values at the same time",
        "type": "object",
        "typeRaw": "`Date`",
        "default": ""
      },
      {
        "name": "nzAllowClear",
        "inputType": 0,
        "description": "Whether to show clear button",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "nzAutoFocus",
        "inputType": 0,
        "description": "get focus when component mounted",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzClassName",
        "inputType": 0,
        "description": "picker className",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`''`",
        "pureDefault": ""
      },
      {
        "name": "nzDateRender",
        "inputType": 0,
        "description": "custom rendering function for date cells (Not support by month-picker/year-picker)",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef<Date>｜string｜((d: Date) => TemplateRef<Date>｜string)`",
        "default": ""
      },
      {
        "name": "nzDisabled",
        "inputType": 0,
        "description": "determine whether the nz-date-picker is disabled",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "forceInputType": 0
      },
      {
        "name": "nzDisabledDate",
        "inputType": 0,
        "description": "specify the date that cannot be selected (Not support by year-picker)",
        "type": "function",
        "typeRaw": "`(current: Date) => boolean`",
        "default": ""
      },
      {
        "name": "nzLocale",
        "inputType": 0,
        "description": "localization configuration",
        "type": "object",
        "typeRaw": "`object`",
        "default": "[default](https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json)",
        "pureDefault": "[default](https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json)"
      },
      {
        "name": "nzOpen",
        "inputType": 0,
        "description": "open state of picker",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": ""
      },
      {
        "name": "nzPopupStyle",
        "inputType": 0,
        "description": "to customize the style of the popup calendar",
        "type": "object",
        "typeRaw": "`object`",
        "default": "`{}`",
        "pureDefault": "{}"
      },
      {
        "name": "nzDropdownClassName",
        "inputType": 0,
        "description": "to customize the className of the popup calendar",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "nzSize",
        "inputType": 0,
        "description": "determine the size of the input box, the height of `large` and `small`, are 40px and 24px respectively, while default size is 32px",
        "type": "Enum",
        "typeRaw": "`'large'｜'small'`",
        "default": "",
        "typeDefinition": [
          "large",
          "small"
        ]
      },
      {
        "name": "nzStyle",
        "inputType": 0,
        "description": "to customize the style of the input box",
        "type": "object",
        "typeRaw": "`object`",
        "default": "`{}`",
        "pureDefault": "{}"
      },
      {
        "name": "nzDisabledTime",
        "inputType": 0,
        "description": "to specify the time that cannot be selected",
        "type": "function",
        "typeRaw": "`(current: Date, partial: 'start'｜'end') => { nzDisabledHours, nzDisabledMinutes, nzDisabledSeconds }`",
        "default": ""
      },
      {
        "name": "nzFormat",
        "inputType": 0,
        "description": "to set the date format",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`\"yyyy-MM-dd\"`",
        "pureDefault": "yyyy-MM-dd"
      },
      {
        "name": "nzRanges",
        "inputType": 0,
        "description": "preseted ranges for quick selection",
        "type": "object",
        "typeRaw": "`{ [ key: string ]: Date[] }`",
        "default": ""
      },
      {
        "name": "nzRenderExtraFooter",
        "inputType": 0,
        "description": "render extra footer in panel",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef｜string｜(() => TemplateRef｜string)`",
        "default": ""
      },
      {
        "name": "nzShowTime",
        "inputType": 0,
        "description": "to provide an additional time selection",
        "type": "object",
        "typeRaw": "`object｜boolean`",
        "default": "[TimePicker Options](/components/time-picker/en#api)",
        "pureDefault": "[TimePicker Options](/components/time-picker/en#api)"
      },
      {
        "name": "nzPlaceHolder",
        "inputType": 0,
        "description": "placeholder of date input",
        "type": "Array",
        "typeRaw": "`string[]`",
        "default": ""
      },
      {
        "name": "nzOnOk",
        "inputType": 1,
        "description": "click ok callback",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<Date[]>`",
        "default": ""
      },
      {
        "name": "ngModelChange",
        "inputType": 1,
        "description": "Date change callback",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<Date[]>`",
        "default": ""
      },
      {
        "name": "nzOnOpenChange",
        "inputType": 1,
        "description": "a callback emitter, can be executed whether the popup calendar is popped up or closed",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<boolean>`",
        "default": ""
      }
    ],
    "lib": "@delon/abc",
    "title": "Data Range",
    "description": "Based on the `nz-range-picker` further optimization, better service to start and end dates.",
    "whenToUse": "",
    "doc": "https://ng-alain.com/components/date-picker/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/abc/date-picker"
  },
  {
    "_idx": 10,
    "type": "directive",
    "selector": "down-file",
    "types": {},
    "properties": [
      {
        "name": "http-data",
        "inputType": 0,
        "description": "Parameter of request",
        "type": "object",
        "typeRaw": "`any`",
        "default": ""
      },
      {
        "name": "http-method",
        "inputType": 0,
        "description": "Method of request",
        "type": "object",
        "typeRaw": "`'POST','GET','HEAD','PUT','PATCH','DELETE'`",
        "default": "`'GET'`",
        "pureDefault": "GET"
      },
      {
        "name": "http-url",
        "inputType": 0,
        "description": "Url of request",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "file-name",
        "inputType": 0,
        "description": "Specify a file name",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "success",
        "inputType": 1,
        "description": "Success callback",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<HttpResponse<Blob>>`",
        "default": ""
      },
      {
        "name": "error",
        "inputType": 1,
        "description": "Error callback",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<any>`",
        "default": ""
      }
    ],
    "lib": "@delon/abc",
    "title": "Download file",
    "description": "A file download based on `blob`.",
    "whenToUse": "",
    "doc": "https://ng-alain.com/components/down-file/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/abc/down-file"
  },
  {
    "_idx": 30,
    "type": "component",
    "selector": "se-container",
    "types": {},
    "properties": [
      {
        "name": "gutter",
        "inputType": 0,
        "description": "specify the distance between two items, unit is `px`, only `nzLayout:horizontal`",
        "type": "Enum",
        "typeRaw": "`number`",
        "default": "`32`",
        "pureDefault": "32",
        "typeDefinition": [
          "0",
          "8",
          "16",
          "24",
          "32",
          "40",
          "48",
          "56",
          "64"
        ]
      },
      {
        "name": "se-container",
        "inputType": 0,
        "description": "specify the maximum number of columns to display, the final columns number is determined by col setting combined with [Responsive Rules](/theme/responsive)",
        "type": "Enum",
        "typeRaw": "`'1','2','3','4','5','6'`",
        "default": "",
        "typeDefinition": [
          "1",
          "2",
          "3",
          "4",
          "5",
          "6"
        ]
      },
      {
        "name": "col",
        "inputType": 0,
        "description": "specify the maximum number of columns to display, the final columns number is determined by col setting combined with [Responsive Rules](/theme/responsive)",
        "type": "Enum",
        "typeRaw": "`'1','2','3','4','5','6'`",
        "default": "",
        "typeDefinition": [
          "1",
          "2",
          "3",
          "4",
          "5",
          "6"
        ]
      },
      {
        "name": "labelWidth",
        "inputType": 0,
        "description": "label text of width, unit is `px`",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`150`",
        "pureDefault": "150"
      },
      {
        "name": "nzLayout",
        "inputType": 0,
        "description": "type of layout when `inline` forced size is `compact`",
        "type": "Enum",
        "typeRaw": "`'horizontal','vertical','inline'`",
        "default": "`'horizontal'`",
        "typeDefinition": [
          "horizontal",
          "vertical",
          "inline"
        ],
        "pureDefault": "horizontal"
      },
      {
        "name": "size",
        "inputType": 0,
        "description": "size of edit, forced ingores `error`, `extra`",
        "type": "Enum",
        "typeRaw": "`'default','compact'`",
        "default": "`'default'`",
        "typeDefinition": [
          "default",
          "compact"
        ],
        "pureDefault": "default"
      },
      {
        "name": "firstVisual",
        "inputType": 0,
        "description": "Immediately show validation error message",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "line",
        "inputType": 0,
        "description": "whether separation line style",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "title",
        "inputType": 0,
        "description": "Display title",
        "type": "string",
        "typeRaw": "`string,TemplateRef<void>`",
        "default": ""
      }
    ],
    "lib": "@delon/abc",
    "title": "Edit",
    "description": "A higher-order components of the form HTML template. And optimized some details:",
    "whenToUse": "",
    "doc": "https://ng-alain.com/components/edit/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/abc/edit"
  },
  {
    "_idx": 30,
    "type": "directive",
    "selector": "se-container",
    "types": {},
    "properties": [
      {
        "name": "gutter",
        "inputType": 0,
        "description": "specify the distance between two items, unit is `px`, only `nzLayout:horizontal`",
        "type": "Enum",
        "typeRaw": "`number`",
        "default": "`32`",
        "pureDefault": "32",
        "typeDefinition": [
          "0",
          "8",
          "16",
          "24",
          "32",
          "40",
          "48",
          "56",
          "64"
        ]
      },
      {
        "name": "se-container",
        "inputType": 0,
        "description": "specify the maximum number of columns to display, the final columns number is determined by col setting combined with [Responsive Rules](/theme/responsive)",
        "type": "Enum",
        "typeRaw": "`'1','2','3','4','5','6'`",
        "default": "",
        "typeDefinition": [
          "1",
          "2",
          "3",
          "4",
          "5",
          "6"
        ]
      },
      {
        "name": "col",
        "inputType": 0,
        "description": "specify the maximum number of columns to display, the final columns number is determined by col setting combined with [Responsive Rules](/theme/responsive)",
        "type": "Enum",
        "typeRaw": "`'1','2','3','4','5','6'`",
        "default": "",
        "typeDefinition": [
          "1",
          "2",
          "3",
          "4",
          "5",
          "6"
        ]
      },
      {
        "name": "labelWidth",
        "inputType": 0,
        "description": "label text of width, unit is `px`",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`150`",
        "pureDefault": "150"
      },
      {
        "name": "nzLayout",
        "inputType": 0,
        "description": "type of layout when `inline` forced size is `compact`",
        "type": "Enum",
        "typeRaw": "`'horizontal','vertical','inline'`",
        "default": "`'horizontal'`",
        "typeDefinition": [
          "horizontal",
          "vertical",
          "inline"
        ],
        "pureDefault": "horizontal"
      },
      {
        "name": "size",
        "inputType": 0,
        "description": "size of edit, forced ingores `error`, `extra`",
        "type": "Enum",
        "typeRaw": "`'default','compact'`",
        "default": "`'default'`",
        "typeDefinition": [
          "default",
          "compact"
        ],
        "pureDefault": "default"
      },
      {
        "name": "firstVisual",
        "inputType": 0,
        "description": "Immediately show validation error message",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "line",
        "inputType": 0,
        "description": "whether separation line style",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "title",
        "inputType": 0,
        "description": "Display title",
        "type": "string",
        "typeRaw": "`string,TemplateRef<void>`",
        "default": ""
      }
    ],
    "lib": "@delon/abc",
    "title": "Edit",
    "description": "A higher-order components of the form HTML template. And optimized some details:",
    "whenToUse": "",
    "doc": "https://ng-alain.com/components/edit/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/abc/edit"
  },
  {
    "_idx": 179,
    "type": "component",
    "selector": "se",
    "types": {},
    "properties": [
      {
        "name": "col",
        "inputType": 0,
        "description": "specify the maximum number of columns to display, the final columns number is determined by col setting combined with [Responsive Rules](/theme/responsive)",
        "type": "Enum",
        "typeRaw": "`'1','2','3','4','5','6'`",
        "default": "",
        "typeDefinition": [
          "1",
          "2",
          "3",
          "4",
          "5",
          "6"
        ]
      },
      {
        "name": "label",
        "inputType": 0,
        "description": "Label",
        "type": "string",
        "typeRaw": "`string,TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "optional",
        "inputType": 0,
        "description": "Label optional information",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "optionalHelp",
        "inputType": 0,
        "description": "Label optional help",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "error",
        "inputType": 0,
        "description": "validation error message",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "extra",
        "inputType": 0,
        "description": "The extra prompt message. It is similar to help.",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "required",
        "inputType": 0,
        "description": "whether required identifier",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "line",
        "inputType": 0,
        "description": "whether separation line style",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": ""
      },
      {
        "name": "controlClass",
        "inputType": 0,
        "description": "Control area classes",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "id",
        "inputType": 0,
        "description": "Custom `id` value of component",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      }
    ],
    "lib": "@delon/abc",
    "title": "Edit",
    "description": "A higher-order components of the form HTML template. And optimized some details:",
    "whenToUse": "",
    "doc": "https://ng-alain.com/components/edit/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/abc/edit"
  },
  {
    "_idx": 342,
    "type": "component",
    "selector": "se-title",
    "types": {},
    "properties": [],
    "description": "Display title.",
    "lib": "@delon/abc",
    "title": "Edit",
    "whenToUse": "",
    "doc": "https://ng-alain.com/components/edit/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/abc/edit"
  },
  {
    "_idx": 342,
    "type": "directive",
    "selector": "se-title",
    "types": {},
    "properties": [],
    "description": "Display title.",
    "lib": "@delon/abc",
    "title": "Edit",
    "whenToUse": "",
    "doc": "https://ng-alain.com/components/edit/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/abc/edit"
  },
  {
    "_idx": 6,
    "type": "component",
    "selector": "ellipsis",
    "types": {},
    "properties": [
      {
        "name": "lines",
        "inputType": 0,
        "description": "在按照行数截取下最大的行数，超过则截取省略",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`3`",
        "pureDefault": "3"
      }
    ],
    "lib": "@delon/abc",
    "title": "文本自动省略号",
    "description": "一个简单的文本自动省略号。",
    "whenToUse": "",
    "doc": "https://ng-alain.com/components/ellipsis/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/abc/ellipsis"
  },
  {
    "_idx": 6,
    "type": "component",
    "selector": "error-collect",
    "types": {},
    "properties": [
      {
        "name": "freq",
        "inputType": 0,
        "description": "Monitor frequency, unit is milliseconds",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`500`",
        "pureDefault": "500"
      },
      {
        "name": "offsetTop",
        "inputType": 0,
        "description": "Top offset, unit is `px`",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`145`",
        "pureDefault": "145"
      }
    ],
    "lib": "@delon/abc",
    "title": "Error Collect",
    "description": "A simple form exception messages collector that jump to element location via click icon; it must be a standard `form`.",
    "whenToUse": "",
    "doc": "https://ng-alain.com/components/error-collect/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/abc/error-collect"
  },
  {
    "_idx": 6,
    "type": "directive",
    "selector": "error-collect",
    "types": {},
    "properties": [
      {
        "name": "freq",
        "inputType": 0,
        "description": "Monitor frequency, unit is milliseconds",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`500`",
        "pureDefault": "500"
      },
      {
        "name": "offsetTop",
        "inputType": 0,
        "description": "Top offset, unit is `px`",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`145`",
        "pureDefault": "145"
      }
    ],
    "lib": "@delon/abc",
    "title": "Error Collect",
    "description": "A simple form exception messages collector that jump to element location via click icon; it must be a standard `form`.",
    "whenToUse": "",
    "doc": "https://ng-alain.com/components/error-collect/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/abc/error-collect"
  },
  {
    "_idx": 6,
    "type": "component",
    "selector": "exception",
    "types": {},
    "properties": [
      {
        "name": "type",
        "inputType": 0,
        "description": "type of exception, the corresponding default `title`, `desc`, `img` will be given if set, which can be overridden by explicit setting of `title`, `desc`, `img`",
        "type": "Enum",
        "typeRaw": "`'403','404','500'`",
        "default": "",
        "typeDefinition": [
          "403",
          "404",
          "500"
        ]
      },
      {
        "name": "title",
        "inputType": 0,
        "description": "title",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "desc",
        "inputType": 0,
        "description": "supplementary description",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "img",
        "inputType": 0,
        "description": "the url of background image",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      }
    ],
    "lib": "@delon/abc",
    "title": "Exception",
    "description": "Exceptions page is used to provide feedback on specific abnormal state. Usually, it contains an explanation of the error status, and provides users with suggestions or operations, to prevent users from feeling lost and confused.",
    "whenToUse": "",
    "doc": "https://ng-alain.com/components/exception/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/abc/exception"
  },
  {
    "_idx": 12,
    "type": "component",
    "selector": "footer-toolbar",
    "types": {},
    "properties": [
      {
        "name": "errorCollect",
        "inputType": 0,
        "description": "Whether `error-collect`, make sure to wrap inside the `<form>` element",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "extra",
        "inputType": 0,
        "description": "extra information, align to the left",
        "type": "string",
        "typeRaw": "`string,TemplateRef<void>`",
        "default": ""
      }
    ],
    "lib": "@delon/abc",
    "title": "FooterToolbar",
    "description": "A toolbar fixed at the bottom.",
    "whenToUse": "",
    "doc": "https://ng-alain.com/components/footer-toolbar/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/abc/footer-toolbar"
  },
  {
    "_idx": 6,
    "type": "component",
    "selector": "full-content",
    "types": {},
    "properties": [
      {
        "name": "fullscreen",
        "inputType": 2,
        "description": "Whether full screen (not including top, sidebar area)",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": ""
      },
      {
        "name": "hideTitle",
        "inputType": 0,
        "description": "Hide title when `fullscreen` is true",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "padding",
        "inputType": 0,
        "description": "Padding of work area",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`24`",
        "pureDefault": "24"
      }
    ],
    "lib": "@delon/abc",
    "title": "Full Screen Workspace",
    "description": "Often used for tables with scroll bars, a simple [demo](https://ng-alain.github.io/ng-alain/#/delon/simple-table)。",
    "whenToUse": "",
    "doc": "https://ng-alain.com/components/full-content/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/abc/full-content"
  },
  {
    "_idx": 71,
    "type": "directive",
    "selector": "full-toggle",
    "types": {},
    "properties": [],
    "description": "Switch whether it is full screen.",
    "lib": "@delon/abc",
    "title": "Full Screen Workspace",
    "whenToUse": "",
    "doc": "https://ng-alain.com/components/full-content/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/abc/full-content"
  },
  {
    "_idx": 6,
    "type": "component",
    "selector": "global-footer",
    "types": {
      "GlobalFooterLink": [
        {
          "name": "title",
          "inputType": 0,
          "description": "标题",
          "type": "string",
          "typeRaw": "`string`",
          "default": ""
        },
        {
          "name": "href",
          "inputType": 0,
          "description": "路由链接",
          "type": "string",
          "typeRaw": "`string`",
          "default": ""
        },
        {
          "name": "blankTarget",
          "inputType": 0,
          "description": "是否打开新窗口",
          "type": "boolean",
          "typeRaw": "`boolean`",
          "default": "`false`",
          "pureDefault": "false"
        }
      ]
    },
    "properties": [
      {
        "name": "links",
        "inputType": 0,
        "description": "链接数据",
        "type": "object",
        "typeRaw": "`GlobalFooterLink`",
        "default": "",
        "complexType": "GlobalFooterLink"
      },
      {
        "name": "copyright",
        "inputType": 0,
        "description": "版权信息",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef`",
        "default": ""
      }
    ],
    "lib": "@delon/abc",
    "title": "全局页脚",
    "description": "页脚属于全局导航的一部分，作为对顶部导航的补充，通过传递数据控制展示内容。",
    "whenToUse": "",
    "doc": "https://ng-alain.com/components/global-footer/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/abc/global-footer"
  },
  {
    "_idx": 57,
    "type": "component",
    "selector": "global-footer-item",
    "types": {},
    "properties": [
      {
        "name": "href",
        "inputType": 0,
        "description": "路由链接",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "blankTarget",
        "inputType": 0,
        "description": "是否打开新窗口",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      }
    ],
    "lib": "@delon/abc",
    "title": "全局页脚",
    "description": "页脚属于全局导航的一部分，作为对顶部导航的补充，通过传递数据控制展示内容。",
    "whenToUse": "",
    "doc": "https://ng-alain.com/components/global-footer/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/abc/global-footer"
  },
  {
    "_idx": 51,
    "type": "component",
    "selector": "nz-autocomplete",
    "types": {},
    "properties": [
      {
        "name": "nzBackfill",
        "inputType": 0,
        "description": "backfill selected item the input when using keyboard",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "nzDataSource",
        "inputType": 0,
        "description": "Data source for autocomplete",
        "type": "object",
        "typeRaw": "`AutocompleteDataSource`",
        "default": ""
      },
      {
        "name": "nzDefaultActiveFirstOption",
        "inputType": 0,
        "description": "Whether active first option by default",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "nzWidth",
        "inputType": 0,
        "description": "Custom width, unit px",
        "type": "number",
        "typeRaw": "`number`",
        "default": "trigger element width",
        "pureDefault": "trigger element width"
      },
      {
        "name": "nzOverlayClassName",
        "inputType": 0,
        "description": "Class name of the dropdown root element",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "nzOverlayStyle",
        "inputType": 0,
        "description": "Style of the dropdown root element",
        "type": "object",
        "typeRaw": "`object`",
        "default": "",
        "forceInputType": 0
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Autocomplete",
    "description": "Autocomplete function of input field.",
    "whenToUse": "When there is a need for autocomplete functionality.",
    "doc": "/components/auto-complete/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/auto-complete"
  },
  {
    "_idx": 158,
    "type": "component",
    "selector": "nz-auto-option",
    "types": {},
    "properties": [
      {
        "name": "nzValue",
        "inputType": 0,
        "description": "bind ngModel of the trigger element",
        "type": "object",
        "typeRaw": "`any`",
        "default": ""
      },
      {
        "name": "nzLabel",
        "inputType": 0,
        "description": "display value of the trigger element",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "nzDisabled",
        "inputType": 0,
        "description": "disabled option",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false",
        "forceInputType": 0
      }
    ],
    "lib": "ng-zorro-antd",
    "title": "Autocomplete",
    "description": "Autocomplete function of input field.",
    "whenToUse": "When there is a need for autocomplete functionality.",
    "doc": "/components/auto-complete/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/auto-complete"
  },
  {
    "_idx": 6,
    "type": "component",
    "selector": "notice-icon",
    "types": {},
    "properties": [
      {
        "name": "data",
        "inputType": 0,
        "description": "数据",
        "type": "Array",
        "typeRaw": "`NoticeItem[]`",
        "default": ""
      },
      {
        "name": "count",
        "inputType": 0,
        "description": "图标上的消息总数",
        "type": "number",
        "typeRaw": "`number`",
        "default": ""
      },
      {
        "name": "loading",
        "inputType": 0,
        "description": "弹出卡片加载状态",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "select",
        "inputType": 1,
        "description": "点击列表项的回调",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<NoticeIconSelect>`",
        "default": ""
      },
      {
        "name": "clear",
        "inputType": 1,
        "description": "点击清空按钮的回调",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<string>`",
        "default": ""
      },
      {
        "name": "popoverVisible",
        "inputType": 0,
        "description": "手动控制Popover显示",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "popoverVisibleChange",
        "inputType": 1,
        "description": "Popover显隐回调",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<boolean>`",
        "default": ""
      }
    ],
    "lib": "@delon/abc",
    "title": "通知菜单",
    "description": "用在导航工具栏上，作为整个产品统一的通知中心。",
    "whenToUse": "",
    "doc": "https://ng-alain.com/components/notice-icon/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/abc/notice-icon"
  },
  {
    "_idx": 6,
    "type": "component",
    "selector": "page-header",
    "types": {},
    "properties": [
      {
        "name": "title",
        "inputType": 0,
        "description": "标题名",
        "type": "string",
        "typeRaw": "`string,TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "autoTitle",
        "inputType": 0,
        "description": "自动生成标题，以当前路由从主菜单中定位",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "syncTitle",
        "inputType": 0,
        "description": "是否自动将标题同步至 `TitleService`、`ReuseService` 下，仅 `title` 为 `string` 类型时有效",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "home",
        "inputType": 0,
        "description": "首页文本，若指定空表示不显示",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`首页`",
        "pureDefault": "首页"
      },
      {
        "name": "homeLink",
        "inputType": 0,
        "description": "首页链接",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`/`",
        "pureDefault": "/"
      },
      {
        "name": "autoBreadcrumb",
        "inputType": 0,
        "description": "自动生成导航，以当前路由从主菜单中定位",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "recursiveBreadcrumb",
        "inputType": 0,
        "description": "自动向上递归查找，菜单数据源包含 `/ware`，则 `/ware/1` 也视为 `/ware` 项",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "loading",
        "inputType": 0,
        "description": "是否加载中",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "wide",
        "inputType": 0,
        "description": "是否定宽",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "fixed",
        "inputType": 0,
        "description": "是否固定模式",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "fixedOffsetTop",
        "inputType": 0,
        "description": "固定偏移值",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`64`",
        "pureDefault": "64"
      },
      {
        "name": "breadcrumb",
        "inputType": 0,
        "description": "自定义导航区域",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "logo",
        "inputType": 0,
        "description": "自定义LOGO区域",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "action",
        "inputType": 0,
        "description": "自定义操作区域",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "content",
        "inputType": 0,
        "description": "自定义内容区域",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "extra",
        "inputType": 0,
        "description": "自定义额外信息区域",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "tab",
        "inputType": 0,
        "description": "自定义标签区域",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef<void>`",
        "default": ""
      }
    ],
    "lib": "@delon/abc",
    "title": "页头",
    "description": "页头用来声明页面的主题，包含了用户所关注的最重要的信息，使用户可以快速理解当前页面是什么以及它的功能。",
    "whenToUse": "",
    "doc": "https://ng-alain.com/components/page-header/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/abc/page-header"
  },
  {
    "_idx": 14,
    "type": "component",
    "selector": "qr",
    "types": {},
    "properties": [
      {
        "name": "value",
        "inputType": 0,
        "description": "Value encoded within the QR code",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "background",
        "inputType": 0,
        "description": "Background colour of the QR code",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`white`",
        "pureDefault": "white"
      },
      {
        "name": "backgroundAlpha",
        "inputType": 0,
        "description": "Background alpha of the QR code",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`1.0`",
        "pureDefault": "1.0"
      },
      {
        "name": "foreground",
        "inputType": 0,
        "description": "Foreground colour of the QR code",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`white`",
        "pureDefault": "white"
      },
      {
        "name": "foregroundAlpha",
        "inputType": 0,
        "description": "Foreground alpha of the QR code",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`1.0`",
        "pureDefault": "1.0"
      },
      {
        "name": "level",
        "inputType": 0,
        "description": "Error correction level of the QR code",
        "type": "object",
        "typeRaw": "`'L','M','Q','H'`",
        "default": "`'L'`",
        "pureDefault": "L"
      },
      {
        "name": "mime",
        "inputType": 0,
        "description": "MIME type used to render the image for the QR code",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`image/png`",
        "pureDefault": "image/png"
      },
      {
        "name": "padding",
        "inputType": 0,
        "description": "Padding for the QR code (pixels)",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`10`",
        "pureDefault": "10"
      },
      {
        "name": "size",
        "inputType": 0,
        "description": "Size of the QR code (pixels)",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`220`",
        "pureDefault": "220"
      },
      {
        "name": "change",
        "inputType": 1,
        "description": "change event",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<string>`",
        "default": ""
      }
    ],
    "lib": "@delon/abc",
    "title": "QR",
    "description": "Generate a QR code based on [qrious](https://neocotic.com/qrious).",
    "whenToUse": "",
    "doc": "https://ng-alain.com/components/qr/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/abc/qr"
  },
  {
    "_idx": 6,
    "type": "component",
    "selector": "quick-menu",
    "types": {},
    "properties": [
      {
        "name": "icon",
        "inputType": 0,
        "description": "图标",
        "type": "string",
        "typeRaw": "`string,TemplateRef<void>`",
        "default": "`question-circle`",
        "pureDefault": "question-circle"
      },
      {
        "name": "top",
        "inputType": 0,
        "description": "距离顶部",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`120`",
        "pureDefault": "120"
      },
      {
        "name": "width",
        "inputType": 0,
        "description": "打开后宽度",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`200`",
        "pureDefault": "200"
      },
      {
        "name": "bgColor",
        "inputType": 0,
        "description": "背景",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`#fff`",
        "pureDefault": "#fff"
      },
      {
        "name": "borderColor",
        "inputType": 0,
        "description": "边框颜色",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`#ddd`",
        "pureDefault": "#ddd"
      }
    ],
    "lib": "@delon/abc",
    "title": "快速菜单",
    "description": "快速菜单，用于右侧隐式辅助列表。",
    "whenToUse": "",
    "doc": "https://ng-alain.com/components/quick-menu/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/abc/quick-menu"
  },
  {
    "_idx": 6,
    "type": "component",
    "selector": "result",
    "types": {},
    "properties": [
      {
        "name": "type",
        "inputType": 0,
        "description": "类型，不同类型自带对应的图标",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "title",
        "inputType": 0,
        "description": "标题",
        "type": "string",
        "typeRaw": "`string,TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "description",
        "inputType": 0,
        "description": "结果描述",
        "type": "string",
        "typeRaw": "`string,TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "extra",
        "inputType": 0,
        "description": "补充信息，有默认的灰色背景",
        "type": "string",
        "typeRaw": "`string,TemplateRef<void>`",
        "default": ""
      }
    ],
    "lib": "@delon/abc",
    "title": "处理结果",
    "description": "结果页用于对用户进行的一系列任务处理结果进行反馈。",
    "whenToUse": "",
    "doc": "https://ng-alain.com/components/result/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/abc/result"
  },
  {
    "_idx": 487,
    "type": "component",
    "selector": "reuse-tab",
    "types": {},
    "properties": [
      {
        "name": "mode",
        "inputType": 0,
        "description": "Matching Mode",
        "type": "object",
        "typeRaw": "`ReuseTabMatchMode`",
        "default": "`0`",
        "pureDefault": "0"
      },
      {
        "name": "debug",
        "inputType": 0,
        "description": "Whether Debug mode",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "max",
        "inputType": 0,
        "description": "Maximum of reuse",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`10`",
        "pureDefault": "10"
      },
      {
        "name": "keepingScroll",
        "inputType": 0,
        "description": "Keep the scrollbar position",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "keepingScrollContainer",
        "inputType": 0,
        "description": "Keep the scroll bar container",
        "type": "string",
        "typeRaw": "`string | Element`",
        "default": "`window`",
        "pureDefault": "window"
      },
      {
        "name": "excludes",
        "inputType": 0,
        "description": "Exclusion rules, limited by `mode=URL`",
        "type": "Array",
        "typeRaw": "`RegExp[]`",
        "default": ""
      },
      {
        "name": "allowClose",
        "inputType": 0,
        "description": "Whether to allow close tab",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "showCurrent",
        "inputType": 0,
        "description": "Always show current page",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "customContextMenu",
        "inputType": 0,
        "description": "Custom context click menu",
        "type": "Array",
        "typeRaw": "`ReuseCustomContextMenu[]`",
        "default": ""
      },
      {
        "name": "close",
        "inputType": 1,
        "description": "Close callback event",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter`",
        "default": ""
      },
      {
        "name": "change",
        "inputType": 1,
        "description": "Callback when switching",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter`",
        "default": ""
      }
    ],
    "lib": "@delon/abc",
    "title": "Reuse Route Tab",
    "description": "Reuse route tab are extremely common for admin interfaces, and the problem of component data is not lost when switching routes.",
    "whenToUse": "",
    "doc": "https://ng-alain.com/components/reuse-tab/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/abc/reuse-tab"
  },
  {
    "_idx": 53,
    "type": "component",
    "selector": "sidebar-nav",
    "types": {},
    "properties": [
      {
        "name": "disabledAcl",
        "inputType": 0,
        "description": "`acl` 校验失败时以 `disabled` 状态显示",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "autoCloseUnderPad",
        "inputType": 0,
        "description": "小于Pad宽度时路由切换后自动关闭侧边栏",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "recursivePath",
        "inputType": 0,
        "description": "自动向上递归查找，菜单数据源包含 `/ware`，则 `/ware/1` 也视为 `/ware` 项",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "select",
        "inputType": 1,
        "description": "点击菜单时回调（包含 `disabled`）",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<Menu>`",
        "default": ""
      }
    ],
    "lib": "@delon/abc",
    "title": "主菜单",
    "description": "ng-alain 左边主菜单，依赖于 `@delon/theme`。",
    "whenToUse": "",
    "doc": "https://ng-alain.com/components/sidebar-nav/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/abc/sidebar-nav"
  },
  {
    "_idx": 80,
    "type": "component",
    "selector": "st",
    "types": {
      "STReq": [
        {
          "name": "params",
          "inputType": 0,
          "description": "Request parameters, default to auto append `pi`, `ps` to URL",
          "type": "object",
          "typeRaw": "`any`",
          "default": ""
        },
        {
          "name": "method",
          "inputType": 0,
          "description": "Request method",
          "type": "object",
          "typeRaw": "`'POST','GET','HEAD','PUT','PATCH','DELETE'`",
          "default": "`'GET'`",
          "pureDefault": "GET"
        },
        {
          "name": "body",
          "inputType": 0,
          "description": "Request body (only method is POST)",
          "type": "object",
          "typeRaw": "`any`",
          "default": ""
        },
        {
          "name": "headers",
          "inputType": 0,
          "description": "Request header",
          "type": "object",
          "typeRaw": "`any`",
          "default": ""
        },
        {
          "name": "reName",
          "inputType": 0,
          "description": "Map name `pi`、`ps`",
          "type": "object",
          "typeRaw": "`STReqReNameType`",
          "default": "`{ pi: 'pi', ps: 'ps' }`",
          "pureDefault": "{ pi: 'pi', ps: 'ps' }"
        },
        {
          "name": "allInBody",
          "inputType": 0,
          "description": "Whether to request all parameter data into `body` (except `url` itself parameter)",
          "type": "boolean",
          "typeRaw": "`boolean`",
          "default": "`false`",
          "pureDefault": "false"
        }
      ],
      "STRes": [
        {
          "name": "reName",
          "inputType": 0,
          "description": "Map name `total`、`list`, could be set like `a.b.c`",
          "type": "object",
          "typeRaw": "`{total:string;list:string}`",
          "default": ""
        },
        {
          "name": "process",
          "inputType": 0,
          "description": "Data preprocessing",
          "type": "function",
          "typeRaw": "`(data: STData[]) => STData[]`",
          "default": ""
        }
      ],
      "STPage": [
        {
          "name": "front",
          "inputType": 0,
          "description": "Front paging when `data` is `any[]` or `Observable<any[]>`",
          "type": "boolean",
          "typeRaw": "`boolean`",
          "default": "`true`",
          "pureDefault": "true"
        },
        {
          "name": "zeroIndexed",
          "inputType": 0,
          "description": "Whether the backend paging uses the `0` base index (only data is url)",
          "type": "boolean",
          "typeRaw": "`boolean`",
          "default": "`false`",
          "pureDefault": "false"
        },
        {
          "name": "placement",
          "inputType": 0,
          "description": "Pager direction",
          "type": "Enum",
          "typeRaw": "`'left','center','right'`",
          "default": "`'right'`",
          "typeDefinition": [
            "left",
            "center",
            "right"
          ],
          "pureDefault": "right"
        },
        {
          "name": "show",
          "inputType": 0,
          "description": "Whether to show pager",
          "type": "boolean",
          "typeRaw": "`boolean`",
          "default": ""
        },
        {
          "name": "showSize",
          "inputType": 0,
          "description": "Determine whether `ps` can be changed",
          "type": "boolean",
          "typeRaw": "`boolean`",
          "default": "`false`",
          "pureDefault": "false"
        },
        {
          "name": "pageSizes",
          "inputType": 0,
          "description": "Specify the sizeChanger options",
          "type": "Array",
          "typeRaw": "`number[]`",
          "default": "`[10, 20, 30, 40, 50]`",
          "pureDefault": "[10, 20, 30, 40, 50]"
        },
        {
          "name": "showQuickJumper",
          "inputType": 0,
          "description": "Determine whether you can jump to pages directly",
          "type": "boolean",
          "typeRaw": "`boolean`",
          "default": "`false`",
          "pureDefault": "false"
        },
        {
          "name": "total",
          "inputType": 0,
          "description": "To display the total number and range, support custom string template (Three variable names: `total` for total data, `range[0]` and `range[1]` for current data range; **Variable name** must be double curly braces wrapper)",
          "type": "boolean",
          "typeRaw": "`boolean, string`",
          "default": "`false`",
          "pureDefault": "false"
        },
        {
          "name": "toTop",
          "inputType": 0,
          "description": "To top when pager changed",
          "type": "boolean",
          "typeRaw": "`boolean`",
          "default": "`true`",
          "pureDefault": "true"
        },
        {
          "name": "toTopOffset",
          "inputType": 0,
          "description": "To top offset value",
          "type": "number",
          "typeRaw": "`number`",
          "default": "`100`",
          "pureDefault": "100"
        }
      ],
      "STSingleSort": [
        {
          "name": "key",
          "inputType": 0,
          "description": "Request parameter name",
          "type": "string",
          "typeRaw": "`string`",
          "default": "`sort`",
          "pureDefault": "sort"
        },
        {
          "name": "nameSeparator",
          "inputType": 0,
          "description": "Column name and state separator",
          "type": "string",
          "typeRaw": "`string`",
          "default": "`.`",
          "pureDefault": "."
        }
      ],
      "STMultiSort": [
        {
          "name": "key",
          "inputType": 0,
          "description": "Request parameter name",
          "type": "string",
          "typeRaw": "`string`",
          "default": "`sort`",
          "pureDefault": "sort"
        },
        {
          "name": "separator",
          "inputType": 0,
          "description": "Separator between attributes",
          "type": "string",
          "typeRaw": "`string`",
          "default": ""
        },
        {
          "name": "nameSeparator",
          "inputType": 0,
          "description": "Column name and state separator",
          "type": "string",
          "typeRaw": "`string`",
          "default": "`.`",
          "pureDefault": "."
        },
        {
          "name": "global",
          "inputType": 0,
          "description": "Whether global multi sort mode<br>`true` all `st` defaults multi-sort<br>`false` all `st` non-multiple sorting, just only configurable for rule",
          "type": "boolean",
          "typeRaw": "`boolean`",
          "default": "`true`",
          "pureDefault": "true"
        }
      ]
    },
    "properties": [
      {
        "name": "columns",
        "inputType": 0,
        "description": "Columns description",
        "type": "Array",
        "typeRaw": "`STColumn[]`",
        "default": ""
      },
      {
        "name": "data",
        "inputType": 0,
        "description": "Data source",
        "type": "string",
        "typeRaw": "`string, STData[], Observable<STData[]>`",
        "default": ""
      },
      {
        "name": "req",
        "inputType": 0,
        "description": "Http request configuration",
        "type": "object",
        "typeRaw": "`STReq`",
        "default": "",
        "complexType": "STReq"
      },
      {
        "name": "res",
        "inputType": 0,
        "description": "Http response configuration",
        "type": "object",
        "typeRaw": "`STRes`",
        "default": "",
        "complexType": "STRes"
      },
      {
        "name": "pi",
        "inputType": 0,
        "description": "Page index",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`1`",
        "pureDefault": "1"
      },
      {
        "name": "ps",
        "inputType": 0,
        "description": "Page size, `0` is no page, default is `10`",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`10`",
        "pureDefault": "10"
      },
      {
        "name": "total",
        "inputType": 0,
        "description": "Total data count, should set when nzServerRender is true, default is `0`",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`0`",
        "pureDefault": "0"
      },
      {
        "name": "page",
        "inputType": 0,
        "description": "Pager configuration",
        "type": "object",
        "typeRaw": "`STPage`",
        "default": "",
        "complexType": "STPage"
      },
      {
        "name": "noResult",
        "inputType": 0,
        "description": "Custom no result content",
        "type": "string",
        "typeRaw": "`string,TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "bordered",
        "inputType": 0,
        "description": "Whether to show all table borders",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "size",
        "inputType": 0,
        "description": "Size of table",
        "type": "Enum",
        "typeRaw": "`'small','middle','default'`",
        "default": "`'default'`",
        "typeDefinition": [
          "small",
          "middle",
          "default"
        ],
        "pureDefault": "default"
      },
      {
        "name": "rowClassName",
        "inputType": 0,
        "description": "Row class name of table",
        "type": "function",
        "typeRaw": "`(record: STData, index: number) => string`",
        "default": ""
      },
      {
        "name": "loading",
        "inputType": 0,
        "description": "Loading status of table",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "loadingDelay",
        "inputType": 0,
        "description": "Specifies a delay in milliseconds for loading state (prevent flush)",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`0`",
        "pureDefault": "0"
      },
      {
        "name": "scroll",
        "inputType": 0,
        "description": "Whether table can be scrolled in x/y direction, x or y can be a string that indicates the width and height of table body",
        "type": "object",
        "typeRaw": "`{ y?: string; x?: string }`",
        "default": ""
      },
      {
        "name": "singleSort",
        "inputType": 0,
        "description": "Single sort config<br>If not specified, return: `columnName=ascend|descend`<br>If specified, return: `sort=columnName.(ascend|descend)`",
        "type": "object",
        "typeRaw": "`STSingleSort`",
        "default": "`null`",
        "complexType": "STSingleSort",
        "pureDefault": "null"
      },
      {
        "name": "multiSort",
        "inputType": 0,
        "description": "Whether to mulit-sort, recommended use in URL data source",
        "type": "boolean",
        "typeRaw": "`boolean, STMultiSort`",
        "default": "`false`",
        "complexType": "STMultiSort",
        "pureDefault": "false"
      },
      {
        "name": "rowClickTime",
        "inputType": 0,
        "description": "Click twice in the time range for double click, unit is millisecond",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`200`",
        "pureDefault": "200"
      },
      {
        "name": "header",
        "inputType": 0,
        "description": "Table header renderer",
        "type": "string",
        "typeRaw": "`string,TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "footer",
        "inputType": 0,
        "description": "Table footer renderer",
        "type": "string",
        "typeRaw": "`string,TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "body",
        "inputType": 0,
        "description": "Table extra body renderer, generally used to add total rows",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "widthConfig",
        "inputType": 0,
        "description": "Set col width can not used with width of STColumn",
        "type": "Array",
        "typeRaw": "`string[]`",
        "default": ""
      },
      {
        "name": "expandRowByClick",
        "inputType": 0,
        "description": "Whether to expand row by clicking anywhere in the whole row",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "expand",
        "inputType": 0,
        "description": "Whether current column include expand icon",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "change",
        "inputType": 1,
        "description": "Events",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<STChange>`",
        "default": ""
      },
      {
        "name": "error",
        "inputType": 1,
        "description": "Error event",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<STError>`",
        "default": ""
      }
    ],
    "lib": "@delon/abc",
    "title": "Table",
    "description": "`st` is not creating another table component, but use **configurable** rendering table on base of `nz-table`. this method can satisfy most scenes in admin interfaces, but it's easier to rendering table.",
    "whenToUse": "",
    "doc": "https://ng-alain.com/components/table/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/abc/table"
  },
  {
    "_idx": 6,
    "type": "component",
    "selector": "tag-select",
    "types": {},
    "properties": [
      {
        "name": "expandable",
        "inputType": 0,
        "description": "是否启用 `展开与收进`",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "change",
        "inputType": 1,
        "description": "展开与收进回调函数，参数：`boolean`",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<boolean>`",
        "default": ""
      }
    ],
    "lib": "@delon/abc",
    "title": "标签选择器",
    "description": "增加标签的展开与收进功能。",
    "whenToUse": "",
    "doc": "https://ng-alain.com/components/tag-select/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/abc/tag-select"
  },
  {
    "_idx": 6,
    "type": "component",
    "selector": "sv-container",
    "types": {},
    "properties": [
      {
        "name": "size",
        "inputType": 0,
        "description": "size of view",
        "type": "Enum",
        "typeRaw": "`'small','large'`",
        "default": "`'large'`",
        "typeDefinition": [
          "small",
          "large"
        ],
        "pureDefault": "large"
      },
      {
        "name": "layout",
        "inputType": 0,
        "description": "type of layout",
        "type": "Enum",
        "typeRaw": "`'horizontal','vertical'`",
        "default": "`'horizontal'`",
        "typeDefinition": [
          "horizontal",
          "vertical"
        ],
        "pureDefault": "horizontal"
      },
      {
        "name": "gutter",
        "inputType": 0,
        "description": "specify the distance between two items, unit is `px`",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`32`",
        "pureDefault": "32"
      },
      {
        "name": "col",
        "inputType": 0,
        "description": "specify the maximum number of columns to display, the final columns number is determined by col setting combined with [Responsive Rules](/theme/responsive)",
        "type": "Enum",
        "typeRaw": "`'1','2','3','4','5','6'`",
        "default": "`3`",
        "typeDefinition": [
          "1",
          "2",
          "3",
          "4",
          "5",
          "6"
        ],
        "pureDefault": "3"
      },
      {
        "name": "labelWidth",
        "inputType": 0,
        "description": "label text of width",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`null`",
        "pureDefault": "null"
      },
      {
        "name": "default",
        "inputType": 0,
        "description": "whether default text",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "title",
        "inputType": 0,
        "description": "Display title",
        "type": "string",
        "typeRaw": "`string,TemplateRef<void>`",
        "default": ""
      }
    ],
    "lib": "@delon/abc",
    "title": "View",
    "description": "Viewing grid system is a higher-order components based on the original [Grid System] (https://ng.ant.design/components/grid/zh) that server for view pages.",
    "whenToUse": "",
    "doc": "https://ng-alain.com/components/view/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/abc/view"
  },
  {
    "_idx": 6,
    "type": "directive",
    "selector": "sv-container",
    "types": {},
    "properties": [
      {
        "name": "size",
        "inputType": 0,
        "description": "size of view",
        "type": "Enum",
        "typeRaw": "`'small','large'`",
        "default": "`'large'`",
        "typeDefinition": [
          "small",
          "large"
        ],
        "pureDefault": "large"
      },
      {
        "name": "layout",
        "inputType": 0,
        "description": "type of layout",
        "type": "Enum",
        "typeRaw": "`'horizontal','vertical'`",
        "default": "`'horizontal'`",
        "typeDefinition": [
          "horizontal",
          "vertical"
        ],
        "pureDefault": "horizontal"
      },
      {
        "name": "gutter",
        "inputType": 0,
        "description": "specify the distance between two items, unit is `px`",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`32`",
        "pureDefault": "32"
      },
      {
        "name": "col",
        "inputType": 0,
        "description": "specify the maximum number of columns to display, the final columns number is determined by col setting combined with [Responsive Rules](/theme/responsive)",
        "type": "Enum",
        "typeRaw": "`'1','2','3','4','5','6'`",
        "default": "`3`",
        "typeDefinition": [
          "1",
          "2",
          "3",
          "4",
          "5",
          "6"
        ],
        "pureDefault": "3"
      },
      {
        "name": "labelWidth",
        "inputType": 0,
        "description": "label text of width",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`null`",
        "pureDefault": "null"
      },
      {
        "name": "default",
        "inputType": 0,
        "description": "whether default text",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "title",
        "inputType": 0,
        "description": "Display title",
        "type": "string",
        "typeRaw": "`string,TemplateRef<void>`",
        "default": ""
      }
    ],
    "lib": "@delon/abc",
    "title": "View",
    "description": "Viewing grid system is a higher-order components based on the original [Grid System] (https://ng.ant.design/components/grid/zh) that server for view pages.",
    "whenToUse": "",
    "doc": "https://ng-alain.com/components/view/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/abc/view"
  },
  {
    "_idx": 127,
    "type": "component",
    "selector": "sv",
    "types": {},
    "properties": [
      {
        "name": "col",
        "inputType": 0,
        "description": "specify the maximum number of columns to display, the final columns number is determined by col setting combined with [Responsive Rules](/theme/responsive)",
        "type": "string",
        "typeRaw": "-",
        "default": ""
      },
      {
        "name": "label",
        "inputType": 0,
        "description": "label of view",
        "type": "string",
        "typeRaw": "`string,TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "labelWidth",
        "inputType": 0,
        "description": "label text of width, inherit `sv-container`",
        "type": "number",
        "typeRaw": "`number`",
        "default": ""
      },
      {
        "name": "default",
        "inputType": 0,
        "description": "whether default text, inherit `sv-container`",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": ""
      },
      {
        "name": "type",
        "inputType": 0,
        "description": "type of view",
        "type": "Enum",
        "typeRaw": "`'primary','success','danger','warning'`",
        "default": "",
        "typeDefinition": [
          "primary",
          "success",
          "danger",
          "warning"
        ]
      }
    ],
    "lib": "@delon/abc",
    "title": "View",
    "description": "Viewing grid system is a higher-order components based on the original [Grid System] (https://ng.ant.design/components/grid/zh) that server for view pages.",
    "whenToUse": "",
    "doc": "https://ng-alain.com/components/view/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/abc/view"
  },
  {
    "_idx": 220,
    "type": "component",
    "selector": "sv-title",
    "types": {},
    "properties": [],
    "description": "Display title.",
    "lib": "@delon/abc",
    "title": "View",
    "whenToUse": "",
    "doc": "https://ng-alain.com/components/view/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/abc/view"
  },
  {
    "_idx": 220,
    "type": "directive",
    "selector": "sv-title",
    "types": {},
    "properties": [],
    "description": "Display title.",
    "lib": "@delon/abc",
    "title": "View",
    "whenToUse": "",
    "doc": "https://ng-alain.com/components/view/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/abc/view"
  },
  {
    "_idx": 148,
    "type": "directive",
    "selector": "xlsx",
    "types": {},
    "properties": [],
    "description": "xlsx directive.",
    "lib": "@delon/abc",
    "title": "Excel",
    "whenToUse": "",
    "doc": "https://ng-alain.com/components/xlsx/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/abc/xlsx"
  },
  {
    "_idx": 6,
    "type": "component",
    "selector": "g2-bar",
    "types": {},
    "properties": [
      {
        "name": "delay",
        "inputType": 0,
        "description": "延迟渲染，单位：毫秒",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`0`",
        "pureDefault": "0"
      },
      {
        "name": "title",
        "inputType": 0,
        "description": "图表标题",
        "type": "string",
        "typeRaw": "`string,TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "color",
        "inputType": 0,
        "description": "图表颜色",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`rgba(24, 144, 255, 0.85)`",
        "pureDefault": "rgba(24, 144, 255, 0.85)"
      },
      {
        "name": "padding",
        "inputType": 0,
        "description": "图表内部间距",
        "type": "Array",
        "typeRaw": "`Array<number | string> | string`",
        "default": "`[32, 0, 32, 40]`",
        "pureDefault": "[32, 0, 32, 40]"
      },
      {
        "name": "height",
        "inputType": 0,
        "description": "图表高度",
        "type": "number",
        "typeRaw": "`number`",
        "default": ""
      },
      {
        "name": "data",
        "inputType": 0,
        "description": "数据",
        "type": "Array",
        "typeRaw": "`G2BarData[]`",
        "default": "`[]`",
        "pureDefault": "[]"
      },
      {
        "name": "autoLabel",
        "inputType": 0,
        "description": "在宽度不足时，自动隐藏 x 轴的 label",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      }
    ],
    "lib": "@delon/chart",
    "title": "柱状图",
    "description": "使用垂直的柱子显示类别之间的数值比较。其中一个轴表示需要对比的分类维度，另一个轴代表相应的数值。",
    "whenToUse": "",
    "doc": "https://ng-alain.com/chart/bar/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/chart/bar"
  },
  {
    "_idx": 6,
    "type": "component",
    "selector": "g2-card",
    "types": {},
    "properties": [
      {
        "name": "title",
        "inputType": 0,
        "description": "卡片标题",
        "type": "string",
        "typeRaw": "`string,TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "avatar",
        "inputType": 0,
        "description": "头像",
        "type": "string",
        "typeRaw": "`string,TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "action",
        "inputType": 0,
        "description": "卡片操作",
        "type": "string",
        "typeRaw": "`string,TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "total",
        "inputType": 0,
        "description": "数据总量（支持HTML）",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "footer",
        "inputType": 0,
        "description": "卡片底部",
        "type": "string",
        "typeRaw": "`string,TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "contentHeight",
        "inputType": 0,
        "description": "内容区域高度（单位：`px`）",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "bordered",
        "inputType": 0,
        "description": "是否显示边框",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      }
    ],
    "lib": "@delon/chart",
    "title": "图表卡片",
    "description": "图表卡片，用于展示图表的卡片容器，可以方便的配合其它图表套件展示丰富信息。",
    "whenToUse": "",
    "doc": "https://ng-alain.com/chart/card/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/chart/card"
  },
  {
    "_idx": 34,
    "type": "component",
    "selector": "g2-custom",
    "types": {},
    "properties": [
      {
        "name": "height",
        "inputType": 0,
        "description": "Height of chart container",
        "type": "number",
        "typeRaw": "`number`",
        "default": ""
      },
      {
        "name": "resizeTime",
        "inputType": 0,
        "description": "Resize event debounce time",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`200`",
        "pureDefault": "200"
      },
      {
        "name": "render",
        "inputType": 1,
        "description": "Render event",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<ElementRef>`",
        "default": ""
      },
      {
        "name": "resize",
        "inputType": 1,
        "description": "Resize event",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<ElementRef>`",
        "default": ""
      },
      {
        "name": "destroy",
        "inputType": 1,
        "description": "Destroy event",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<ElementRef>`",
        "default": ""
      }
    ],
    "lib": "@delon/chart",
    "title": "Custom Chart",
    "description": "Use `g2-custom` component to package your G2 chart.",
    "whenToUse": "",
    "doc": "https://ng-alain.com/chart/custom/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/chart/custom"
  },
  {
    "_idx": 6,
    "type": "component",
    "selector": "g2-gauge",
    "types": {},
    "properties": [
      {
        "name": "delay",
        "inputType": 0,
        "description": "延迟渲染，单位：毫秒",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`0`",
        "pureDefault": "0"
      },
      {
        "name": "title",
        "inputType": 0,
        "description": "图表标题",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "height",
        "inputType": 0,
        "description": "图表高度",
        "type": "number",
        "typeRaw": "`number`",
        "default": ""
      },
      {
        "name": "color",
        "inputType": 0,
        "description": "图表颜色",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`#2F9CFF`",
        "pureDefault": "#2F9CFF"
      },
      {
        "name": "bgColor",
        "inputType": 0,
        "description": "图表背景色",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`#F0F2F5`",
        "pureDefault": "#F0F2F5"
      },
      {
        "name": "percent",
        "inputType": 0,
        "description": "进度比例",
        "type": "number",
        "typeRaw": "`number`",
        "default": ""
      },
      {
        "name": "padding",
        "inputType": 0,
        "description": "内边距",
        "type": "Array",
        "typeRaw": "`Array<number | string>`",
        "default": "`[10, 10, 30, 10]`",
        "pureDefault": "[10, 10, 30, 10]"
      },
      {
        "name": "format",
        "inputType": 0,
        "description": "坐标轴格式",
        "type": "function",
        "typeRaw": "`(text: string, item: {}, index: number) => string`",
        "default": ""
      }
    ],
    "lib": "@delon/chart",
    "title": "仪表盘",
    "description": "一种进度展示方式，可以更直观的展示当前的进展情况，通常也可表示占比。",
    "whenToUse": "",
    "doc": "https://ng-alain.com/chart/gauge/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/chart/gauge"
  },
  {
    "_idx": 6,
    "type": "component",
    "selector": "g2-mini-area",
    "types": {},
    "properties": [
      {
        "name": "delay",
        "inputType": 0,
        "description": "延迟渲染，单位：毫秒",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`0`",
        "pureDefault": "0"
      },
      {
        "name": "color",
        "inputType": 0,
        "description": "图表颜色",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`rgba(24, 144, 255, 0.2)`",
        "pureDefault": "rgba(24, 144, 255, 0.2)"
      },
      {
        "name": "borderColor",
        "inputType": 0,
        "description": "图表边颜色",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`#1890FF`",
        "pureDefault": "#1890FF"
      },
      {
        "name": "height",
        "inputType": 0,
        "description": "图表高度",
        "type": "number",
        "typeRaw": "`number`",
        "default": ""
      },
      {
        "name": "line",
        "inputType": 0,
        "description": "是否显示描边",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "animate",
        "inputType": 0,
        "description": "是否显示动画",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "padding",
        "inputType": 0,
        "description": "图表内部间距",
        "type": "string",
        "typeRaw": "`array`",
        "default": "`[8, 8, 8, 8]`",
        "pureDefault": "[8, 8, 8, 8]"
      },
      {
        "name": "xAxis",
        "inputType": 0,
        "description": "[x 轴配置](https://www.yuque.com/antv/g2-docs/api-chart#frgaiw)",
        "type": "object",
        "typeRaw": "`object`",
        "default": ""
      },
      {
        "name": "yAxis",
        "inputType": 0,
        "description": "[y 轴配置](https://www.yuque.com/antv/g2-docs/api-chart#frgaiw)",
        "type": "object",
        "typeRaw": "`object`",
        "default": ""
      },
      {
        "name": "yTooltipSuffix",
        "inputType": 0,
        "description": "y 轴Tooltip后缀，一般指定单位",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "tooltipType",
        "inputType": 0,
        "description": "Tooltip显示类型",
        "type": "Enum",
        "typeRaw": "`'mini','default'`",
        "default": "`'default'`",
        "typeDefinition": [
          "mini",
          "default"
        ],
        "pureDefault": "default"
      },
      {
        "name": "data",
        "inputType": 0,
        "description": "数据",
        "type": "Array",
        "typeRaw": "`G2MiniAreaData[]`",
        "default": ""
      }
    ],
    "lib": "@delon/chart",
    "title": "迷你区域图",
    "description": "面积图又叫区域图。 它是在折线图的基础之上形成的, 它将折线图中折线与自变量坐标轴之间的区域使用颜色或者纹理填充，这样一个填充区域我们叫做面积，颜色的填充可以更好的突出趋势信息。",
    "whenToUse": "",
    "doc": "https://ng-alain.com/chart/mini-area/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/chart/mini-area"
  },
  {
    "_idx": 6,
    "type": "component",
    "selector": "g2-mini-bar",
    "types": {},
    "properties": [
      {
        "name": "delay",
        "inputType": 0,
        "description": "延迟渲染，单位：毫秒",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`0`",
        "pureDefault": "0"
      },
      {
        "name": "color",
        "inputType": 0,
        "description": "图表颜色",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`#1890FF`",
        "pureDefault": "#1890FF"
      },
      {
        "name": "height",
        "inputType": 0,
        "description": "图表高度",
        "type": "number",
        "typeRaw": "`number`",
        "default": ""
      },
      {
        "name": "yTooltipSuffix",
        "inputType": 0,
        "description": "y 轴Tooltip后缀，一般指定单位",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "tooltipType",
        "inputType": 0,
        "description": "Tooltip显示类型",
        "type": "Enum",
        "typeRaw": "`'mini','default'`",
        "default": "`'default'`",
        "typeDefinition": [
          "mini",
          "default"
        ],
        "pureDefault": "default"
      },
      {
        "name": "borderWidth",
        "inputType": 0,
        "description": "线条粗细",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`5`",
        "pureDefault": "5"
      },
      {
        "name": "padding",
        "inputType": 0,
        "description": "图表内部间距",
        "type": "string",
        "typeRaw": "`array`",
        "default": "`[8, 8, 8, 8]`",
        "pureDefault": "[8, 8, 8, 8]"
      },
      {
        "name": "data",
        "inputType": 0,
        "description": "数据",
        "type": "Array",
        "typeRaw": "`G2MiniBarData[]`",
        "default": ""
      }
    ],
    "lib": "@delon/chart",
    "title": "迷你柱状图",
    "description": "迷你柱状图更适合展示简单的区间数据，简洁的表现方式可以很好的减少大数据量的视觉展现压力。",
    "whenToUse": "",
    "doc": "https://ng-alain.com/chart/mini-bar/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/chart/mini-bar"
  },
  {
    "_idx": 6,
    "type": "component",
    "selector": "g2-mini-progress",
    "types": {},
    "properties": [
      {
        "name": "target",
        "inputType": 0,
        "description": "目标比例",
        "type": "number",
        "typeRaw": "`number`",
        "default": ""
      },
      {
        "name": "color",
        "inputType": 0,
        "description": "进度条颜色",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "strokeWidth",
        "inputType": 0,
        "description": "进度条高度",
        "type": "number",
        "typeRaw": "`number`",
        "default": ""
      },
      {
        "name": "percent",
        "inputType": 0,
        "description": "进度比例",
        "type": "number",
        "typeRaw": "`number`",
        "default": ""
      }
    ],
    "lib": "@delon/chart",
    "title": "迷你进度条",
    "description": "用于显示跟速度相关图形再适合不过。",
    "whenToUse": "",
    "doc": "https://ng-alain.com/chart/mini-progress/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/chart/mini-progress"
  },
  {
    "_idx": 6,
    "type": "component",
    "selector": "number-info",
    "types": {},
    "properties": [
      {
        "name": "title",
        "inputType": 0,
        "description": "title",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "subTitle",
        "inputType": 0,
        "description": "subtitle",
        "type": "TemplateRef",
        "typeRaw": "`TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "total",
        "inputType": 0,
        "description": "total amount",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "suffix",
        "inputType": 0,
        "description": "total amount suffix",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "subTotal",
        "inputType": 0,
        "description": "total amount of additional information",
        "type": "string",
        "typeRaw": "`string`",
        "default": ""
      },
      {
        "name": "status",
        "inputType": 0,
        "description": "increase state",
        "type": "Enum",
        "typeRaw": "`'up','down'`",
        "default": "",
        "typeDefinition": [
          "up",
          "down"
        ]
      },
      {
        "name": "theme",
        "inputType": 0,
        "description": "state style",
        "type": "Enum",
        "typeRaw": "`'light','default'`",
        "default": "`'light'`",
        "typeDefinition": [
          "light",
          "default"
        ],
        "pureDefault": "light"
      },
      {
        "name": "gap",
        "inputType": 0,
        "description": "set the spacing (pixels) between numbers and descriptions",
        "type": "number",
        "typeRaw": "`number`",
        "default": "8",
        "pureDefault": "8"
      }
    ],
    "lib": "@delon/chart",
    "title": "NumberInfo",
    "description": "Often used in data cards for highlighting the business data.",
    "whenToUse": "",
    "doc": "https://ng-alain.com/chart/number-info/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/chart/number-info"
  },
  {
    "_idx": 6,
    "type": "component",
    "selector": "g2-pie",
    "types": {},
    "properties": [
      {
        "name": "delay",
        "inputType": 0,
        "description": "延迟渲染，单位：毫秒",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`0`",
        "pureDefault": "0"
      },
      {
        "name": "animate",
        "inputType": 0,
        "description": "是否显示动画",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "color",
        "inputType": 0,
        "description": "图表颜色",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`rgba(24, 144, 255, 0.85)`",
        "pureDefault": "rgba(24, 144, 255, 0.85)"
      },
      {
        "name": "height",
        "inputType": 0,
        "description": "图表高度",
        "type": "number",
        "typeRaw": "`number`",
        "default": ""
      },
      {
        "name": "hasLegend",
        "inputType": 0,
        "description": "是否显示 legend",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "padding",
        "inputType": 0,
        "description": "图表内部间距",
        "type": "Array",
        "typeRaw": "`number[]`",
        "default": "`[12, 0, 12, 0]`",
        "pureDefault": "[12, 0, 12, 0]"
      },
      {
        "name": "percent",
        "inputType": 0,
        "description": "占比",
        "type": "number",
        "typeRaw": "`number`",
        "default": ""
      },
      {
        "name": "lineWidth",
        "inputType": 0,
        "description": "边框粗细",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`0`",
        "pureDefault": "0"
      },
      {
        "name": "inner",
        "inputType": 0,
        "description": "内部极坐标系的半径",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`0.75`",
        "pureDefault": "0.75"
      },
      {
        "name": "tooltip",
        "inputType": 0,
        "description": "是否显示 tooltip",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "select",
        "inputType": 0,
        "description": "几何标记的选中模式",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "subTitle",
        "inputType": 0,
        "description": "图表子标题",
        "type": "string",
        "typeRaw": "`string,TemplateRef<void><void>`",
        "default": ""
      },
      {
        "name": "total",
        "inputType": 0,
        "description": "总量",
        "type": "string",
        "typeRaw": "`string,TemplateRef<void><void>`",
        "default": ""
      },
      {
        "name": "valueFormat",
        "inputType": 0,
        "description": "y轴格式化",
        "type": "function",
        "typeRaw": "`(y: number) => string`",
        "default": ""
      },
      {
        "name": "data",
        "inputType": 0,
        "description": "数据",
        "type": "Array",
        "typeRaw": "`G2PieData[]`",
        "default": ""
      }
    ],
    "lib": "@delon/chart",
    "title": "饼状图",
    "description": "用于显示跟速度相关图形再适合不过。",
    "whenToUse": "",
    "doc": "https://ng-alain.com/chart/pie/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/chart/pie"
  },
  {
    "_idx": 6,
    "type": "component",
    "selector": "g2-radar",
    "types": {},
    "properties": [
      {
        "name": "delay",
        "inputType": 0,
        "description": "延迟渲染，单位：毫秒",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`0`",
        "pureDefault": "0"
      },
      {
        "name": "title",
        "inputType": 0,
        "description": "图表标题",
        "type": "string",
        "typeRaw": "`string,TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "height",
        "inputType": 0,
        "description": "图表高度",
        "type": "number",
        "typeRaw": "`number`",
        "default": ""
      },
      {
        "name": "hasLegend",
        "inputType": 0,
        "description": "是否显示 legend",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      },
      {
        "name": "padding",
        "inputType": 0,
        "description": "图表内部间距",
        "type": "string",
        "typeRaw": "`array`",
        "default": "`[24, 30, 16, 30]`",
        "pureDefault": "[24, 30, 16, 30]"
      },
      {
        "name": "colors",
        "inputType": 0,
        "description": "颜色列表",
        "type": "Array",
        "typeRaw": "`string[]`",
        "default": ""
      },
      {
        "name": "data",
        "inputType": 0,
        "description": "数据",
        "type": "Array",
        "typeRaw": "`G2RadarData[]`",
        "default": ""
      }
    ],
    "lib": "@delon/chart",
    "title": "雷达图",
    "description": "雷达图是以相同点开始的轴上表示的三个或更多个定量变量的二维图形的形式显示多变量数据的图形方法。轴的相对位置和角度通常是不知情的。",
    "whenToUse": "",
    "doc": "https://ng-alain.com/chart/radar/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/chart/radar"
  },
  {
    "_idx": 6,
    "type": "component",
    "selector": "g2-single-bar",
    "types": {},
    "properties": [
      {
        "name": "delay",
        "inputType": 0,
        "description": "延迟渲染，单位：毫秒",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`0`",
        "pureDefault": "0"
      },
      {
        "name": "plusColor",
        "inputType": 0,
        "description": "图表颜色",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`#40a9ff`",
        "pureDefault": "#40a9ff"
      },
      {
        "name": "minusColor",
        "inputType": 0,
        "description": "负值图表颜色",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`#ff4d4f`",
        "pureDefault": "#ff4d4f"
      },
      {
        "name": "height",
        "inputType": 0,
        "description": "图表高度",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`60`",
        "pureDefault": "60"
      },
      {
        "name": "barSize",
        "inputType": 0,
        "description": "柱状高度",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`30`",
        "pureDefault": "30"
      },
      {
        "name": "min",
        "inputType": 0,
        "description": "最大值，若小于0表示显示负值",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`0`",
        "pureDefault": "0"
      },
      {
        "name": "max",
        "inputType": 0,
        "description": "最小值",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`100`",
        "pureDefault": "100"
      },
      {
        "name": "padding",
        "inputType": 0,
        "description": "图表内部间距",
        "type": "object",
        "typeRaw": "`any`",
        "default": "`0`",
        "pureDefault": "0"
      },
      {
        "name": "value",
        "inputType": 0,
        "description": "值",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`0`",
        "pureDefault": "0"
      },
      {
        "name": "format",
        "inputType": 0,
        "description": "显示值格式",
        "type": "function",
        "typeRaw": "`(value: number) => string`",
        "default": ""
      },
      {
        "name": "textStyle",
        "inputType": 0,
        "description": "显示值样式",
        "type": "object",
        "typeRaw": "`any`",
        "default": "`{ fontSize: 12, color: '#595959' }`",
        "pureDefault": "{ fontSize: 12, color: '#595959' }"
      }
    ],
    "lib": "@delon/chart",
    "title": "单一柱状图",
    "description": "单一柱状图更适合在列表中展示简单的区间数据，简洁的表现方式可以很好的减少大数据量的视觉展现压力。",
    "whenToUse": "",
    "doc": "https://ng-alain.com/chart/single-bar/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/chart/single-bar"
  },
  {
    "_idx": 6,
    "type": "component",
    "selector": "g2-tag-cloud",
    "types": {},
    "properties": [
      {
        "name": "delay",
        "inputType": 0,
        "description": "延迟渲染，单位：毫秒",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`0`",
        "pureDefault": "0"
      },
      {
        "name": "height",
        "inputType": 0,
        "description": "高度值",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`100`",
        "pureDefault": "100"
      },
      {
        "name": "data",
        "inputType": 0,
        "description": "数据",
        "type": "Array",
        "typeRaw": "`G2TagCloudData[]`",
        "default": "`[]`",
        "pureDefault": "[]"
      }
    ],
    "lib": "@delon/chart",
    "title": "标签云",
    "description": "标签云是一套相关的标签以及与此相应的权重展示方式，一般典型的标签云有 30 至 150 个标签，而权重影响使用的字体大小或其他视觉效果。",
    "whenToUse": "",
    "doc": "https://ng-alain.com/chart/tag-cloud/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/chart/tag-cloud"
  },
  {
    "_idx": 6,
    "type": "component",
    "selector": "g2-timeline",
    "types": {},
    "properties": [
      {
        "name": "delay",
        "inputType": 0,
        "description": "延迟渲染，单位：毫秒",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`0`",
        "pureDefault": "0"
      },
      {
        "name": "title",
        "inputType": 0,
        "description": "图表标题",
        "type": "string",
        "typeRaw": "`string,TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "data",
        "inputType": 0,
        "description": "数据",
        "type": "Array",
        "typeRaw": "`G2TimelineData[]`",
        "default": ""
      },
      {
        "name": "titleMap",
        "inputType": 0,
        "description": "指标别名",
        "type": "object",
        "typeRaw": "`{ y1: string , y2: string }`",
        "default": ""
      },
      {
        "name": "colorMap",
        "inputType": 0,
        "description": "颜色",
        "type": "object",
        "typeRaw": "`{ y1: string , y2: string }`",
        "default": "`{ y1: '#1890FF', y2: '#2FC25B' }`",
        "pureDefault": "{ y1: '#1890FF', y2: '#2FC25B' }"
      },
      {
        "name": "height",
        "inputType": 0,
        "description": "高度值",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`400`",
        "pureDefault": "400"
      },
      {
        "name": "padding",
        "inputType": 0,
        "description": "图表内部间距",
        "type": "Array",
        "typeRaw": "`number[]`",
        "default": "`[60, 20, 40, 40]`",
        "pureDefault": "[60, 20, 40, 40]"
      },
      {
        "name": "borderWidth",
        "inputType": 0,
        "description": "线条",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`2`",
        "pureDefault": "2"
      },
      {
        "name": "mask",
        "inputType": 0,
        "description": "日期格式",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`HH:mm`",
        "pureDefault": "HH:mm"
      },
      {
        "name": "position",
        "inputType": 0,
        "description": "标题位置",
        "type": "Enum",
        "typeRaw": "`'top','right','bottom','left'`",
        "default": "`'top'`",
        "typeDefinition": [
          "top",
          "right",
          "bottom",
          "left"
        ],
        "pureDefault": "top"
      },
      {
        "name": "slider",
        "inputType": 0,
        "description": "是否需要滑动条",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      }
    ],
    "lib": "@delon/chart",
    "title": "折线图",
    "description": "使用 `timeline` 组件可以实现带有时间轴的柱状图展现，而其中的 `x` 属性，则是时间值的指向，默认最多支持同时展现两个指标，分别是 `y1` 和 `y2`。",
    "whenToUse": "",
    "doc": "https://ng-alain.com/chart/timeline/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/chart/timeline"
  },
  {
    "_idx": 6,
    "type": "component",
    "selector": "trend",
    "types": {},
    "properties": [
      {
        "name": "colorful",
        "inputType": 0,
        "description": "是否彩色标记",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "flag",
        "inputType": 0,
        "description": "上升下降标识",
        "type": "Enum",
        "typeRaw": "`'up','down'`",
        "default": "",
        "typeDefinition": [
          "up",
          "down"
        ]
      },
      {
        "name": "reverseColor",
        "inputType": 0,
        "description": "颜色反转",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`false`",
        "pureDefault": "false"
      }
    ],
    "lib": "@delon/chart",
    "title": "趋势标记",
    "description": "趋势符号，标记上升和下降趋势。通常用绿色代表“好”，红色代表“不好”，股票涨跌场景除外。",
    "whenToUse": "",
    "doc": "https://ng-alain.com/chart/trend/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/chart/trend"
  },
  {
    "_idx": 6,
    "type": "component",
    "selector": "g2-water-wave",
    "types": {},
    "properties": [
      {
        "name": "title",
        "inputType": 0,
        "description": "图表标题",
        "type": "string",
        "typeRaw": "`string,TemplateRef<void>`",
        "default": ""
      },
      {
        "name": "height",
        "inputType": 0,
        "description": "图表高度",
        "type": "number",
        "typeRaw": "`number`",
        "default": "`160`",
        "pureDefault": "160"
      },
      {
        "name": "color",
        "inputType": 0,
        "description": "图表颜色",
        "type": "string",
        "typeRaw": "`string`",
        "default": "`#1890FF`",
        "pureDefault": "#1890FF"
      },
      {
        "name": "percent",
        "inputType": 0,
        "description": "进度比例",
        "type": "number",
        "typeRaw": "`number`",
        "default": ""
      }
    ],
    "lib": "@delon/chart",
    "title": "水波图",
    "description": "水波图是一种比例的展示方式，可以更直观的展示关键值的占比。",
    "whenToUse": "",
    "doc": "https://ng-alain.com/chart/water-wave/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/chart/water-wave"
  },
  {
    "_idx": 319,
    "type": "component",
    "selector": "sf",
    "types": {
      "SFButton": [
        {
          "name": "submit",
          "inputType": 0,
          "description": "Submit text of button",
          "type": "string",
          "typeRaw": "`string`",
          "default": "`提交`",
          "pureDefault": "提交"
        },
        {
          "name": "reset",
          "inputType": 0,
          "description": "Reset text of button",
          "type": "string",
          "typeRaw": "`string`",
          "default": "`重置`",
          "pureDefault": "重置"
        },
        {
          "name": "search",
          "inputType": 0,
          "description": "Search text of button",
          "type": "string",
          "typeRaw": "`string`",
          "default": "`搜索`",
          "pureDefault": "搜索"
        },
        {
          "name": "edit",
          "inputType": 0,
          "description": "Edit text of button",
          "type": "string",
          "typeRaw": "`string`",
          "default": "`保存`",
          "pureDefault": "保存"
        },
        {
          "name": "render",
          "inputType": 0,
          "description": "Button layout",
          "type": "object",
          "typeRaw": "`SFRenderButton`",
          "default": ""
        }
      ]
    },
    "properties": [
      {
        "name": "layout",
        "inputType": 0,
        "description": "layout of the form",
        "type": "string",
        "typeRaw": "`horizontal,vertical,inline`",
        "default": "`horizontal`",
        "pureDefault": "horizontal"
      },
      {
        "name": "schema",
        "inputType": 0,
        "description": "**Required** JSON Schema",
        "type": "object",
        "typeRaw": "`SFSchema`",
        "default": ""
      },
      {
        "name": "ui",
        "inputType": 0,
        "description": "UI Schema",
        "type": "object",
        "typeRaw": "`SFUISchema`",
        "default": ""
      },
      {
        "name": "formData",
        "inputType": 0,
        "description": "Default form values",
        "type": "object",
        "typeRaw": "`any`",
        "default": ""
      },
      {
        "name": "mode",
        "inputType": 0,
        "description": "Form type mode",
        "type": "string",
        "typeRaw": "`default,search,edit`",
        "default": "`default`",
        "pureDefault": "default"
      },
      {
        "name": "button",
        "inputType": 0,
        "description": "Submit button of the form",
        "type": "object",
        "typeRaw": "`SFButton, 'none'`",
        "default": "`{}`",
        "complexType": "SFButton",
        "pureDefault": "{}"
      },
      {
        "name": "firstVisual",
        "inputType": 0,
        "description": "Whether to show visual error immediately",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "liveValidate",
        "inputType": 0,
        "description": "Whether to live validate",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "autocomplete",
        "inputType": 0,
        "description": "autocomplete value of this form",
        "type": "string",
        "typeRaw": "`on,off`",
        "default": "`null`",
        "pureDefault": "null"
      },
      {
        "name": "formChange",
        "inputType": 1,
        "description": "Callback when data changes",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<{}>`",
        "default": ""
      },
      {
        "name": "formSubmit",
        "inputType": 1,
        "description": "Callback when submitting the form",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<{}>`",
        "default": ""
      },
      {
        "name": "formReset",
        "inputType": 1,
        "description": "Callback when resetting the form",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<{}>`",
        "default": ""
      },
      {
        "name": "formError",
        "inputType": 1,
        "description": "Callback when form check",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<ErrorData[]>`",
        "default": ""
      }
    ],
    "lib": "@delon/form",
    "title": "Getting Started",
    "description": "@delon/form is a dynamic build form based on the [JSON Schema](http://json-schema.org/) standard.",
    "whenToUse": "",
    "doc": "https://ng-alain.com/form/getting-started/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/form/src"
  },
  {
    "_idx": 319,
    "type": "directive",
    "selector": "sf",
    "types": {
      "SFButton": [
        {
          "name": "submit",
          "inputType": 0,
          "description": "Submit text of button",
          "type": "string",
          "typeRaw": "`string`",
          "default": "`提交`",
          "pureDefault": "提交"
        },
        {
          "name": "reset",
          "inputType": 0,
          "description": "Reset text of button",
          "type": "string",
          "typeRaw": "`string`",
          "default": "`重置`",
          "pureDefault": "重置"
        },
        {
          "name": "search",
          "inputType": 0,
          "description": "Search text of button",
          "type": "string",
          "typeRaw": "`string`",
          "default": "`搜索`",
          "pureDefault": "搜索"
        },
        {
          "name": "edit",
          "inputType": 0,
          "description": "Edit text of button",
          "type": "string",
          "typeRaw": "`string`",
          "default": "`保存`",
          "pureDefault": "保存"
        },
        {
          "name": "render",
          "inputType": 0,
          "description": "Button layout",
          "type": "object",
          "typeRaw": "`SFRenderButton`",
          "default": ""
        }
      ]
    },
    "properties": [
      {
        "name": "layout",
        "inputType": 0,
        "description": "layout of the form",
        "type": "string",
        "typeRaw": "`horizontal,vertical,inline`",
        "default": "`horizontal`",
        "pureDefault": "horizontal"
      },
      {
        "name": "schema",
        "inputType": 0,
        "description": "**Required** JSON Schema",
        "type": "object",
        "typeRaw": "`SFSchema`",
        "default": ""
      },
      {
        "name": "ui",
        "inputType": 0,
        "description": "UI Schema",
        "type": "object",
        "typeRaw": "`SFUISchema`",
        "default": ""
      },
      {
        "name": "formData",
        "inputType": 0,
        "description": "Default form values",
        "type": "object",
        "typeRaw": "`any`",
        "default": ""
      },
      {
        "name": "mode",
        "inputType": 0,
        "description": "Form type mode",
        "type": "string",
        "typeRaw": "`default,search,edit`",
        "default": "`default`",
        "pureDefault": "default"
      },
      {
        "name": "button",
        "inputType": 0,
        "description": "Submit button of the form",
        "type": "object",
        "typeRaw": "`SFButton, 'none'`",
        "default": "`{}`",
        "complexType": "SFButton",
        "pureDefault": "{}"
      },
      {
        "name": "firstVisual",
        "inputType": 0,
        "description": "Whether to show visual error immediately",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "liveValidate",
        "inputType": 0,
        "description": "Whether to live validate",
        "type": "boolean",
        "typeRaw": "`boolean`",
        "default": "`true`",
        "pureDefault": "true"
      },
      {
        "name": "autocomplete",
        "inputType": 0,
        "description": "autocomplete value of this form",
        "type": "string",
        "typeRaw": "`on,off`",
        "default": "`null`",
        "pureDefault": "null"
      },
      {
        "name": "formChange",
        "inputType": 1,
        "description": "Callback when data changes",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<{}>`",
        "default": ""
      },
      {
        "name": "formSubmit",
        "inputType": 1,
        "description": "Callback when submitting the form",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<{}>`",
        "default": ""
      },
      {
        "name": "formReset",
        "inputType": 1,
        "description": "Callback when resetting the form",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<{}>`",
        "default": ""
      },
      {
        "name": "formError",
        "inputType": 1,
        "description": "Callback when form check",
        "type": "EventEmitter",
        "typeRaw": "`EventEmitter<ErrorData[]>`",
        "default": ""
      }
    ],
    "lib": "@delon/form",
    "title": "Getting Started",
    "description": "@delon/form is a dynamic build form based on the [JSON Schema](http://json-schema.org/) standard.",
    "whenToUse": "",
    "doc": "https://ng-alain.com/form/getting-started/en",
    "github": "https://github.com/ng-alain/delon/tree/master/packages/form/src"
  },
  {
    "_idx": 31,
    "type": "component",
    "selector": "nz-breadcrumb-item",
    "types": {},
    "properties": [],
    "lib": "ng-zorro-antd",
    "title": "Breadcrumb",
    "description": "A breadcrumb displays the current location within a hierarchy. It allows going back to states higher up in the hierarchy.",
    "whenToUse": "- When the system has more than two layers in a hierarchy.\n- When you need to inform the user of where they are.\n- When the user may need to navigate back to a higher level.\n- When the application has multi-layer architecture.",
    "doc": "/components/breadcrumb/en",
    "github": "https://github.com/NG-ZORRO/ng-zorro-antd/tree/master/components/breadcrumb"
  }
]